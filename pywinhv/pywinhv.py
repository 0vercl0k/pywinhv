# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_pywinhv')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_pywinhv')
    _pywinhv = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pywinhv', [dirname(__file__)])
        except ImportError:
            import _pywinhv
            return _pywinhv
        try:
            _mod = imp.load_module('_pywinhv', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _pywinhv = swig_import_helper()
    del swig_import_helper
else:
    import _pywinhv
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def new_PUINT32():
    return _pywinhv.new_PUINT32()
new_PUINT32 = _pywinhv.new_PUINT32

def copy_PUINT32(value):
    return _pywinhv.copy_PUINT32(value)
copy_PUINT32 = _pywinhv.copy_PUINT32

def delete_PUINT32(obj):
    return _pywinhv.delete_PUINT32(obj)
delete_PUINT32 = _pywinhv.delete_PUINT32

def PUINT32_assign(obj, value):
    return _pywinhv.PUINT32_assign(obj, value)
PUINT32_assign = _pywinhv.PUINT32_assign

def PUINT32_value(obj):
    return _pywinhv.PUINT32_value(obj)
PUINT32_value = _pywinhv.PUINT32_value

def new_PUINT64():
    return _pywinhv.new_PUINT64()
new_PUINT64 = _pywinhv.new_PUINT64

def copy_PUINT64(value):
    return _pywinhv.copy_PUINT64(value)
copy_PUINT64 = _pywinhv.copy_PUINT64

def delete_PUINT64(obj):
    return _pywinhv.delete_PUINT64(obj)
delete_PUINT64 = _pywinhv.delete_PUINT64

def PUINT64_assign(obj, value):
    return _pywinhv.PUINT64_assign(obj, value)
PUINT64_assign = _pywinhv.PUINT64_assign

def PUINT64_value(obj):
    return _pywinhv.PUINT64_value(obj)
PUINT64_value = _pywinhv.PUINT64_value

def new_PWHV_PARTITION_HANDLE():
    return _pywinhv.new_PWHV_PARTITION_HANDLE()
new_PWHV_PARTITION_HANDLE = _pywinhv.new_PWHV_PARTITION_HANDLE

def copy_PWHV_PARTITION_HANDLE(value):
    return _pywinhv.copy_PWHV_PARTITION_HANDLE(value)
copy_PWHV_PARTITION_HANDLE = _pywinhv.copy_PWHV_PARTITION_HANDLE

def delete_PWHV_PARTITION_HANDLE(obj):
    return _pywinhv.delete_PWHV_PARTITION_HANDLE(obj)
delete_PWHV_PARTITION_HANDLE = _pywinhv.delete_PWHV_PARTITION_HANDLE

def PWHV_PARTITION_HANDLE_assign(obj, value):
    return _pywinhv.PWHV_PARTITION_HANDLE_assign(obj, value)
PWHV_PARTITION_HANDLE_assign = _pywinhv.PWHV_PARTITION_HANDLE_assign

def PWHV_PARTITION_HANDLE_value(obj):
    return _pywinhv.PWHV_PARTITION_HANDLE_value(obj)
PWHV_PARTITION_HANDLE_value = _pywinhv.PWHV_PARTITION_HANDLE_value
WINAPI_FAMILY_PC_APP = _pywinhv.WINAPI_FAMILY_PC_APP
WINAPI_FAMILY_PHONE_APP = _pywinhv.WINAPI_FAMILY_PHONE_APP
WINAPI_FAMILY_SYSTEM = _pywinhv.WINAPI_FAMILY_SYSTEM
WINAPI_FAMILY_SERVER = _pywinhv.WINAPI_FAMILY_SERVER
WINAPI_FAMILY_DESKTOP_APP = _pywinhv.WINAPI_FAMILY_DESKTOP_APP
WINAPI_FAMILY_APP = _pywinhv.WINAPI_FAMILY_APP
WINAPI_FAMILY = _pywinhv.WINAPI_FAMILY
WINAPI_PARTITION_DESKTOP = _pywinhv.WINAPI_PARTITION_DESKTOP
WINAPI_PARTITION_APP = _pywinhv.WINAPI_PARTITION_APP
WINAPI_PARTITION_PC_APP = _pywinhv.WINAPI_PARTITION_PC_APP
WINAPI_PARTITION_PHONE_APP = _pywinhv.WINAPI_PARTITION_PHONE_APP
WINAPI_PARTITION_SYSTEM = _pywinhv.WINAPI_PARTITION_SYSTEM
WINAPI_PARTITION_PHONE = _pywinhv.WINAPI_PARTITION_PHONE
WHvCapabilityCodeHypervisorPresent = _pywinhv.WHvCapabilityCodeHypervisorPresent
WHvCapabilityCodeFeatures = _pywinhv.WHvCapabilityCodeFeatures
WHvCapabilityCodeExtendedVmExits = _pywinhv.WHvCapabilityCodeExtendedVmExits
WHvCapabilityCodeExceptionExitBitmap = _pywinhv.WHvCapabilityCodeExceptionExitBitmap
WHvCapabilityCodeProcessorVendor = _pywinhv.WHvCapabilityCodeProcessorVendor
WHvCapabilityCodeProcessorFeatures = _pywinhv.WHvCapabilityCodeProcessorFeatures
WHvCapabilityCodeProcessorClFlushSize = _pywinhv.WHvCapabilityCodeProcessorClFlushSize
WHvCapabilityCodeProcessorXsaveFeatures = _pywinhv.WHvCapabilityCodeProcessorXsaveFeatures
class WHV_CAPABILITY_FEATURES(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WHV_CAPABILITY_FEATURES, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WHV_CAPABILITY_FEATURES, name)
    __repr__ = _swig_repr
    __swig_setmethods__["PartialUnmap"] = _pywinhv.WHV_CAPABILITY_FEATURES_PartialUnmap_set
    __swig_getmethods__["PartialUnmap"] = _pywinhv.WHV_CAPABILITY_FEATURES_PartialUnmap_get
    if _newclass:
        PartialUnmap = _swig_property(_pywinhv.WHV_CAPABILITY_FEATURES_PartialUnmap_get, _pywinhv.WHV_CAPABILITY_FEATURES_PartialUnmap_set)
    __swig_setmethods__["LocalApicEmulation"] = _pywinhv.WHV_CAPABILITY_FEATURES_LocalApicEmulation_set
    __swig_getmethods__["LocalApicEmulation"] = _pywinhv.WHV_CAPABILITY_FEATURES_LocalApicEmulation_get
    if _newclass:
        LocalApicEmulation = _swig_property(_pywinhv.WHV_CAPABILITY_FEATURES_LocalApicEmulation_get, _pywinhv.WHV_CAPABILITY_FEATURES_LocalApicEmulation_set)
    __swig_setmethods__["Xsave"] = _pywinhv.WHV_CAPABILITY_FEATURES_Xsave_set
    __swig_getmethods__["Xsave"] = _pywinhv.WHV_CAPABILITY_FEATURES_Xsave_get
    if _newclass:
        Xsave = _swig_property(_pywinhv.WHV_CAPABILITY_FEATURES_Xsave_get, _pywinhv.WHV_CAPABILITY_FEATURES_Xsave_set)
    __swig_setmethods__["DirtyPageTracking"] = _pywinhv.WHV_CAPABILITY_FEATURES_DirtyPageTracking_set
    __swig_getmethods__["DirtyPageTracking"] = _pywinhv.WHV_CAPABILITY_FEATURES_DirtyPageTracking_get
    if _newclass:
        DirtyPageTracking = _swig_property(_pywinhv.WHV_CAPABILITY_FEATURES_DirtyPageTracking_get, _pywinhv.WHV_CAPABILITY_FEATURES_DirtyPageTracking_set)
    __swig_setmethods__["SpeculationControl"] = _pywinhv.WHV_CAPABILITY_FEATURES_SpeculationControl_set
    __swig_getmethods__["SpeculationControl"] = _pywinhv.WHV_CAPABILITY_FEATURES_SpeculationControl_get
    if _newclass:
        SpeculationControl = _swig_property(_pywinhv.WHV_CAPABILITY_FEATURES_SpeculationControl_get, _pywinhv.WHV_CAPABILITY_FEATURES_SpeculationControl_set)
    __swig_setmethods__["Reserved"] = _pywinhv.WHV_CAPABILITY_FEATURES_Reserved_set
    __swig_getmethods__["Reserved"] = _pywinhv.WHV_CAPABILITY_FEATURES_Reserved_get
    if _newclass:
        Reserved = _swig_property(_pywinhv.WHV_CAPABILITY_FEATURES_Reserved_get, _pywinhv.WHV_CAPABILITY_FEATURES_Reserved_set)
    __swig_setmethods__["AsUINT64"] = _pywinhv.WHV_CAPABILITY_FEATURES_AsUINT64_set
    __swig_getmethods__["AsUINT64"] = _pywinhv.WHV_CAPABILITY_FEATURES_AsUINT64_get
    if _newclass:
        AsUINT64 = _swig_property(_pywinhv.WHV_CAPABILITY_FEATURES_AsUINT64_get, _pywinhv.WHV_CAPABILITY_FEATURES_AsUINT64_set)

    def __init__(self):
        this = _pywinhv.new_WHV_CAPABILITY_FEATURES()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywinhv.delete_WHV_CAPABILITY_FEATURES
    __del__ = lambda self: None
WHV_CAPABILITY_FEATURES_swigregister = _pywinhv.WHV_CAPABILITY_FEATURES_swigregister
WHV_CAPABILITY_FEATURES_swigregister(WHV_CAPABILITY_FEATURES)

class WHV_EXTENDED_VM_EXITS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WHV_EXTENDED_VM_EXITS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WHV_EXTENDED_VM_EXITS, name)
    __repr__ = _swig_repr
    __swig_setmethods__["X64CpuidExit"] = _pywinhv.WHV_EXTENDED_VM_EXITS_X64CpuidExit_set
    __swig_getmethods__["X64CpuidExit"] = _pywinhv.WHV_EXTENDED_VM_EXITS_X64CpuidExit_get
    if _newclass:
        X64CpuidExit = _swig_property(_pywinhv.WHV_EXTENDED_VM_EXITS_X64CpuidExit_get, _pywinhv.WHV_EXTENDED_VM_EXITS_X64CpuidExit_set)
    __swig_setmethods__["X64MsrExit"] = _pywinhv.WHV_EXTENDED_VM_EXITS_X64MsrExit_set
    __swig_getmethods__["X64MsrExit"] = _pywinhv.WHV_EXTENDED_VM_EXITS_X64MsrExit_get
    if _newclass:
        X64MsrExit = _swig_property(_pywinhv.WHV_EXTENDED_VM_EXITS_X64MsrExit_get, _pywinhv.WHV_EXTENDED_VM_EXITS_X64MsrExit_set)
    __swig_setmethods__["ExceptionExit"] = _pywinhv.WHV_EXTENDED_VM_EXITS_ExceptionExit_set
    __swig_getmethods__["ExceptionExit"] = _pywinhv.WHV_EXTENDED_VM_EXITS_ExceptionExit_get
    if _newclass:
        ExceptionExit = _swig_property(_pywinhv.WHV_EXTENDED_VM_EXITS_ExceptionExit_get, _pywinhv.WHV_EXTENDED_VM_EXITS_ExceptionExit_set)
    __swig_setmethods__["Reserved"] = _pywinhv.WHV_EXTENDED_VM_EXITS_Reserved_set
    __swig_getmethods__["Reserved"] = _pywinhv.WHV_EXTENDED_VM_EXITS_Reserved_get
    if _newclass:
        Reserved = _swig_property(_pywinhv.WHV_EXTENDED_VM_EXITS_Reserved_get, _pywinhv.WHV_EXTENDED_VM_EXITS_Reserved_set)
    __swig_setmethods__["AsUINT64"] = _pywinhv.WHV_EXTENDED_VM_EXITS_AsUINT64_set
    __swig_getmethods__["AsUINT64"] = _pywinhv.WHV_EXTENDED_VM_EXITS_AsUINT64_get
    if _newclass:
        AsUINT64 = _swig_property(_pywinhv.WHV_EXTENDED_VM_EXITS_AsUINT64_get, _pywinhv.WHV_EXTENDED_VM_EXITS_AsUINT64_set)

    def __init__(self):
        this = _pywinhv.new_WHV_EXTENDED_VM_EXITS()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywinhv.delete_WHV_EXTENDED_VM_EXITS
    __del__ = lambda self: None
WHV_EXTENDED_VM_EXITS_swigregister = _pywinhv.WHV_EXTENDED_VM_EXITS_swigregister
WHV_EXTENDED_VM_EXITS_swigregister(WHV_EXTENDED_VM_EXITS)

WHvProcessorVendorAmd = _pywinhv.WHvProcessorVendorAmd
WHvProcessorVendorIntel = _pywinhv.WHvProcessorVendorIntel
WHvProcessorVendorHygon = _pywinhv.WHvProcessorVendorHygon
class WHV_PROCESSOR_FEATURES(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WHV_PROCESSOR_FEATURES, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WHV_PROCESSOR_FEATURES, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Sse3Support"] = _pywinhv.WHV_PROCESSOR_FEATURES_Sse3Support_set
    __swig_getmethods__["Sse3Support"] = _pywinhv.WHV_PROCESSOR_FEATURES_Sse3Support_get
    if _newclass:
        Sse3Support = _swig_property(_pywinhv.WHV_PROCESSOR_FEATURES_Sse3Support_get, _pywinhv.WHV_PROCESSOR_FEATURES_Sse3Support_set)
    __swig_setmethods__["LahfSahfSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_LahfSahfSupport_set
    __swig_getmethods__["LahfSahfSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_LahfSahfSupport_get
    if _newclass:
        LahfSahfSupport = _swig_property(_pywinhv.WHV_PROCESSOR_FEATURES_LahfSahfSupport_get, _pywinhv.WHV_PROCESSOR_FEATURES_LahfSahfSupport_set)
    __swig_setmethods__["Ssse3Support"] = _pywinhv.WHV_PROCESSOR_FEATURES_Ssse3Support_set
    __swig_getmethods__["Ssse3Support"] = _pywinhv.WHV_PROCESSOR_FEATURES_Ssse3Support_get
    if _newclass:
        Ssse3Support = _swig_property(_pywinhv.WHV_PROCESSOR_FEATURES_Ssse3Support_get, _pywinhv.WHV_PROCESSOR_FEATURES_Ssse3Support_set)
    __swig_setmethods__["Sse4_1Support"] = _pywinhv.WHV_PROCESSOR_FEATURES_Sse4_1Support_set
    __swig_getmethods__["Sse4_1Support"] = _pywinhv.WHV_PROCESSOR_FEATURES_Sse4_1Support_get
    if _newclass:
        Sse4_1Support = _swig_property(_pywinhv.WHV_PROCESSOR_FEATURES_Sse4_1Support_get, _pywinhv.WHV_PROCESSOR_FEATURES_Sse4_1Support_set)
    __swig_setmethods__["Sse4_2Support"] = _pywinhv.WHV_PROCESSOR_FEATURES_Sse4_2Support_set
    __swig_getmethods__["Sse4_2Support"] = _pywinhv.WHV_PROCESSOR_FEATURES_Sse4_2Support_get
    if _newclass:
        Sse4_2Support = _swig_property(_pywinhv.WHV_PROCESSOR_FEATURES_Sse4_2Support_get, _pywinhv.WHV_PROCESSOR_FEATURES_Sse4_2Support_set)
    __swig_setmethods__["Sse4aSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_Sse4aSupport_set
    __swig_getmethods__["Sse4aSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_Sse4aSupport_get
    if _newclass:
        Sse4aSupport = _swig_property(_pywinhv.WHV_PROCESSOR_FEATURES_Sse4aSupport_get, _pywinhv.WHV_PROCESSOR_FEATURES_Sse4aSupport_set)
    __swig_setmethods__["XopSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_XopSupport_set
    __swig_getmethods__["XopSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_XopSupport_get
    if _newclass:
        XopSupport = _swig_property(_pywinhv.WHV_PROCESSOR_FEATURES_XopSupport_get, _pywinhv.WHV_PROCESSOR_FEATURES_XopSupport_set)
    __swig_setmethods__["PopCntSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_PopCntSupport_set
    __swig_getmethods__["PopCntSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_PopCntSupport_get
    if _newclass:
        PopCntSupport = _swig_property(_pywinhv.WHV_PROCESSOR_FEATURES_PopCntSupport_get, _pywinhv.WHV_PROCESSOR_FEATURES_PopCntSupport_set)
    __swig_setmethods__["Cmpxchg16bSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_Cmpxchg16bSupport_set
    __swig_getmethods__["Cmpxchg16bSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_Cmpxchg16bSupport_get
    if _newclass:
        Cmpxchg16bSupport = _swig_property(_pywinhv.WHV_PROCESSOR_FEATURES_Cmpxchg16bSupport_get, _pywinhv.WHV_PROCESSOR_FEATURES_Cmpxchg16bSupport_set)
    __swig_setmethods__["Altmovcr8Support"] = _pywinhv.WHV_PROCESSOR_FEATURES_Altmovcr8Support_set
    __swig_getmethods__["Altmovcr8Support"] = _pywinhv.WHV_PROCESSOR_FEATURES_Altmovcr8Support_get
    if _newclass:
        Altmovcr8Support = _swig_property(_pywinhv.WHV_PROCESSOR_FEATURES_Altmovcr8Support_get, _pywinhv.WHV_PROCESSOR_FEATURES_Altmovcr8Support_set)
    __swig_setmethods__["LzcntSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_LzcntSupport_set
    __swig_getmethods__["LzcntSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_LzcntSupport_get
    if _newclass:
        LzcntSupport = _swig_property(_pywinhv.WHV_PROCESSOR_FEATURES_LzcntSupport_get, _pywinhv.WHV_PROCESSOR_FEATURES_LzcntSupport_set)
    __swig_setmethods__["MisAlignSseSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_MisAlignSseSupport_set
    __swig_getmethods__["MisAlignSseSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_MisAlignSseSupport_get
    if _newclass:
        MisAlignSseSupport = _swig_property(_pywinhv.WHV_PROCESSOR_FEATURES_MisAlignSseSupport_get, _pywinhv.WHV_PROCESSOR_FEATURES_MisAlignSseSupport_set)
    __swig_setmethods__["MmxExtSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_MmxExtSupport_set
    __swig_getmethods__["MmxExtSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_MmxExtSupport_get
    if _newclass:
        MmxExtSupport = _swig_property(_pywinhv.WHV_PROCESSOR_FEATURES_MmxExtSupport_get, _pywinhv.WHV_PROCESSOR_FEATURES_MmxExtSupport_set)
    __swig_setmethods__["Amd3DNowSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_Amd3DNowSupport_set
    __swig_getmethods__["Amd3DNowSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_Amd3DNowSupport_get
    if _newclass:
        Amd3DNowSupport = _swig_property(_pywinhv.WHV_PROCESSOR_FEATURES_Amd3DNowSupport_get, _pywinhv.WHV_PROCESSOR_FEATURES_Amd3DNowSupport_set)
    __swig_setmethods__["ExtendedAmd3DNowSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_ExtendedAmd3DNowSupport_set
    __swig_getmethods__["ExtendedAmd3DNowSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_ExtendedAmd3DNowSupport_get
    if _newclass:
        ExtendedAmd3DNowSupport = _swig_property(_pywinhv.WHV_PROCESSOR_FEATURES_ExtendedAmd3DNowSupport_get, _pywinhv.WHV_PROCESSOR_FEATURES_ExtendedAmd3DNowSupport_set)
    __swig_setmethods__["Page1GbSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_Page1GbSupport_set
    __swig_getmethods__["Page1GbSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_Page1GbSupport_get
    if _newclass:
        Page1GbSupport = _swig_property(_pywinhv.WHV_PROCESSOR_FEATURES_Page1GbSupport_get, _pywinhv.WHV_PROCESSOR_FEATURES_Page1GbSupport_set)
    __swig_setmethods__["AesSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_AesSupport_set
    __swig_getmethods__["AesSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_AesSupport_get
    if _newclass:
        AesSupport = _swig_property(_pywinhv.WHV_PROCESSOR_FEATURES_AesSupport_get, _pywinhv.WHV_PROCESSOR_FEATURES_AesSupport_set)
    __swig_setmethods__["PclmulqdqSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_PclmulqdqSupport_set
    __swig_getmethods__["PclmulqdqSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_PclmulqdqSupport_get
    if _newclass:
        PclmulqdqSupport = _swig_property(_pywinhv.WHV_PROCESSOR_FEATURES_PclmulqdqSupport_get, _pywinhv.WHV_PROCESSOR_FEATURES_PclmulqdqSupport_set)
    __swig_setmethods__["PcidSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_PcidSupport_set
    __swig_getmethods__["PcidSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_PcidSupport_get
    if _newclass:
        PcidSupport = _swig_property(_pywinhv.WHV_PROCESSOR_FEATURES_PcidSupport_get, _pywinhv.WHV_PROCESSOR_FEATURES_PcidSupport_set)
    __swig_setmethods__["Fma4Support"] = _pywinhv.WHV_PROCESSOR_FEATURES_Fma4Support_set
    __swig_getmethods__["Fma4Support"] = _pywinhv.WHV_PROCESSOR_FEATURES_Fma4Support_get
    if _newclass:
        Fma4Support = _swig_property(_pywinhv.WHV_PROCESSOR_FEATURES_Fma4Support_get, _pywinhv.WHV_PROCESSOR_FEATURES_Fma4Support_set)
    __swig_setmethods__["F16CSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_F16CSupport_set
    __swig_getmethods__["F16CSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_F16CSupport_get
    if _newclass:
        F16CSupport = _swig_property(_pywinhv.WHV_PROCESSOR_FEATURES_F16CSupport_get, _pywinhv.WHV_PROCESSOR_FEATURES_F16CSupport_set)
    __swig_setmethods__["RdRandSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_RdRandSupport_set
    __swig_getmethods__["RdRandSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_RdRandSupport_get
    if _newclass:
        RdRandSupport = _swig_property(_pywinhv.WHV_PROCESSOR_FEATURES_RdRandSupport_get, _pywinhv.WHV_PROCESSOR_FEATURES_RdRandSupport_set)
    __swig_setmethods__["RdWrFsGsSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_RdWrFsGsSupport_set
    __swig_getmethods__["RdWrFsGsSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_RdWrFsGsSupport_get
    if _newclass:
        RdWrFsGsSupport = _swig_property(_pywinhv.WHV_PROCESSOR_FEATURES_RdWrFsGsSupport_get, _pywinhv.WHV_PROCESSOR_FEATURES_RdWrFsGsSupport_set)
    __swig_setmethods__["SmepSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_SmepSupport_set
    __swig_getmethods__["SmepSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_SmepSupport_get
    if _newclass:
        SmepSupport = _swig_property(_pywinhv.WHV_PROCESSOR_FEATURES_SmepSupport_get, _pywinhv.WHV_PROCESSOR_FEATURES_SmepSupport_set)
    __swig_setmethods__["EnhancedFastStringSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_EnhancedFastStringSupport_set
    __swig_getmethods__["EnhancedFastStringSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_EnhancedFastStringSupport_get
    if _newclass:
        EnhancedFastStringSupport = _swig_property(_pywinhv.WHV_PROCESSOR_FEATURES_EnhancedFastStringSupport_get, _pywinhv.WHV_PROCESSOR_FEATURES_EnhancedFastStringSupport_set)
    __swig_setmethods__["Bmi1Support"] = _pywinhv.WHV_PROCESSOR_FEATURES_Bmi1Support_set
    __swig_getmethods__["Bmi1Support"] = _pywinhv.WHV_PROCESSOR_FEATURES_Bmi1Support_get
    if _newclass:
        Bmi1Support = _swig_property(_pywinhv.WHV_PROCESSOR_FEATURES_Bmi1Support_get, _pywinhv.WHV_PROCESSOR_FEATURES_Bmi1Support_set)
    __swig_setmethods__["Bmi2Support"] = _pywinhv.WHV_PROCESSOR_FEATURES_Bmi2Support_set
    __swig_getmethods__["Bmi2Support"] = _pywinhv.WHV_PROCESSOR_FEATURES_Bmi2Support_get
    if _newclass:
        Bmi2Support = _swig_property(_pywinhv.WHV_PROCESSOR_FEATURES_Bmi2Support_get, _pywinhv.WHV_PROCESSOR_FEATURES_Bmi2Support_set)
    __swig_setmethods__["Reserved1"] = _pywinhv.WHV_PROCESSOR_FEATURES_Reserved1_set
    __swig_getmethods__["Reserved1"] = _pywinhv.WHV_PROCESSOR_FEATURES_Reserved1_get
    if _newclass:
        Reserved1 = _swig_property(_pywinhv.WHV_PROCESSOR_FEATURES_Reserved1_get, _pywinhv.WHV_PROCESSOR_FEATURES_Reserved1_set)
    __swig_setmethods__["MovbeSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_MovbeSupport_set
    __swig_getmethods__["MovbeSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_MovbeSupport_get
    if _newclass:
        MovbeSupport = _swig_property(_pywinhv.WHV_PROCESSOR_FEATURES_MovbeSupport_get, _pywinhv.WHV_PROCESSOR_FEATURES_MovbeSupport_set)
    __swig_setmethods__["Npiep1Support"] = _pywinhv.WHV_PROCESSOR_FEATURES_Npiep1Support_set
    __swig_getmethods__["Npiep1Support"] = _pywinhv.WHV_PROCESSOR_FEATURES_Npiep1Support_get
    if _newclass:
        Npiep1Support = _swig_property(_pywinhv.WHV_PROCESSOR_FEATURES_Npiep1Support_get, _pywinhv.WHV_PROCESSOR_FEATURES_Npiep1Support_set)
    __swig_setmethods__["DepX87FPUSaveSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_DepX87FPUSaveSupport_set
    __swig_getmethods__["DepX87FPUSaveSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_DepX87FPUSaveSupport_get
    if _newclass:
        DepX87FPUSaveSupport = _swig_property(_pywinhv.WHV_PROCESSOR_FEATURES_DepX87FPUSaveSupport_get, _pywinhv.WHV_PROCESSOR_FEATURES_DepX87FPUSaveSupport_set)
    __swig_setmethods__["RdSeedSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_RdSeedSupport_set
    __swig_getmethods__["RdSeedSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_RdSeedSupport_get
    if _newclass:
        RdSeedSupport = _swig_property(_pywinhv.WHV_PROCESSOR_FEATURES_RdSeedSupport_get, _pywinhv.WHV_PROCESSOR_FEATURES_RdSeedSupport_set)
    __swig_setmethods__["AdxSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_AdxSupport_set
    __swig_getmethods__["AdxSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_AdxSupport_get
    if _newclass:
        AdxSupport = _swig_property(_pywinhv.WHV_PROCESSOR_FEATURES_AdxSupport_get, _pywinhv.WHV_PROCESSOR_FEATURES_AdxSupport_set)
    __swig_setmethods__["IntelPrefetchSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_IntelPrefetchSupport_set
    __swig_getmethods__["IntelPrefetchSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_IntelPrefetchSupport_get
    if _newclass:
        IntelPrefetchSupport = _swig_property(_pywinhv.WHV_PROCESSOR_FEATURES_IntelPrefetchSupport_get, _pywinhv.WHV_PROCESSOR_FEATURES_IntelPrefetchSupport_set)
    __swig_setmethods__["SmapSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_SmapSupport_set
    __swig_getmethods__["SmapSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_SmapSupport_get
    if _newclass:
        SmapSupport = _swig_property(_pywinhv.WHV_PROCESSOR_FEATURES_SmapSupport_get, _pywinhv.WHV_PROCESSOR_FEATURES_SmapSupport_set)
    __swig_setmethods__["HleSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_HleSupport_set
    __swig_getmethods__["HleSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_HleSupport_get
    if _newclass:
        HleSupport = _swig_property(_pywinhv.WHV_PROCESSOR_FEATURES_HleSupport_get, _pywinhv.WHV_PROCESSOR_FEATURES_HleSupport_set)
    __swig_setmethods__["RtmSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_RtmSupport_set
    __swig_getmethods__["RtmSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_RtmSupport_get
    if _newclass:
        RtmSupport = _swig_property(_pywinhv.WHV_PROCESSOR_FEATURES_RtmSupport_get, _pywinhv.WHV_PROCESSOR_FEATURES_RtmSupport_set)
    __swig_setmethods__["RdtscpSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_RdtscpSupport_set
    __swig_getmethods__["RdtscpSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_RdtscpSupport_get
    if _newclass:
        RdtscpSupport = _swig_property(_pywinhv.WHV_PROCESSOR_FEATURES_RdtscpSupport_get, _pywinhv.WHV_PROCESSOR_FEATURES_RdtscpSupport_set)
    __swig_setmethods__["ClflushoptSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_ClflushoptSupport_set
    __swig_getmethods__["ClflushoptSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_ClflushoptSupport_get
    if _newclass:
        ClflushoptSupport = _swig_property(_pywinhv.WHV_PROCESSOR_FEATURES_ClflushoptSupport_get, _pywinhv.WHV_PROCESSOR_FEATURES_ClflushoptSupport_set)
    __swig_setmethods__["ClwbSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_ClwbSupport_set
    __swig_getmethods__["ClwbSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_ClwbSupport_get
    if _newclass:
        ClwbSupport = _swig_property(_pywinhv.WHV_PROCESSOR_FEATURES_ClwbSupport_get, _pywinhv.WHV_PROCESSOR_FEATURES_ClwbSupport_set)
    __swig_setmethods__["ShaSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_ShaSupport_set
    __swig_getmethods__["ShaSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_ShaSupport_get
    if _newclass:
        ShaSupport = _swig_property(_pywinhv.WHV_PROCESSOR_FEATURES_ShaSupport_get, _pywinhv.WHV_PROCESSOR_FEATURES_ShaSupport_set)
    __swig_setmethods__["X87PointersSavedSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_X87PointersSavedSupport_set
    __swig_getmethods__["X87PointersSavedSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_X87PointersSavedSupport_get
    if _newclass:
        X87PointersSavedSupport = _swig_property(_pywinhv.WHV_PROCESSOR_FEATURES_X87PointersSavedSupport_get, _pywinhv.WHV_PROCESSOR_FEATURES_X87PointersSavedSupport_set)
    __swig_setmethods__["InvpcidSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_InvpcidSupport_set
    __swig_getmethods__["InvpcidSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_InvpcidSupport_get
    if _newclass:
        InvpcidSupport = _swig_property(_pywinhv.WHV_PROCESSOR_FEATURES_InvpcidSupport_get, _pywinhv.WHV_PROCESSOR_FEATURES_InvpcidSupport_set)
    __swig_setmethods__["IbrsSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_IbrsSupport_set
    __swig_getmethods__["IbrsSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_IbrsSupport_get
    if _newclass:
        IbrsSupport = _swig_property(_pywinhv.WHV_PROCESSOR_FEATURES_IbrsSupport_get, _pywinhv.WHV_PROCESSOR_FEATURES_IbrsSupport_set)
    __swig_setmethods__["StibpSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_StibpSupport_set
    __swig_getmethods__["StibpSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_StibpSupport_get
    if _newclass:
        StibpSupport = _swig_property(_pywinhv.WHV_PROCESSOR_FEATURES_StibpSupport_get, _pywinhv.WHV_PROCESSOR_FEATURES_StibpSupport_set)
    __swig_setmethods__["IbpbSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_IbpbSupport_set
    __swig_getmethods__["IbpbSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_IbpbSupport_get
    if _newclass:
        IbpbSupport = _swig_property(_pywinhv.WHV_PROCESSOR_FEATURES_IbpbSupport_get, _pywinhv.WHV_PROCESSOR_FEATURES_IbpbSupport_set)
    __swig_setmethods__["Reserved2"] = _pywinhv.WHV_PROCESSOR_FEATURES_Reserved2_set
    __swig_getmethods__["Reserved2"] = _pywinhv.WHV_PROCESSOR_FEATURES_Reserved2_get
    if _newclass:
        Reserved2 = _swig_property(_pywinhv.WHV_PROCESSOR_FEATURES_Reserved2_get, _pywinhv.WHV_PROCESSOR_FEATURES_Reserved2_set)
    __swig_setmethods__["SsbdSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_SsbdSupport_set
    __swig_getmethods__["SsbdSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_SsbdSupport_get
    if _newclass:
        SsbdSupport = _swig_property(_pywinhv.WHV_PROCESSOR_FEATURES_SsbdSupport_get, _pywinhv.WHV_PROCESSOR_FEATURES_SsbdSupport_set)
    __swig_setmethods__["FastShortRepMovSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_FastShortRepMovSupport_set
    __swig_getmethods__["FastShortRepMovSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_FastShortRepMovSupport_get
    if _newclass:
        FastShortRepMovSupport = _swig_property(_pywinhv.WHV_PROCESSOR_FEATURES_FastShortRepMovSupport_get, _pywinhv.WHV_PROCESSOR_FEATURES_FastShortRepMovSupport_set)
    __swig_setmethods__["Reserved3"] = _pywinhv.WHV_PROCESSOR_FEATURES_Reserved3_set
    __swig_getmethods__["Reserved3"] = _pywinhv.WHV_PROCESSOR_FEATURES_Reserved3_get
    if _newclass:
        Reserved3 = _swig_property(_pywinhv.WHV_PROCESSOR_FEATURES_Reserved3_get, _pywinhv.WHV_PROCESSOR_FEATURES_Reserved3_set)
    __swig_setmethods__["RdclNo"] = _pywinhv.WHV_PROCESSOR_FEATURES_RdclNo_set
    __swig_getmethods__["RdclNo"] = _pywinhv.WHV_PROCESSOR_FEATURES_RdclNo_get
    if _newclass:
        RdclNo = _swig_property(_pywinhv.WHV_PROCESSOR_FEATURES_RdclNo_get, _pywinhv.WHV_PROCESSOR_FEATURES_RdclNo_set)
    __swig_setmethods__["IbrsAllSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_IbrsAllSupport_set
    __swig_getmethods__["IbrsAllSupport"] = _pywinhv.WHV_PROCESSOR_FEATURES_IbrsAllSupport_get
    if _newclass:
        IbrsAllSupport = _swig_property(_pywinhv.WHV_PROCESSOR_FEATURES_IbrsAllSupport_get, _pywinhv.WHV_PROCESSOR_FEATURES_IbrsAllSupport_set)
    __swig_setmethods__["Reserved4"] = _pywinhv.WHV_PROCESSOR_FEATURES_Reserved4_set
    __swig_getmethods__["Reserved4"] = _pywinhv.WHV_PROCESSOR_FEATURES_Reserved4_get
    if _newclass:
        Reserved4 = _swig_property(_pywinhv.WHV_PROCESSOR_FEATURES_Reserved4_get, _pywinhv.WHV_PROCESSOR_FEATURES_Reserved4_set)
    __swig_setmethods__["SsbNo"] = _pywinhv.WHV_PROCESSOR_FEATURES_SsbNo_set
    __swig_getmethods__["SsbNo"] = _pywinhv.WHV_PROCESSOR_FEATURES_SsbNo_get
    if _newclass:
        SsbNo = _swig_property(_pywinhv.WHV_PROCESSOR_FEATURES_SsbNo_get, _pywinhv.WHV_PROCESSOR_FEATURES_SsbNo_set)
    __swig_setmethods__["RsbANo"] = _pywinhv.WHV_PROCESSOR_FEATURES_RsbANo_set
    __swig_getmethods__["RsbANo"] = _pywinhv.WHV_PROCESSOR_FEATURES_RsbANo_get
    if _newclass:
        RsbANo = _swig_property(_pywinhv.WHV_PROCESSOR_FEATURES_RsbANo_get, _pywinhv.WHV_PROCESSOR_FEATURES_RsbANo_set)
    __swig_setmethods__["Reserved5"] = _pywinhv.WHV_PROCESSOR_FEATURES_Reserved5_set
    __swig_getmethods__["Reserved5"] = _pywinhv.WHV_PROCESSOR_FEATURES_Reserved5_get
    if _newclass:
        Reserved5 = _swig_property(_pywinhv.WHV_PROCESSOR_FEATURES_Reserved5_get, _pywinhv.WHV_PROCESSOR_FEATURES_Reserved5_set)
    __swig_setmethods__["AsUINT64"] = _pywinhv.WHV_PROCESSOR_FEATURES_AsUINT64_set
    __swig_getmethods__["AsUINT64"] = _pywinhv.WHV_PROCESSOR_FEATURES_AsUINT64_get
    if _newclass:
        AsUINT64 = _swig_property(_pywinhv.WHV_PROCESSOR_FEATURES_AsUINT64_get, _pywinhv.WHV_PROCESSOR_FEATURES_AsUINT64_set)

    def __init__(self):
        this = _pywinhv.new_WHV_PROCESSOR_FEATURES()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywinhv.delete_WHV_PROCESSOR_FEATURES
    __del__ = lambda self: None
WHV_PROCESSOR_FEATURES_swigregister = _pywinhv.WHV_PROCESSOR_FEATURES_swigregister
WHV_PROCESSOR_FEATURES_swigregister(WHV_PROCESSOR_FEATURES)

class WHV_PROCESSOR_XSAVE_FEATURES(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WHV_PROCESSOR_XSAVE_FEATURES, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WHV_PROCESSOR_XSAVE_FEATURES, name)
    __repr__ = _swig_repr
    __swig_setmethods__["XsaveSupport"] = _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_XsaveSupport_set
    __swig_getmethods__["XsaveSupport"] = _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_XsaveSupport_get
    if _newclass:
        XsaveSupport = _swig_property(_pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_XsaveSupport_get, _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_XsaveSupport_set)
    __swig_setmethods__["XsaveoptSupport"] = _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_XsaveoptSupport_set
    __swig_getmethods__["XsaveoptSupport"] = _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_XsaveoptSupport_get
    if _newclass:
        XsaveoptSupport = _swig_property(_pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_XsaveoptSupport_get, _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_XsaveoptSupport_set)
    __swig_setmethods__["AvxSupport"] = _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_AvxSupport_set
    __swig_getmethods__["AvxSupport"] = _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_AvxSupport_get
    if _newclass:
        AvxSupport = _swig_property(_pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_AvxSupport_get, _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_AvxSupport_set)
    __swig_setmethods__["Avx2Support"] = _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_Avx2Support_set
    __swig_getmethods__["Avx2Support"] = _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_Avx2Support_get
    if _newclass:
        Avx2Support = _swig_property(_pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_Avx2Support_get, _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_Avx2Support_set)
    __swig_setmethods__["FmaSupport"] = _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_FmaSupport_set
    __swig_getmethods__["FmaSupport"] = _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_FmaSupport_get
    if _newclass:
        FmaSupport = _swig_property(_pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_FmaSupport_get, _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_FmaSupport_set)
    __swig_setmethods__["MpxSupport"] = _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_MpxSupport_set
    __swig_getmethods__["MpxSupport"] = _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_MpxSupport_get
    if _newclass:
        MpxSupport = _swig_property(_pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_MpxSupport_get, _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_MpxSupport_set)
    __swig_setmethods__["Avx512Support"] = _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_Avx512Support_set
    __swig_getmethods__["Avx512Support"] = _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_Avx512Support_get
    if _newclass:
        Avx512Support = _swig_property(_pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_Avx512Support_get, _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_Avx512Support_set)
    __swig_setmethods__["Avx512DQSupport"] = _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_Avx512DQSupport_set
    __swig_getmethods__["Avx512DQSupport"] = _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_Avx512DQSupport_get
    if _newclass:
        Avx512DQSupport = _swig_property(_pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_Avx512DQSupport_get, _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_Avx512DQSupport_set)
    __swig_setmethods__["Avx512CDSupport"] = _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_Avx512CDSupport_set
    __swig_getmethods__["Avx512CDSupport"] = _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_Avx512CDSupport_get
    if _newclass:
        Avx512CDSupport = _swig_property(_pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_Avx512CDSupport_get, _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_Avx512CDSupport_set)
    __swig_setmethods__["Avx512BWSupport"] = _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_Avx512BWSupport_set
    __swig_getmethods__["Avx512BWSupport"] = _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_Avx512BWSupport_get
    if _newclass:
        Avx512BWSupport = _swig_property(_pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_Avx512BWSupport_get, _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_Avx512BWSupport_set)
    __swig_setmethods__["Avx512VLSupport"] = _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_Avx512VLSupport_set
    __swig_getmethods__["Avx512VLSupport"] = _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_Avx512VLSupport_get
    if _newclass:
        Avx512VLSupport = _swig_property(_pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_Avx512VLSupport_get, _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_Avx512VLSupport_set)
    __swig_setmethods__["XsaveCompSupport"] = _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_XsaveCompSupport_set
    __swig_getmethods__["XsaveCompSupport"] = _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_XsaveCompSupport_get
    if _newclass:
        XsaveCompSupport = _swig_property(_pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_XsaveCompSupport_get, _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_XsaveCompSupport_set)
    __swig_setmethods__["XsaveSupervisorSupport"] = _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_XsaveSupervisorSupport_set
    __swig_getmethods__["XsaveSupervisorSupport"] = _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_XsaveSupervisorSupport_get
    if _newclass:
        XsaveSupervisorSupport = _swig_property(_pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_XsaveSupervisorSupport_get, _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_XsaveSupervisorSupport_set)
    __swig_setmethods__["Xcr1Support"] = _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_Xcr1Support_set
    __swig_getmethods__["Xcr1Support"] = _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_Xcr1Support_get
    if _newclass:
        Xcr1Support = _swig_property(_pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_Xcr1Support_get, _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_Xcr1Support_set)
    __swig_setmethods__["Avx512BitalgSupport"] = _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_Avx512BitalgSupport_set
    __swig_getmethods__["Avx512BitalgSupport"] = _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_Avx512BitalgSupport_get
    if _newclass:
        Avx512BitalgSupport = _swig_property(_pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_Avx512BitalgSupport_get, _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_Avx512BitalgSupport_set)
    __swig_setmethods__["Avx512IfmaSupport"] = _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_Avx512IfmaSupport_set
    __swig_getmethods__["Avx512IfmaSupport"] = _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_Avx512IfmaSupport_get
    if _newclass:
        Avx512IfmaSupport = _swig_property(_pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_Avx512IfmaSupport_get, _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_Avx512IfmaSupport_set)
    __swig_setmethods__["Avx512VBmiSupport"] = _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_Avx512VBmiSupport_set
    __swig_getmethods__["Avx512VBmiSupport"] = _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_Avx512VBmiSupport_get
    if _newclass:
        Avx512VBmiSupport = _swig_property(_pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_Avx512VBmiSupport_get, _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_Avx512VBmiSupport_set)
    __swig_setmethods__["Avx512VBmi2Support"] = _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_Avx512VBmi2Support_set
    __swig_getmethods__["Avx512VBmi2Support"] = _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_Avx512VBmi2Support_get
    if _newclass:
        Avx512VBmi2Support = _swig_property(_pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_Avx512VBmi2Support_get, _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_Avx512VBmi2Support_set)
    __swig_setmethods__["Avx512VnniSupport"] = _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_Avx512VnniSupport_set
    __swig_getmethods__["Avx512VnniSupport"] = _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_Avx512VnniSupport_get
    if _newclass:
        Avx512VnniSupport = _swig_property(_pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_Avx512VnniSupport_get, _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_Avx512VnniSupport_set)
    __swig_setmethods__["GfniSupport"] = _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_GfniSupport_set
    __swig_getmethods__["GfniSupport"] = _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_GfniSupport_get
    if _newclass:
        GfniSupport = _swig_property(_pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_GfniSupport_get, _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_GfniSupport_set)
    __swig_setmethods__["VaesSupport"] = _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_VaesSupport_set
    __swig_getmethods__["VaesSupport"] = _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_VaesSupport_get
    if _newclass:
        VaesSupport = _swig_property(_pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_VaesSupport_get, _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_VaesSupport_set)
    __swig_setmethods__["Avx512VPopcntdqSupport"] = _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_Avx512VPopcntdqSupport_set
    __swig_getmethods__["Avx512VPopcntdqSupport"] = _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_Avx512VPopcntdqSupport_get
    if _newclass:
        Avx512VPopcntdqSupport = _swig_property(_pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_Avx512VPopcntdqSupport_get, _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_Avx512VPopcntdqSupport_set)
    __swig_setmethods__["VpclmulqdqSupport"] = _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_VpclmulqdqSupport_set
    __swig_getmethods__["VpclmulqdqSupport"] = _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_VpclmulqdqSupport_get
    if _newclass:
        VpclmulqdqSupport = _swig_property(_pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_VpclmulqdqSupport_get, _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_VpclmulqdqSupport_set)
    __swig_setmethods__["Reserved"] = _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_Reserved_set
    __swig_getmethods__["Reserved"] = _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_Reserved_get
    if _newclass:
        Reserved = _swig_property(_pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_Reserved_get, _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_Reserved_set)
    __swig_setmethods__["AsUINT64"] = _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_AsUINT64_set
    __swig_getmethods__["AsUINT64"] = _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_AsUINT64_get
    if _newclass:
        AsUINT64 = _swig_property(_pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_AsUINT64_get, _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_AsUINT64_set)

    def __init__(self):
        this = _pywinhv.new_WHV_PROCESSOR_XSAVE_FEATURES()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywinhv.delete_WHV_PROCESSOR_XSAVE_FEATURES
    __del__ = lambda self: None
WHV_PROCESSOR_XSAVE_FEATURES_swigregister = _pywinhv.WHV_PROCESSOR_XSAVE_FEATURES_swigregister
WHV_PROCESSOR_XSAVE_FEATURES_swigregister(WHV_PROCESSOR_XSAVE_FEATURES)

class WHV_CAPABILITY(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WHV_CAPABILITY, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WHV_CAPABILITY, name)
    __repr__ = _swig_repr
    __swig_setmethods__["HypervisorPresent"] = _pywinhv.WHV_CAPABILITY_HypervisorPresent_set
    __swig_getmethods__["HypervisorPresent"] = _pywinhv.WHV_CAPABILITY_HypervisorPresent_get
    if _newclass:
        HypervisorPresent = _swig_property(_pywinhv.WHV_CAPABILITY_HypervisorPresent_get, _pywinhv.WHV_CAPABILITY_HypervisorPresent_set)
    __swig_setmethods__["Features"] = _pywinhv.WHV_CAPABILITY_Features_set
    __swig_getmethods__["Features"] = _pywinhv.WHV_CAPABILITY_Features_get
    if _newclass:
        Features = _swig_property(_pywinhv.WHV_CAPABILITY_Features_get, _pywinhv.WHV_CAPABILITY_Features_set)
    __swig_setmethods__["ExtendedVmExits"] = _pywinhv.WHV_CAPABILITY_ExtendedVmExits_set
    __swig_getmethods__["ExtendedVmExits"] = _pywinhv.WHV_CAPABILITY_ExtendedVmExits_get
    if _newclass:
        ExtendedVmExits = _swig_property(_pywinhv.WHV_CAPABILITY_ExtendedVmExits_get, _pywinhv.WHV_CAPABILITY_ExtendedVmExits_set)
    __swig_setmethods__["ProcessorVendor"] = _pywinhv.WHV_CAPABILITY_ProcessorVendor_set
    __swig_getmethods__["ProcessorVendor"] = _pywinhv.WHV_CAPABILITY_ProcessorVendor_get
    if _newclass:
        ProcessorVendor = _swig_property(_pywinhv.WHV_CAPABILITY_ProcessorVendor_get, _pywinhv.WHV_CAPABILITY_ProcessorVendor_set)
    __swig_setmethods__["ProcessorFeatures"] = _pywinhv.WHV_CAPABILITY_ProcessorFeatures_set
    __swig_getmethods__["ProcessorFeatures"] = _pywinhv.WHV_CAPABILITY_ProcessorFeatures_get
    if _newclass:
        ProcessorFeatures = _swig_property(_pywinhv.WHV_CAPABILITY_ProcessorFeatures_get, _pywinhv.WHV_CAPABILITY_ProcessorFeatures_set)
    __swig_setmethods__["ProcessorXsaveFeatures"] = _pywinhv.WHV_CAPABILITY_ProcessorXsaveFeatures_set
    __swig_getmethods__["ProcessorXsaveFeatures"] = _pywinhv.WHV_CAPABILITY_ProcessorXsaveFeatures_get
    if _newclass:
        ProcessorXsaveFeatures = _swig_property(_pywinhv.WHV_CAPABILITY_ProcessorXsaveFeatures_get, _pywinhv.WHV_CAPABILITY_ProcessorXsaveFeatures_set)
    __swig_setmethods__["ProcessorClFlushSize"] = _pywinhv.WHV_CAPABILITY_ProcessorClFlushSize_set
    __swig_getmethods__["ProcessorClFlushSize"] = _pywinhv.WHV_CAPABILITY_ProcessorClFlushSize_get
    if _newclass:
        ProcessorClFlushSize = _swig_property(_pywinhv.WHV_CAPABILITY_ProcessorClFlushSize_get, _pywinhv.WHV_CAPABILITY_ProcessorClFlushSize_set)
    __swig_setmethods__["ExceptionExitBitmap"] = _pywinhv.WHV_CAPABILITY_ExceptionExitBitmap_set
    __swig_getmethods__["ExceptionExitBitmap"] = _pywinhv.WHV_CAPABILITY_ExceptionExitBitmap_get
    if _newclass:
        ExceptionExitBitmap = _swig_property(_pywinhv.WHV_CAPABILITY_ExceptionExitBitmap_get, _pywinhv.WHV_CAPABILITY_ExceptionExitBitmap_set)

    def __len__(self):
        return _pywinhv.WHV_CAPABILITY___len__(self)

    def __init__(self):
        this = _pywinhv.new_WHV_CAPABILITY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywinhv.delete_WHV_CAPABILITY
    __del__ = lambda self: None
WHV_CAPABILITY_swigregister = _pywinhv.WHV_CAPABILITY_swigregister
WHV_CAPABILITY_swigregister(WHV_CAPABILITY)

WHvPartitionPropertyCodeExtendedVmExits = _pywinhv.WHvPartitionPropertyCodeExtendedVmExits
WHvPartitionPropertyCodeExceptionExitBitmap = _pywinhv.WHvPartitionPropertyCodeExceptionExitBitmap
WHvPartitionPropertyCodeSeparateSecurityDomain = _pywinhv.WHvPartitionPropertyCodeSeparateSecurityDomain
WHvPartitionPropertyCodeProcessorFeatures = _pywinhv.WHvPartitionPropertyCodeProcessorFeatures
WHvPartitionPropertyCodeProcessorClFlushSize = _pywinhv.WHvPartitionPropertyCodeProcessorClFlushSize
WHvPartitionPropertyCodeCpuidExitList = _pywinhv.WHvPartitionPropertyCodeCpuidExitList
WHvPartitionPropertyCodeCpuidResultList = _pywinhv.WHvPartitionPropertyCodeCpuidResultList
WHvPartitionPropertyCodeLocalApicEmulationMode = _pywinhv.WHvPartitionPropertyCodeLocalApicEmulationMode
WHvPartitionPropertyCodeProcessorXsaveFeatures = _pywinhv.WHvPartitionPropertyCodeProcessorXsaveFeatures
WHvPartitionPropertyCodeProcessorCount = _pywinhv.WHvPartitionPropertyCodeProcessorCount
class WHV_X64_CPUID_RESULT(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WHV_X64_CPUID_RESULT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WHV_X64_CPUID_RESULT, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Function"] = _pywinhv.WHV_X64_CPUID_RESULT_Function_set
    __swig_getmethods__["Function"] = _pywinhv.WHV_X64_CPUID_RESULT_Function_get
    if _newclass:
        Function = _swig_property(_pywinhv.WHV_X64_CPUID_RESULT_Function_get, _pywinhv.WHV_X64_CPUID_RESULT_Function_set)
    __swig_setmethods__["Reserved"] = _pywinhv.WHV_X64_CPUID_RESULT_Reserved_set
    __swig_getmethods__["Reserved"] = _pywinhv.WHV_X64_CPUID_RESULT_Reserved_get
    if _newclass:
        Reserved = _swig_property(_pywinhv.WHV_X64_CPUID_RESULT_Reserved_get, _pywinhv.WHV_X64_CPUID_RESULT_Reserved_set)
    __swig_setmethods__["Eax"] = _pywinhv.WHV_X64_CPUID_RESULT_Eax_set
    __swig_getmethods__["Eax"] = _pywinhv.WHV_X64_CPUID_RESULT_Eax_get
    if _newclass:
        Eax = _swig_property(_pywinhv.WHV_X64_CPUID_RESULT_Eax_get, _pywinhv.WHV_X64_CPUID_RESULT_Eax_set)
    __swig_setmethods__["Ebx"] = _pywinhv.WHV_X64_CPUID_RESULT_Ebx_set
    __swig_getmethods__["Ebx"] = _pywinhv.WHV_X64_CPUID_RESULT_Ebx_get
    if _newclass:
        Ebx = _swig_property(_pywinhv.WHV_X64_CPUID_RESULT_Ebx_get, _pywinhv.WHV_X64_CPUID_RESULT_Ebx_set)
    __swig_setmethods__["Ecx"] = _pywinhv.WHV_X64_CPUID_RESULT_Ecx_set
    __swig_getmethods__["Ecx"] = _pywinhv.WHV_X64_CPUID_RESULT_Ecx_get
    if _newclass:
        Ecx = _swig_property(_pywinhv.WHV_X64_CPUID_RESULT_Ecx_get, _pywinhv.WHV_X64_CPUID_RESULT_Ecx_set)
    __swig_setmethods__["Edx"] = _pywinhv.WHV_X64_CPUID_RESULT_Edx_set
    __swig_getmethods__["Edx"] = _pywinhv.WHV_X64_CPUID_RESULT_Edx_get
    if _newclass:
        Edx = _swig_property(_pywinhv.WHV_X64_CPUID_RESULT_Edx_get, _pywinhv.WHV_X64_CPUID_RESULT_Edx_set)

    def __init__(self):
        this = _pywinhv.new_WHV_X64_CPUID_RESULT()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywinhv.delete_WHV_X64_CPUID_RESULT
    __del__ = lambda self: None
WHV_X64_CPUID_RESULT_swigregister = _pywinhv.WHV_X64_CPUID_RESULT_swigregister
WHV_X64_CPUID_RESULT_swigregister(WHV_X64_CPUID_RESULT)

WHvX64ExceptionTypeDivideErrorFault = _pywinhv.WHvX64ExceptionTypeDivideErrorFault
WHvX64ExceptionTypeDebugTrapOrFault = _pywinhv.WHvX64ExceptionTypeDebugTrapOrFault
WHvX64ExceptionTypeBreakpointTrap = _pywinhv.WHvX64ExceptionTypeBreakpointTrap
WHvX64ExceptionTypeOverflowTrap = _pywinhv.WHvX64ExceptionTypeOverflowTrap
WHvX64ExceptionTypeBoundRangeFault = _pywinhv.WHvX64ExceptionTypeBoundRangeFault
WHvX64ExceptionTypeInvalidOpcodeFault = _pywinhv.WHvX64ExceptionTypeInvalidOpcodeFault
WHvX64ExceptionTypeDeviceNotAvailableFault = _pywinhv.WHvX64ExceptionTypeDeviceNotAvailableFault
WHvX64ExceptionTypeDoubleFaultAbort = _pywinhv.WHvX64ExceptionTypeDoubleFaultAbort
WHvX64ExceptionTypeInvalidTaskStateSegmentFault = _pywinhv.WHvX64ExceptionTypeInvalidTaskStateSegmentFault
WHvX64ExceptionTypeSegmentNotPresentFault = _pywinhv.WHvX64ExceptionTypeSegmentNotPresentFault
WHvX64ExceptionTypeStackFault = _pywinhv.WHvX64ExceptionTypeStackFault
WHvX64ExceptionTypeGeneralProtectionFault = _pywinhv.WHvX64ExceptionTypeGeneralProtectionFault
WHvX64ExceptionTypePageFault = _pywinhv.WHvX64ExceptionTypePageFault
WHvX64ExceptionTypeFloatingPointErrorFault = _pywinhv.WHvX64ExceptionTypeFloatingPointErrorFault
WHvX64ExceptionTypeAlignmentCheckFault = _pywinhv.WHvX64ExceptionTypeAlignmentCheckFault
WHvX64ExceptionTypeMachineCheckAbort = _pywinhv.WHvX64ExceptionTypeMachineCheckAbort
WHvX64ExceptionTypeSimdFloatingPointFault = _pywinhv.WHvX64ExceptionTypeSimdFloatingPointFault
WHvX64LocalApicEmulationModeNone = _pywinhv.WHvX64LocalApicEmulationModeNone
WHvX64LocalApicEmulationModeXApic = _pywinhv.WHvX64LocalApicEmulationModeXApic
class WHV_PARTITION_PROPERTY(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WHV_PARTITION_PROPERTY, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WHV_PARTITION_PROPERTY, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ExtendedVmExits"] = _pywinhv.WHV_PARTITION_PROPERTY_ExtendedVmExits_set
    __swig_getmethods__["ExtendedVmExits"] = _pywinhv.WHV_PARTITION_PROPERTY_ExtendedVmExits_get
    if _newclass:
        ExtendedVmExits = _swig_property(_pywinhv.WHV_PARTITION_PROPERTY_ExtendedVmExits_get, _pywinhv.WHV_PARTITION_PROPERTY_ExtendedVmExits_set)
    __swig_setmethods__["ProcessorFeatures"] = _pywinhv.WHV_PARTITION_PROPERTY_ProcessorFeatures_set
    __swig_getmethods__["ProcessorFeatures"] = _pywinhv.WHV_PARTITION_PROPERTY_ProcessorFeatures_get
    if _newclass:
        ProcessorFeatures = _swig_property(_pywinhv.WHV_PARTITION_PROPERTY_ProcessorFeatures_get, _pywinhv.WHV_PARTITION_PROPERTY_ProcessorFeatures_set)
    __swig_setmethods__["ProcessorXsaveFeatures"] = _pywinhv.WHV_PARTITION_PROPERTY_ProcessorXsaveFeatures_set
    __swig_getmethods__["ProcessorXsaveFeatures"] = _pywinhv.WHV_PARTITION_PROPERTY_ProcessorXsaveFeatures_get
    if _newclass:
        ProcessorXsaveFeatures = _swig_property(_pywinhv.WHV_PARTITION_PROPERTY_ProcessorXsaveFeatures_get, _pywinhv.WHV_PARTITION_PROPERTY_ProcessorXsaveFeatures_set)
    __swig_setmethods__["ProcessorClFlushSize"] = _pywinhv.WHV_PARTITION_PROPERTY_ProcessorClFlushSize_set
    __swig_getmethods__["ProcessorClFlushSize"] = _pywinhv.WHV_PARTITION_PROPERTY_ProcessorClFlushSize_get
    if _newclass:
        ProcessorClFlushSize = _swig_property(_pywinhv.WHV_PARTITION_PROPERTY_ProcessorClFlushSize_get, _pywinhv.WHV_PARTITION_PROPERTY_ProcessorClFlushSize_set)
    __swig_setmethods__["ProcessorCount"] = _pywinhv.WHV_PARTITION_PROPERTY_ProcessorCount_set
    __swig_getmethods__["ProcessorCount"] = _pywinhv.WHV_PARTITION_PROPERTY_ProcessorCount_get
    if _newclass:
        ProcessorCount = _swig_property(_pywinhv.WHV_PARTITION_PROPERTY_ProcessorCount_get, _pywinhv.WHV_PARTITION_PROPERTY_ProcessorCount_set)
    __swig_setmethods__["CpuidExitList"] = _pywinhv.WHV_PARTITION_PROPERTY_CpuidExitList_set
    __swig_getmethods__["CpuidExitList"] = _pywinhv.WHV_PARTITION_PROPERTY_CpuidExitList_get
    if _newclass:
        CpuidExitList = _swig_property(_pywinhv.WHV_PARTITION_PROPERTY_CpuidExitList_get, _pywinhv.WHV_PARTITION_PROPERTY_CpuidExitList_set)
    __swig_setmethods__["CpuidResultList"] = _pywinhv.WHV_PARTITION_PROPERTY_CpuidResultList_set
    __swig_getmethods__["CpuidResultList"] = _pywinhv.WHV_PARTITION_PROPERTY_CpuidResultList_get
    if _newclass:
        CpuidResultList = _swig_property(_pywinhv.WHV_PARTITION_PROPERTY_CpuidResultList_get, _pywinhv.WHV_PARTITION_PROPERTY_CpuidResultList_set)
    __swig_setmethods__["ExceptionExitBitmap"] = _pywinhv.WHV_PARTITION_PROPERTY_ExceptionExitBitmap_set
    __swig_getmethods__["ExceptionExitBitmap"] = _pywinhv.WHV_PARTITION_PROPERTY_ExceptionExitBitmap_get
    if _newclass:
        ExceptionExitBitmap = _swig_property(_pywinhv.WHV_PARTITION_PROPERTY_ExceptionExitBitmap_get, _pywinhv.WHV_PARTITION_PROPERTY_ExceptionExitBitmap_set)
    __swig_setmethods__["LocalApicEmulationMode"] = _pywinhv.WHV_PARTITION_PROPERTY_LocalApicEmulationMode_set
    __swig_getmethods__["LocalApicEmulationMode"] = _pywinhv.WHV_PARTITION_PROPERTY_LocalApicEmulationMode_get
    if _newclass:
        LocalApicEmulationMode = _swig_property(_pywinhv.WHV_PARTITION_PROPERTY_LocalApicEmulationMode_get, _pywinhv.WHV_PARTITION_PROPERTY_LocalApicEmulationMode_set)
    __swig_setmethods__["SeparateSecurityDomain"] = _pywinhv.WHV_PARTITION_PROPERTY_SeparateSecurityDomain_set
    __swig_getmethods__["SeparateSecurityDomain"] = _pywinhv.WHV_PARTITION_PROPERTY_SeparateSecurityDomain_get
    if _newclass:
        SeparateSecurityDomain = _swig_property(_pywinhv.WHV_PARTITION_PROPERTY_SeparateSecurityDomain_get, _pywinhv.WHV_PARTITION_PROPERTY_SeparateSecurityDomain_set)

    def __len__(self):
        return _pywinhv.WHV_PARTITION_PROPERTY___len__(self)

    def __init__(self):
        this = _pywinhv.new_WHV_PARTITION_PROPERTY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywinhv.delete_WHV_PARTITION_PROPERTY
    __del__ = lambda self: None
WHV_PARTITION_PROPERTY_swigregister = _pywinhv.WHV_PARTITION_PROPERTY_swigregister
WHV_PARTITION_PROPERTY_swigregister(WHV_PARTITION_PROPERTY)

WHvMapGpaRangeFlagNone = _pywinhv.WHvMapGpaRangeFlagNone
WHvMapGpaRangeFlagRead = _pywinhv.WHvMapGpaRangeFlagRead
WHvMapGpaRangeFlagWrite = _pywinhv.WHvMapGpaRangeFlagWrite
WHvMapGpaRangeFlagExecute = _pywinhv.WHvMapGpaRangeFlagExecute
WHvMapGpaRangeFlagTrackDirtyPages = _pywinhv.WHvMapGpaRangeFlagTrackDirtyPages
WHvTranslateGvaFlagNone = _pywinhv.WHvTranslateGvaFlagNone
WHvTranslateGvaFlagValidateRead = _pywinhv.WHvTranslateGvaFlagValidateRead
WHvTranslateGvaFlagValidateWrite = _pywinhv.WHvTranslateGvaFlagValidateWrite
WHvTranslateGvaFlagValidateExecute = _pywinhv.WHvTranslateGvaFlagValidateExecute
WHvTranslateGvaFlagPrivilegeExempt = _pywinhv.WHvTranslateGvaFlagPrivilegeExempt
WHvTranslateGvaFlagSetPageTableBits = _pywinhv.WHvTranslateGvaFlagSetPageTableBits
WHvTranslateGvaResultSuccess = _pywinhv.WHvTranslateGvaResultSuccess
WHvTranslateGvaResultPageNotPresent = _pywinhv.WHvTranslateGvaResultPageNotPresent
WHvTranslateGvaResultPrivilegeViolation = _pywinhv.WHvTranslateGvaResultPrivilegeViolation
WHvTranslateGvaResultInvalidPageTableFlags = _pywinhv.WHvTranslateGvaResultInvalidPageTableFlags
WHvTranslateGvaResultGpaUnmapped = _pywinhv.WHvTranslateGvaResultGpaUnmapped
WHvTranslateGvaResultGpaNoReadAccess = _pywinhv.WHvTranslateGvaResultGpaNoReadAccess
WHvTranslateGvaResultGpaNoWriteAccess = _pywinhv.WHvTranslateGvaResultGpaNoWriteAccess
WHvTranslateGvaResultGpaIllegalOverlayAccess = _pywinhv.WHvTranslateGvaResultGpaIllegalOverlayAccess
WHvTranslateGvaResultIntercept = _pywinhv.WHvTranslateGvaResultIntercept
class WHV_TRANSLATE_GVA_RESULT(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WHV_TRANSLATE_GVA_RESULT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WHV_TRANSLATE_GVA_RESULT, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ResultCode"] = _pywinhv.WHV_TRANSLATE_GVA_RESULT_ResultCode_set
    __swig_getmethods__["ResultCode"] = _pywinhv.WHV_TRANSLATE_GVA_RESULT_ResultCode_get
    if _newclass:
        ResultCode = _swig_property(_pywinhv.WHV_TRANSLATE_GVA_RESULT_ResultCode_get, _pywinhv.WHV_TRANSLATE_GVA_RESULT_ResultCode_set)
    __swig_setmethods__["Reserved"] = _pywinhv.WHV_TRANSLATE_GVA_RESULT_Reserved_set
    __swig_getmethods__["Reserved"] = _pywinhv.WHV_TRANSLATE_GVA_RESULT_Reserved_get
    if _newclass:
        Reserved = _swig_property(_pywinhv.WHV_TRANSLATE_GVA_RESULT_Reserved_get, _pywinhv.WHV_TRANSLATE_GVA_RESULT_Reserved_set)

    def __init__(self):
        this = _pywinhv.new_WHV_TRANSLATE_GVA_RESULT()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywinhv.delete_WHV_TRANSLATE_GVA_RESULT
    __del__ = lambda self: None
WHV_TRANSLATE_GVA_RESULT_swigregister = _pywinhv.WHV_TRANSLATE_GVA_RESULT_swigregister
WHV_TRANSLATE_GVA_RESULT_swigregister(WHV_TRANSLATE_GVA_RESULT)

WHvX64RegisterRax = _pywinhv.WHvX64RegisterRax
WHvX64RegisterRcx = _pywinhv.WHvX64RegisterRcx
WHvX64RegisterRdx = _pywinhv.WHvX64RegisterRdx
WHvX64RegisterRbx = _pywinhv.WHvX64RegisterRbx
WHvX64RegisterRsp = _pywinhv.WHvX64RegisterRsp
WHvX64RegisterRbp = _pywinhv.WHvX64RegisterRbp
WHvX64RegisterRsi = _pywinhv.WHvX64RegisterRsi
WHvX64RegisterRdi = _pywinhv.WHvX64RegisterRdi
WHvX64RegisterR8 = _pywinhv.WHvX64RegisterR8
WHvX64RegisterR9 = _pywinhv.WHvX64RegisterR9
WHvX64RegisterR10 = _pywinhv.WHvX64RegisterR10
WHvX64RegisterR11 = _pywinhv.WHvX64RegisterR11
WHvX64RegisterR12 = _pywinhv.WHvX64RegisterR12
WHvX64RegisterR13 = _pywinhv.WHvX64RegisterR13
WHvX64RegisterR14 = _pywinhv.WHvX64RegisterR14
WHvX64RegisterR15 = _pywinhv.WHvX64RegisterR15
WHvX64RegisterRip = _pywinhv.WHvX64RegisterRip
WHvX64RegisterRflags = _pywinhv.WHvX64RegisterRflags
WHvX64RegisterEs = _pywinhv.WHvX64RegisterEs
WHvX64RegisterCs = _pywinhv.WHvX64RegisterCs
WHvX64RegisterSs = _pywinhv.WHvX64RegisterSs
WHvX64RegisterDs = _pywinhv.WHvX64RegisterDs
WHvX64RegisterFs = _pywinhv.WHvX64RegisterFs
WHvX64RegisterGs = _pywinhv.WHvX64RegisterGs
WHvX64RegisterLdtr = _pywinhv.WHvX64RegisterLdtr
WHvX64RegisterTr = _pywinhv.WHvX64RegisterTr
WHvX64RegisterIdtr = _pywinhv.WHvX64RegisterIdtr
WHvX64RegisterGdtr = _pywinhv.WHvX64RegisterGdtr
WHvX64RegisterCr0 = _pywinhv.WHvX64RegisterCr0
WHvX64RegisterCr2 = _pywinhv.WHvX64RegisterCr2
WHvX64RegisterCr3 = _pywinhv.WHvX64RegisterCr3
WHvX64RegisterCr4 = _pywinhv.WHvX64RegisterCr4
WHvX64RegisterCr8 = _pywinhv.WHvX64RegisterCr8
WHvX64RegisterDr0 = _pywinhv.WHvX64RegisterDr0
WHvX64RegisterDr1 = _pywinhv.WHvX64RegisterDr1
WHvX64RegisterDr2 = _pywinhv.WHvX64RegisterDr2
WHvX64RegisterDr3 = _pywinhv.WHvX64RegisterDr3
WHvX64RegisterDr6 = _pywinhv.WHvX64RegisterDr6
WHvX64RegisterDr7 = _pywinhv.WHvX64RegisterDr7
WHvX64RegisterXCr0 = _pywinhv.WHvX64RegisterXCr0
WHvX64RegisterXmm0 = _pywinhv.WHvX64RegisterXmm0
WHvX64RegisterXmm1 = _pywinhv.WHvX64RegisterXmm1
WHvX64RegisterXmm2 = _pywinhv.WHvX64RegisterXmm2
WHvX64RegisterXmm3 = _pywinhv.WHvX64RegisterXmm3
WHvX64RegisterXmm4 = _pywinhv.WHvX64RegisterXmm4
WHvX64RegisterXmm5 = _pywinhv.WHvX64RegisterXmm5
WHvX64RegisterXmm6 = _pywinhv.WHvX64RegisterXmm6
WHvX64RegisterXmm7 = _pywinhv.WHvX64RegisterXmm7
WHvX64RegisterXmm8 = _pywinhv.WHvX64RegisterXmm8
WHvX64RegisterXmm9 = _pywinhv.WHvX64RegisterXmm9
WHvX64RegisterXmm10 = _pywinhv.WHvX64RegisterXmm10
WHvX64RegisterXmm11 = _pywinhv.WHvX64RegisterXmm11
WHvX64RegisterXmm12 = _pywinhv.WHvX64RegisterXmm12
WHvX64RegisterXmm13 = _pywinhv.WHvX64RegisterXmm13
WHvX64RegisterXmm14 = _pywinhv.WHvX64RegisterXmm14
WHvX64RegisterXmm15 = _pywinhv.WHvX64RegisterXmm15
WHvX64RegisterFpMmx0 = _pywinhv.WHvX64RegisterFpMmx0
WHvX64RegisterFpMmx1 = _pywinhv.WHvX64RegisterFpMmx1
WHvX64RegisterFpMmx2 = _pywinhv.WHvX64RegisterFpMmx2
WHvX64RegisterFpMmx3 = _pywinhv.WHvX64RegisterFpMmx3
WHvX64RegisterFpMmx4 = _pywinhv.WHvX64RegisterFpMmx4
WHvX64RegisterFpMmx5 = _pywinhv.WHvX64RegisterFpMmx5
WHvX64RegisterFpMmx6 = _pywinhv.WHvX64RegisterFpMmx6
WHvX64RegisterFpMmx7 = _pywinhv.WHvX64RegisterFpMmx7
WHvX64RegisterFpControlStatus = _pywinhv.WHvX64RegisterFpControlStatus
WHvX64RegisterXmmControlStatus = _pywinhv.WHvX64RegisterXmmControlStatus
WHvX64RegisterTsc = _pywinhv.WHvX64RegisterTsc
WHvX64RegisterEfer = _pywinhv.WHvX64RegisterEfer
WHvX64RegisterKernelGsBase = _pywinhv.WHvX64RegisterKernelGsBase
WHvX64RegisterApicBase = _pywinhv.WHvX64RegisterApicBase
WHvX64RegisterPat = _pywinhv.WHvX64RegisterPat
WHvX64RegisterSysenterCs = _pywinhv.WHvX64RegisterSysenterCs
WHvX64RegisterSysenterEip = _pywinhv.WHvX64RegisterSysenterEip
WHvX64RegisterSysenterEsp = _pywinhv.WHvX64RegisterSysenterEsp
WHvX64RegisterStar = _pywinhv.WHvX64RegisterStar
WHvX64RegisterLstar = _pywinhv.WHvX64RegisterLstar
WHvX64RegisterCstar = _pywinhv.WHvX64RegisterCstar
WHvX64RegisterSfmask = _pywinhv.WHvX64RegisterSfmask
WHvX64RegisterMsrMtrrCap = _pywinhv.WHvX64RegisterMsrMtrrCap
WHvX64RegisterMsrMtrrDefType = _pywinhv.WHvX64RegisterMsrMtrrDefType
WHvX64RegisterMsrMtrrPhysBase0 = _pywinhv.WHvX64RegisterMsrMtrrPhysBase0
WHvX64RegisterMsrMtrrPhysBase1 = _pywinhv.WHvX64RegisterMsrMtrrPhysBase1
WHvX64RegisterMsrMtrrPhysBase2 = _pywinhv.WHvX64RegisterMsrMtrrPhysBase2
WHvX64RegisterMsrMtrrPhysBase3 = _pywinhv.WHvX64RegisterMsrMtrrPhysBase3
WHvX64RegisterMsrMtrrPhysBase4 = _pywinhv.WHvX64RegisterMsrMtrrPhysBase4
WHvX64RegisterMsrMtrrPhysBase5 = _pywinhv.WHvX64RegisterMsrMtrrPhysBase5
WHvX64RegisterMsrMtrrPhysBase6 = _pywinhv.WHvX64RegisterMsrMtrrPhysBase6
WHvX64RegisterMsrMtrrPhysBase7 = _pywinhv.WHvX64RegisterMsrMtrrPhysBase7
WHvX64RegisterMsrMtrrPhysBase8 = _pywinhv.WHvX64RegisterMsrMtrrPhysBase8
WHvX64RegisterMsrMtrrPhysBase9 = _pywinhv.WHvX64RegisterMsrMtrrPhysBase9
WHvX64RegisterMsrMtrrPhysBaseA = _pywinhv.WHvX64RegisterMsrMtrrPhysBaseA
WHvX64RegisterMsrMtrrPhysBaseB = _pywinhv.WHvX64RegisterMsrMtrrPhysBaseB
WHvX64RegisterMsrMtrrPhysBaseC = _pywinhv.WHvX64RegisterMsrMtrrPhysBaseC
WHvX64RegisterMsrMtrrPhysBaseD = _pywinhv.WHvX64RegisterMsrMtrrPhysBaseD
WHvX64RegisterMsrMtrrPhysBaseE = _pywinhv.WHvX64RegisterMsrMtrrPhysBaseE
WHvX64RegisterMsrMtrrPhysBaseF = _pywinhv.WHvX64RegisterMsrMtrrPhysBaseF
WHvX64RegisterMsrMtrrPhysMask0 = _pywinhv.WHvX64RegisterMsrMtrrPhysMask0
WHvX64RegisterMsrMtrrPhysMask1 = _pywinhv.WHvX64RegisterMsrMtrrPhysMask1
WHvX64RegisterMsrMtrrPhysMask2 = _pywinhv.WHvX64RegisterMsrMtrrPhysMask2
WHvX64RegisterMsrMtrrPhysMask3 = _pywinhv.WHvX64RegisterMsrMtrrPhysMask3
WHvX64RegisterMsrMtrrPhysMask4 = _pywinhv.WHvX64RegisterMsrMtrrPhysMask4
WHvX64RegisterMsrMtrrPhysMask5 = _pywinhv.WHvX64RegisterMsrMtrrPhysMask5
WHvX64RegisterMsrMtrrPhysMask6 = _pywinhv.WHvX64RegisterMsrMtrrPhysMask6
WHvX64RegisterMsrMtrrPhysMask7 = _pywinhv.WHvX64RegisterMsrMtrrPhysMask7
WHvX64RegisterMsrMtrrPhysMask8 = _pywinhv.WHvX64RegisterMsrMtrrPhysMask8
WHvX64RegisterMsrMtrrPhysMask9 = _pywinhv.WHvX64RegisterMsrMtrrPhysMask9
WHvX64RegisterMsrMtrrPhysMaskA = _pywinhv.WHvX64RegisterMsrMtrrPhysMaskA
WHvX64RegisterMsrMtrrPhysMaskB = _pywinhv.WHvX64RegisterMsrMtrrPhysMaskB
WHvX64RegisterMsrMtrrPhysMaskC = _pywinhv.WHvX64RegisterMsrMtrrPhysMaskC
WHvX64RegisterMsrMtrrPhysMaskD = _pywinhv.WHvX64RegisterMsrMtrrPhysMaskD
WHvX64RegisterMsrMtrrPhysMaskE = _pywinhv.WHvX64RegisterMsrMtrrPhysMaskE
WHvX64RegisterMsrMtrrPhysMaskF = _pywinhv.WHvX64RegisterMsrMtrrPhysMaskF
WHvX64RegisterMsrMtrrFix64k00000 = _pywinhv.WHvX64RegisterMsrMtrrFix64k00000
WHvX64RegisterMsrMtrrFix16k80000 = _pywinhv.WHvX64RegisterMsrMtrrFix16k80000
WHvX64RegisterMsrMtrrFix16kA0000 = _pywinhv.WHvX64RegisterMsrMtrrFix16kA0000
WHvX64RegisterMsrMtrrFix4kC0000 = _pywinhv.WHvX64RegisterMsrMtrrFix4kC0000
WHvX64RegisterMsrMtrrFix4kC8000 = _pywinhv.WHvX64RegisterMsrMtrrFix4kC8000
WHvX64RegisterMsrMtrrFix4kD0000 = _pywinhv.WHvX64RegisterMsrMtrrFix4kD0000
WHvX64RegisterMsrMtrrFix4kD8000 = _pywinhv.WHvX64RegisterMsrMtrrFix4kD8000
WHvX64RegisterMsrMtrrFix4kE0000 = _pywinhv.WHvX64RegisterMsrMtrrFix4kE0000
WHvX64RegisterMsrMtrrFix4kE8000 = _pywinhv.WHvX64RegisterMsrMtrrFix4kE8000
WHvX64RegisterMsrMtrrFix4kF0000 = _pywinhv.WHvX64RegisterMsrMtrrFix4kF0000
WHvX64RegisterMsrMtrrFix4kF8000 = _pywinhv.WHvX64RegisterMsrMtrrFix4kF8000
WHvX64RegisterTscAux = _pywinhv.WHvX64RegisterTscAux
WHvX64RegisterSpecCtrl = _pywinhv.WHvX64RegisterSpecCtrl
WHvX64RegisterPredCmd = _pywinhv.WHvX64RegisterPredCmd
WHvX64RegisterApicId = _pywinhv.WHvX64RegisterApicId
WHvX64RegisterApicVersion = _pywinhv.WHvX64RegisterApicVersion
WHvRegisterPendingInterruption = _pywinhv.WHvRegisterPendingInterruption
WHvRegisterInterruptState = _pywinhv.WHvRegisterInterruptState
WHvRegisterPendingEvent = _pywinhv.WHvRegisterPendingEvent
WHvX64RegisterDeliverabilityNotifications = _pywinhv.WHvX64RegisterDeliverabilityNotifications
WHvRegisterInternalActivityState = _pywinhv.WHvRegisterInternalActivityState
class WHV_UINT128(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WHV_UINT128, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WHV_UINT128, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Low64"] = _pywinhv.WHV_UINT128_Low64_set
    __swig_getmethods__["Low64"] = _pywinhv.WHV_UINT128_Low64_get
    if _newclass:
        Low64 = _swig_property(_pywinhv.WHV_UINT128_Low64_get, _pywinhv.WHV_UINT128_Low64_set)
    __swig_setmethods__["High64"] = _pywinhv.WHV_UINT128_High64_set
    __swig_getmethods__["High64"] = _pywinhv.WHV_UINT128_High64_get
    if _newclass:
        High64 = _swig_property(_pywinhv.WHV_UINT128_High64_get, _pywinhv.WHV_UINT128_High64_set)
    __swig_setmethods__["Dword"] = _pywinhv.WHV_UINT128_Dword_set
    __swig_getmethods__["Dword"] = _pywinhv.WHV_UINT128_Dword_get
    if _newclass:
        Dword = _swig_property(_pywinhv.WHV_UINT128_Dword_get, _pywinhv.WHV_UINT128_Dword_set)

    def __init__(self):
        this = _pywinhv.new_WHV_UINT128()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywinhv.delete_WHV_UINT128
    __del__ = lambda self: None
WHV_UINT128_swigregister = _pywinhv.WHV_UINT128_swigregister
WHV_UINT128_swigregister(WHV_UINT128)

class WHV_X64_FP_REGISTER(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WHV_X64_FP_REGISTER, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WHV_X64_FP_REGISTER, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Mantissa"] = _pywinhv.WHV_X64_FP_REGISTER_Mantissa_set
    __swig_getmethods__["Mantissa"] = _pywinhv.WHV_X64_FP_REGISTER_Mantissa_get
    if _newclass:
        Mantissa = _swig_property(_pywinhv.WHV_X64_FP_REGISTER_Mantissa_get, _pywinhv.WHV_X64_FP_REGISTER_Mantissa_set)
    __swig_setmethods__["BiasedExponent"] = _pywinhv.WHV_X64_FP_REGISTER_BiasedExponent_set
    __swig_getmethods__["BiasedExponent"] = _pywinhv.WHV_X64_FP_REGISTER_BiasedExponent_get
    if _newclass:
        BiasedExponent = _swig_property(_pywinhv.WHV_X64_FP_REGISTER_BiasedExponent_get, _pywinhv.WHV_X64_FP_REGISTER_BiasedExponent_set)
    __swig_setmethods__["Sign"] = _pywinhv.WHV_X64_FP_REGISTER_Sign_set
    __swig_getmethods__["Sign"] = _pywinhv.WHV_X64_FP_REGISTER_Sign_get
    if _newclass:
        Sign = _swig_property(_pywinhv.WHV_X64_FP_REGISTER_Sign_get, _pywinhv.WHV_X64_FP_REGISTER_Sign_set)
    __swig_setmethods__["Reserved"] = _pywinhv.WHV_X64_FP_REGISTER_Reserved_set
    __swig_getmethods__["Reserved"] = _pywinhv.WHV_X64_FP_REGISTER_Reserved_get
    if _newclass:
        Reserved = _swig_property(_pywinhv.WHV_X64_FP_REGISTER_Reserved_get, _pywinhv.WHV_X64_FP_REGISTER_Reserved_set)
    __swig_setmethods__["AsUINT128"] = _pywinhv.WHV_X64_FP_REGISTER_AsUINT128_set
    __swig_getmethods__["AsUINT128"] = _pywinhv.WHV_X64_FP_REGISTER_AsUINT128_get
    if _newclass:
        AsUINT128 = _swig_property(_pywinhv.WHV_X64_FP_REGISTER_AsUINT128_get, _pywinhv.WHV_X64_FP_REGISTER_AsUINT128_set)

    def __init__(self):
        this = _pywinhv.new_WHV_X64_FP_REGISTER()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywinhv.delete_WHV_X64_FP_REGISTER
    __del__ = lambda self: None
WHV_X64_FP_REGISTER_swigregister = _pywinhv.WHV_X64_FP_REGISTER_swigregister
WHV_X64_FP_REGISTER_swigregister(WHV_X64_FP_REGISTER)

class WHV_X64_FP_CONTROL_STATUS_REGISTER(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WHV_X64_FP_CONTROL_STATUS_REGISTER, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WHV_X64_FP_CONTROL_STATUS_REGISTER, name)
    __repr__ = _swig_repr
    __swig_setmethods__["FpControl"] = _pywinhv.WHV_X64_FP_CONTROL_STATUS_REGISTER_FpControl_set
    __swig_getmethods__["FpControl"] = _pywinhv.WHV_X64_FP_CONTROL_STATUS_REGISTER_FpControl_get
    if _newclass:
        FpControl = _swig_property(_pywinhv.WHV_X64_FP_CONTROL_STATUS_REGISTER_FpControl_get, _pywinhv.WHV_X64_FP_CONTROL_STATUS_REGISTER_FpControl_set)
    __swig_setmethods__["FpStatus"] = _pywinhv.WHV_X64_FP_CONTROL_STATUS_REGISTER_FpStatus_set
    __swig_getmethods__["FpStatus"] = _pywinhv.WHV_X64_FP_CONTROL_STATUS_REGISTER_FpStatus_get
    if _newclass:
        FpStatus = _swig_property(_pywinhv.WHV_X64_FP_CONTROL_STATUS_REGISTER_FpStatus_get, _pywinhv.WHV_X64_FP_CONTROL_STATUS_REGISTER_FpStatus_set)
    __swig_setmethods__["FpTag"] = _pywinhv.WHV_X64_FP_CONTROL_STATUS_REGISTER_FpTag_set
    __swig_getmethods__["FpTag"] = _pywinhv.WHV_X64_FP_CONTROL_STATUS_REGISTER_FpTag_get
    if _newclass:
        FpTag = _swig_property(_pywinhv.WHV_X64_FP_CONTROL_STATUS_REGISTER_FpTag_get, _pywinhv.WHV_X64_FP_CONTROL_STATUS_REGISTER_FpTag_set)
    __swig_setmethods__["Reserved"] = _pywinhv.WHV_X64_FP_CONTROL_STATUS_REGISTER_Reserved_set
    __swig_getmethods__["Reserved"] = _pywinhv.WHV_X64_FP_CONTROL_STATUS_REGISTER_Reserved_get
    if _newclass:
        Reserved = _swig_property(_pywinhv.WHV_X64_FP_CONTROL_STATUS_REGISTER_Reserved_get, _pywinhv.WHV_X64_FP_CONTROL_STATUS_REGISTER_Reserved_set)
    __swig_setmethods__["LastFpOp"] = _pywinhv.WHV_X64_FP_CONTROL_STATUS_REGISTER_LastFpOp_set
    __swig_getmethods__["LastFpOp"] = _pywinhv.WHV_X64_FP_CONTROL_STATUS_REGISTER_LastFpOp_get
    if _newclass:
        LastFpOp = _swig_property(_pywinhv.WHV_X64_FP_CONTROL_STATUS_REGISTER_LastFpOp_get, _pywinhv.WHV_X64_FP_CONTROL_STATUS_REGISTER_LastFpOp_set)
    __swig_setmethods__["LastFpRip"] = _pywinhv.WHV_X64_FP_CONTROL_STATUS_REGISTER_LastFpRip_set
    __swig_getmethods__["LastFpRip"] = _pywinhv.WHV_X64_FP_CONTROL_STATUS_REGISTER_LastFpRip_get
    if _newclass:
        LastFpRip = _swig_property(_pywinhv.WHV_X64_FP_CONTROL_STATUS_REGISTER_LastFpRip_get, _pywinhv.WHV_X64_FP_CONTROL_STATUS_REGISTER_LastFpRip_set)
    __swig_setmethods__["LastFpEip"] = _pywinhv.WHV_X64_FP_CONTROL_STATUS_REGISTER_LastFpEip_set
    __swig_getmethods__["LastFpEip"] = _pywinhv.WHV_X64_FP_CONTROL_STATUS_REGISTER_LastFpEip_get
    if _newclass:
        LastFpEip = _swig_property(_pywinhv.WHV_X64_FP_CONTROL_STATUS_REGISTER_LastFpEip_get, _pywinhv.WHV_X64_FP_CONTROL_STATUS_REGISTER_LastFpEip_set)
    __swig_setmethods__["LastFpCs"] = _pywinhv.WHV_X64_FP_CONTROL_STATUS_REGISTER_LastFpCs_set
    __swig_getmethods__["LastFpCs"] = _pywinhv.WHV_X64_FP_CONTROL_STATUS_REGISTER_LastFpCs_get
    if _newclass:
        LastFpCs = _swig_property(_pywinhv.WHV_X64_FP_CONTROL_STATUS_REGISTER_LastFpCs_get, _pywinhv.WHV_X64_FP_CONTROL_STATUS_REGISTER_LastFpCs_set)
    __swig_setmethods__["Reserved2"] = _pywinhv.WHV_X64_FP_CONTROL_STATUS_REGISTER_Reserved2_set
    __swig_getmethods__["Reserved2"] = _pywinhv.WHV_X64_FP_CONTROL_STATUS_REGISTER_Reserved2_get
    if _newclass:
        Reserved2 = _swig_property(_pywinhv.WHV_X64_FP_CONTROL_STATUS_REGISTER_Reserved2_get, _pywinhv.WHV_X64_FP_CONTROL_STATUS_REGISTER_Reserved2_set)
    __swig_setmethods__["AsUINT128"] = _pywinhv.WHV_X64_FP_CONTROL_STATUS_REGISTER_AsUINT128_set
    __swig_getmethods__["AsUINT128"] = _pywinhv.WHV_X64_FP_CONTROL_STATUS_REGISTER_AsUINT128_get
    if _newclass:
        AsUINT128 = _swig_property(_pywinhv.WHV_X64_FP_CONTROL_STATUS_REGISTER_AsUINT128_get, _pywinhv.WHV_X64_FP_CONTROL_STATUS_REGISTER_AsUINT128_set)

    def __init__(self):
        this = _pywinhv.new_WHV_X64_FP_CONTROL_STATUS_REGISTER()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywinhv.delete_WHV_X64_FP_CONTROL_STATUS_REGISTER
    __del__ = lambda self: None
WHV_X64_FP_CONTROL_STATUS_REGISTER_swigregister = _pywinhv.WHV_X64_FP_CONTROL_STATUS_REGISTER_swigregister
WHV_X64_FP_CONTROL_STATUS_REGISTER_swigregister(WHV_X64_FP_CONTROL_STATUS_REGISTER)

class WHV_X64_XMM_CONTROL_STATUS_REGISTER(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WHV_X64_XMM_CONTROL_STATUS_REGISTER, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WHV_X64_XMM_CONTROL_STATUS_REGISTER, name)
    __repr__ = _swig_repr
    __swig_setmethods__["LastFpRdp"] = _pywinhv.WHV_X64_XMM_CONTROL_STATUS_REGISTER_LastFpRdp_set
    __swig_getmethods__["LastFpRdp"] = _pywinhv.WHV_X64_XMM_CONTROL_STATUS_REGISTER_LastFpRdp_get
    if _newclass:
        LastFpRdp = _swig_property(_pywinhv.WHV_X64_XMM_CONTROL_STATUS_REGISTER_LastFpRdp_get, _pywinhv.WHV_X64_XMM_CONTROL_STATUS_REGISTER_LastFpRdp_set)
    __swig_setmethods__["LastFpDp"] = _pywinhv.WHV_X64_XMM_CONTROL_STATUS_REGISTER_LastFpDp_set
    __swig_getmethods__["LastFpDp"] = _pywinhv.WHV_X64_XMM_CONTROL_STATUS_REGISTER_LastFpDp_get
    if _newclass:
        LastFpDp = _swig_property(_pywinhv.WHV_X64_XMM_CONTROL_STATUS_REGISTER_LastFpDp_get, _pywinhv.WHV_X64_XMM_CONTROL_STATUS_REGISTER_LastFpDp_set)
    __swig_setmethods__["LastFpDs"] = _pywinhv.WHV_X64_XMM_CONTROL_STATUS_REGISTER_LastFpDs_set
    __swig_getmethods__["LastFpDs"] = _pywinhv.WHV_X64_XMM_CONTROL_STATUS_REGISTER_LastFpDs_get
    if _newclass:
        LastFpDs = _swig_property(_pywinhv.WHV_X64_XMM_CONTROL_STATUS_REGISTER_LastFpDs_get, _pywinhv.WHV_X64_XMM_CONTROL_STATUS_REGISTER_LastFpDs_set)
    __swig_setmethods__["Reserved"] = _pywinhv.WHV_X64_XMM_CONTROL_STATUS_REGISTER_Reserved_set
    __swig_getmethods__["Reserved"] = _pywinhv.WHV_X64_XMM_CONTROL_STATUS_REGISTER_Reserved_get
    if _newclass:
        Reserved = _swig_property(_pywinhv.WHV_X64_XMM_CONTROL_STATUS_REGISTER_Reserved_get, _pywinhv.WHV_X64_XMM_CONTROL_STATUS_REGISTER_Reserved_set)
    __swig_setmethods__["XmmStatusControl"] = _pywinhv.WHV_X64_XMM_CONTROL_STATUS_REGISTER_XmmStatusControl_set
    __swig_getmethods__["XmmStatusControl"] = _pywinhv.WHV_X64_XMM_CONTROL_STATUS_REGISTER_XmmStatusControl_get
    if _newclass:
        XmmStatusControl = _swig_property(_pywinhv.WHV_X64_XMM_CONTROL_STATUS_REGISTER_XmmStatusControl_get, _pywinhv.WHV_X64_XMM_CONTROL_STATUS_REGISTER_XmmStatusControl_set)
    __swig_setmethods__["XmmStatusControlMask"] = _pywinhv.WHV_X64_XMM_CONTROL_STATUS_REGISTER_XmmStatusControlMask_set
    __swig_getmethods__["XmmStatusControlMask"] = _pywinhv.WHV_X64_XMM_CONTROL_STATUS_REGISTER_XmmStatusControlMask_get
    if _newclass:
        XmmStatusControlMask = _swig_property(_pywinhv.WHV_X64_XMM_CONTROL_STATUS_REGISTER_XmmStatusControlMask_get, _pywinhv.WHV_X64_XMM_CONTROL_STATUS_REGISTER_XmmStatusControlMask_set)
    __swig_setmethods__["AsUINT128"] = _pywinhv.WHV_X64_XMM_CONTROL_STATUS_REGISTER_AsUINT128_set
    __swig_getmethods__["AsUINT128"] = _pywinhv.WHV_X64_XMM_CONTROL_STATUS_REGISTER_AsUINT128_get
    if _newclass:
        AsUINT128 = _swig_property(_pywinhv.WHV_X64_XMM_CONTROL_STATUS_REGISTER_AsUINT128_get, _pywinhv.WHV_X64_XMM_CONTROL_STATUS_REGISTER_AsUINT128_set)

    def __init__(self):
        this = _pywinhv.new_WHV_X64_XMM_CONTROL_STATUS_REGISTER()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywinhv.delete_WHV_X64_XMM_CONTROL_STATUS_REGISTER
    __del__ = lambda self: None
WHV_X64_XMM_CONTROL_STATUS_REGISTER_swigregister = _pywinhv.WHV_X64_XMM_CONTROL_STATUS_REGISTER_swigregister
WHV_X64_XMM_CONTROL_STATUS_REGISTER_swigregister(WHV_X64_XMM_CONTROL_STATUS_REGISTER)

class WHV_X64_SEGMENT_REGISTER(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WHV_X64_SEGMENT_REGISTER, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WHV_X64_SEGMENT_REGISTER, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Base"] = _pywinhv.WHV_X64_SEGMENT_REGISTER_Base_set
    __swig_getmethods__["Base"] = _pywinhv.WHV_X64_SEGMENT_REGISTER_Base_get
    if _newclass:
        Base = _swig_property(_pywinhv.WHV_X64_SEGMENT_REGISTER_Base_get, _pywinhv.WHV_X64_SEGMENT_REGISTER_Base_set)
    __swig_setmethods__["Limit"] = _pywinhv.WHV_X64_SEGMENT_REGISTER_Limit_set
    __swig_getmethods__["Limit"] = _pywinhv.WHV_X64_SEGMENT_REGISTER_Limit_get
    if _newclass:
        Limit = _swig_property(_pywinhv.WHV_X64_SEGMENT_REGISTER_Limit_get, _pywinhv.WHV_X64_SEGMENT_REGISTER_Limit_set)
    __swig_setmethods__["Selector"] = _pywinhv.WHV_X64_SEGMENT_REGISTER_Selector_set
    __swig_getmethods__["Selector"] = _pywinhv.WHV_X64_SEGMENT_REGISTER_Selector_get
    if _newclass:
        Selector = _swig_property(_pywinhv.WHV_X64_SEGMENT_REGISTER_Selector_get, _pywinhv.WHV_X64_SEGMENT_REGISTER_Selector_set)
    __swig_setmethods__["SegmentType"] = _pywinhv.WHV_X64_SEGMENT_REGISTER_SegmentType_set
    __swig_getmethods__["SegmentType"] = _pywinhv.WHV_X64_SEGMENT_REGISTER_SegmentType_get
    if _newclass:
        SegmentType = _swig_property(_pywinhv.WHV_X64_SEGMENT_REGISTER_SegmentType_get, _pywinhv.WHV_X64_SEGMENT_REGISTER_SegmentType_set)
    __swig_setmethods__["NonSystemSegment"] = _pywinhv.WHV_X64_SEGMENT_REGISTER_NonSystemSegment_set
    __swig_getmethods__["NonSystemSegment"] = _pywinhv.WHV_X64_SEGMENT_REGISTER_NonSystemSegment_get
    if _newclass:
        NonSystemSegment = _swig_property(_pywinhv.WHV_X64_SEGMENT_REGISTER_NonSystemSegment_get, _pywinhv.WHV_X64_SEGMENT_REGISTER_NonSystemSegment_set)
    __swig_setmethods__["DescriptorPrivilegeLevel"] = _pywinhv.WHV_X64_SEGMENT_REGISTER_DescriptorPrivilegeLevel_set
    __swig_getmethods__["DescriptorPrivilegeLevel"] = _pywinhv.WHV_X64_SEGMENT_REGISTER_DescriptorPrivilegeLevel_get
    if _newclass:
        DescriptorPrivilegeLevel = _swig_property(_pywinhv.WHV_X64_SEGMENT_REGISTER_DescriptorPrivilegeLevel_get, _pywinhv.WHV_X64_SEGMENT_REGISTER_DescriptorPrivilegeLevel_set)
    __swig_setmethods__["Present"] = _pywinhv.WHV_X64_SEGMENT_REGISTER_Present_set
    __swig_getmethods__["Present"] = _pywinhv.WHV_X64_SEGMENT_REGISTER_Present_get
    if _newclass:
        Present = _swig_property(_pywinhv.WHV_X64_SEGMENT_REGISTER_Present_get, _pywinhv.WHV_X64_SEGMENT_REGISTER_Present_set)
    __swig_setmethods__["Reserved"] = _pywinhv.WHV_X64_SEGMENT_REGISTER_Reserved_set
    __swig_getmethods__["Reserved"] = _pywinhv.WHV_X64_SEGMENT_REGISTER_Reserved_get
    if _newclass:
        Reserved = _swig_property(_pywinhv.WHV_X64_SEGMENT_REGISTER_Reserved_get, _pywinhv.WHV_X64_SEGMENT_REGISTER_Reserved_set)
    __swig_setmethods__["Available"] = _pywinhv.WHV_X64_SEGMENT_REGISTER_Available_set
    __swig_getmethods__["Available"] = _pywinhv.WHV_X64_SEGMENT_REGISTER_Available_get
    if _newclass:
        Available = _swig_property(_pywinhv.WHV_X64_SEGMENT_REGISTER_Available_get, _pywinhv.WHV_X64_SEGMENT_REGISTER_Available_set)
    __swig_setmethods__["Long"] = _pywinhv.WHV_X64_SEGMENT_REGISTER_Long_set
    __swig_getmethods__["Long"] = _pywinhv.WHV_X64_SEGMENT_REGISTER_Long_get
    if _newclass:
        Long = _swig_property(_pywinhv.WHV_X64_SEGMENT_REGISTER_Long_get, _pywinhv.WHV_X64_SEGMENT_REGISTER_Long_set)
    __swig_setmethods__["Default"] = _pywinhv.WHV_X64_SEGMENT_REGISTER_Default_set
    __swig_getmethods__["Default"] = _pywinhv.WHV_X64_SEGMENT_REGISTER_Default_get
    if _newclass:
        Default = _swig_property(_pywinhv.WHV_X64_SEGMENT_REGISTER_Default_get, _pywinhv.WHV_X64_SEGMENT_REGISTER_Default_set)
    __swig_setmethods__["Granularity"] = _pywinhv.WHV_X64_SEGMENT_REGISTER_Granularity_set
    __swig_getmethods__["Granularity"] = _pywinhv.WHV_X64_SEGMENT_REGISTER_Granularity_get
    if _newclass:
        Granularity = _swig_property(_pywinhv.WHV_X64_SEGMENT_REGISTER_Granularity_get, _pywinhv.WHV_X64_SEGMENT_REGISTER_Granularity_set)
    __swig_setmethods__["Attributes"] = _pywinhv.WHV_X64_SEGMENT_REGISTER_Attributes_set
    __swig_getmethods__["Attributes"] = _pywinhv.WHV_X64_SEGMENT_REGISTER_Attributes_get
    if _newclass:
        Attributes = _swig_property(_pywinhv.WHV_X64_SEGMENT_REGISTER_Attributes_get, _pywinhv.WHV_X64_SEGMENT_REGISTER_Attributes_set)

    def __init__(self):
        this = _pywinhv.new_WHV_X64_SEGMENT_REGISTER()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywinhv.delete_WHV_X64_SEGMENT_REGISTER
    __del__ = lambda self: None
WHV_X64_SEGMENT_REGISTER_swigregister = _pywinhv.WHV_X64_SEGMENT_REGISTER_swigregister
WHV_X64_SEGMENT_REGISTER_swigregister(WHV_X64_SEGMENT_REGISTER)

class WHV_X64_TABLE_REGISTER(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WHV_X64_TABLE_REGISTER, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WHV_X64_TABLE_REGISTER, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Pad"] = _pywinhv.WHV_X64_TABLE_REGISTER_Pad_set
    __swig_getmethods__["Pad"] = _pywinhv.WHV_X64_TABLE_REGISTER_Pad_get
    if _newclass:
        Pad = _swig_property(_pywinhv.WHV_X64_TABLE_REGISTER_Pad_get, _pywinhv.WHV_X64_TABLE_REGISTER_Pad_set)
    __swig_setmethods__["Limit"] = _pywinhv.WHV_X64_TABLE_REGISTER_Limit_set
    __swig_getmethods__["Limit"] = _pywinhv.WHV_X64_TABLE_REGISTER_Limit_get
    if _newclass:
        Limit = _swig_property(_pywinhv.WHV_X64_TABLE_REGISTER_Limit_get, _pywinhv.WHV_X64_TABLE_REGISTER_Limit_set)
    __swig_setmethods__["Base"] = _pywinhv.WHV_X64_TABLE_REGISTER_Base_set
    __swig_getmethods__["Base"] = _pywinhv.WHV_X64_TABLE_REGISTER_Base_get
    if _newclass:
        Base = _swig_property(_pywinhv.WHV_X64_TABLE_REGISTER_Base_get, _pywinhv.WHV_X64_TABLE_REGISTER_Base_set)

    def __init__(self):
        this = _pywinhv.new_WHV_X64_TABLE_REGISTER()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywinhv.delete_WHV_X64_TABLE_REGISTER
    __del__ = lambda self: None
WHV_X64_TABLE_REGISTER_swigregister = _pywinhv.WHV_X64_TABLE_REGISTER_swigregister
WHV_X64_TABLE_REGISTER_swigregister(WHV_X64_TABLE_REGISTER)

class WHV_X64_INTERRUPT_STATE_REGISTER(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WHV_X64_INTERRUPT_STATE_REGISTER, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WHV_X64_INTERRUPT_STATE_REGISTER, name)
    __repr__ = _swig_repr
    __swig_setmethods__["InterruptShadow"] = _pywinhv.WHV_X64_INTERRUPT_STATE_REGISTER_InterruptShadow_set
    __swig_getmethods__["InterruptShadow"] = _pywinhv.WHV_X64_INTERRUPT_STATE_REGISTER_InterruptShadow_get
    if _newclass:
        InterruptShadow = _swig_property(_pywinhv.WHV_X64_INTERRUPT_STATE_REGISTER_InterruptShadow_get, _pywinhv.WHV_X64_INTERRUPT_STATE_REGISTER_InterruptShadow_set)
    __swig_setmethods__["NmiMasked"] = _pywinhv.WHV_X64_INTERRUPT_STATE_REGISTER_NmiMasked_set
    __swig_getmethods__["NmiMasked"] = _pywinhv.WHV_X64_INTERRUPT_STATE_REGISTER_NmiMasked_get
    if _newclass:
        NmiMasked = _swig_property(_pywinhv.WHV_X64_INTERRUPT_STATE_REGISTER_NmiMasked_get, _pywinhv.WHV_X64_INTERRUPT_STATE_REGISTER_NmiMasked_set)
    __swig_setmethods__["Reserved"] = _pywinhv.WHV_X64_INTERRUPT_STATE_REGISTER_Reserved_set
    __swig_getmethods__["Reserved"] = _pywinhv.WHV_X64_INTERRUPT_STATE_REGISTER_Reserved_get
    if _newclass:
        Reserved = _swig_property(_pywinhv.WHV_X64_INTERRUPT_STATE_REGISTER_Reserved_get, _pywinhv.WHV_X64_INTERRUPT_STATE_REGISTER_Reserved_set)
    __swig_setmethods__["AsUINT64"] = _pywinhv.WHV_X64_INTERRUPT_STATE_REGISTER_AsUINT64_set
    __swig_getmethods__["AsUINT64"] = _pywinhv.WHV_X64_INTERRUPT_STATE_REGISTER_AsUINT64_get
    if _newclass:
        AsUINT64 = _swig_property(_pywinhv.WHV_X64_INTERRUPT_STATE_REGISTER_AsUINT64_get, _pywinhv.WHV_X64_INTERRUPT_STATE_REGISTER_AsUINT64_set)

    def __init__(self):
        this = _pywinhv.new_WHV_X64_INTERRUPT_STATE_REGISTER()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywinhv.delete_WHV_X64_INTERRUPT_STATE_REGISTER
    __del__ = lambda self: None
WHV_X64_INTERRUPT_STATE_REGISTER_swigregister = _pywinhv.WHV_X64_INTERRUPT_STATE_REGISTER_swigregister
WHV_X64_INTERRUPT_STATE_REGISTER_swigregister(WHV_X64_INTERRUPT_STATE_REGISTER)

class WHV_X64_PENDING_INTERRUPTION_REGISTER(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WHV_X64_PENDING_INTERRUPTION_REGISTER, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WHV_X64_PENDING_INTERRUPTION_REGISTER, name)
    __repr__ = _swig_repr
    __swig_setmethods__["InterruptionPending"] = _pywinhv.WHV_X64_PENDING_INTERRUPTION_REGISTER_InterruptionPending_set
    __swig_getmethods__["InterruptionPending"] = _pywinhv.WHV_X64_PENDING_INTERRUPTION_REGISTER_InterruptionPending_get
    if _newclass:
        InterruptionPending = _swig_property(_pywinhv.WHV_X64_PENDING_INTERRUPTION_REGISTER_InterruptionPending_get, _pywinhv.WHV_X64_PENDING_INTERRUPTION_REGISTER_InterruptionPending_set)
    __swig_setmethods__["InterruptionType"] = _pywinhv.WHV_X64_PENDING_INTERRUPTION_REGISTER_InterruptionType_set
    __swig_getmethods__["InterruptionType"] = _pywinhv.WHV_X64_PENDING_INTERRUPTION_REGISTER_InterruptionType_get
    if _newclass:
        InterruptionType = _swig_property(_pywinhv.WHV_X64_PENDING_INTERRUPTION_REGISTER_InterruptionType_get, _pywinhv.WHV_X64_PENDING_INTERRUPTION_REGISTER_InterruptionType_set)
    __swig_setmethods__["DeliverErrorCode"] = _pywinhv.WHV_X64_PENDING_INTERRUPTION_REGISTER_DeliverErrorCode_set
    __swig_getmethods__["DeliverErrorCode"] = _pywinhv.WHV_X64_PENDING_INTERRUPTION_REGISTER_DeliverErrorCode_get
    if _newclass:
        DeliverErrorCode = _swig_property(_pywinhv.WHV_X64_PENDING_INTERRUPTION_REGISTER_DeliverErrorCode_get, _pywinhv.WHV_X64_PENDING_INTERRUPTION_REGISTER_DeliverErrorCode_set)
    __swig_setmethods__["InstructionLength"] = _pywinhv.WHV_X64_PENDING_INTERRUPTION_REGISTER_InstructionLength_set
    __swig_getmethods__["InstructionLength"] = _pywinhv.WHV_X64_PENDING_INTERRUPTION_REGISTER_InstructionLength_get
    if _newclass:
        InstructionLength = _swig_property(_pywinhv.WHV_X64_PENDING_INTERRUPTION_REGISTER_InstructionLength_get, _pywinhv.WHV_X64_PENDING_INTERRUPTION_REGISTER_InstructionLength_set)
    __swig_setmethods__["NestedEvent"] = _pywinhv.WHV_X64_PENDING_INTERRUPTION_REGISTER_NestedEvent_set
    __swig_getmethods__["NestedEvent"] = _pywinhv.WHV_X64_PENDING_INTERRUPTION_REGISTER_NestedEvent_get
    if _newclass:
        NestedEvent = _swig_property(_pywinhv.WHV_X64_PENDING_INTERRUPTION_REGISTER_NestedEvent_get, _pywinhv.WHV_X64_PENDING_INTERRUPTION_REGISTER_NestedEvent_set)
    __swig_setmethods__["Reserved"] = _pywinhv.WHV_X64_PENDING_INTERRUPTION_REGISTER_Reserved_set
    __swig_getmethods__["Reserved"] = _pywinhv.WHV_X64_PENDING_INTERRUPTION_REGISTER_Reserved_get
    if _newclass:
        Reserved = _swig_property(_pywinhv.WHV_X64_PENDING_INTERRUPTION_REGISTER_Reserved_get, _pywinhv.WHV_X64_PENDING_INTERRUPTION_REGISTER_Reserved_set)
    __swig_setmethods__["InterruptionVector"] = _pywinhv.WHV_X64_PENDING_INTERRUPTION_REGISTER_InterruptionVector_set
    __swig_getmethods__["InterruptionVector"] = _pywinhv.WHV_X64_PENDING_INTERRUPTION_REGISTER_InterruptionVector_get
    if _newclass:
        InterruptionVector = _swig_property(_pywinhv.WHV_X64_PENDING_INTERRUPTION_REGISTER_InterruptionVector_get, _pywinhv.WHV_X64_PENDING_INTERRUPTION_REGISTER_InterruptionVector_set)
    __swig_setmethods__["ErrorCode"] = _pywinhv.WHV_X64_PENDING_INTERRUPTION_REGISTER_ErrorCode_set
    __swig_getmethods__["ErrorCode"] = _pywinhv.WHV_X64_PENDING_INTERRUPTION_REGISTER_ErrorCode_get
    if _newclass:
        ErrorCode = _swig_property(_pywinhv.WHV_X64_PENDING_INTERRUPTION_REGISTER_ErrorCode_get, _pywinhv.WHV_X64_PENDING_INTERRUPTION_REGISTER_ErrorCode_set)
    __swig_setmethods__["AsUINT64"] = _pywinhv.WHV_X64_PENDING_INTERRUPTION_REGISTER_AsUINT64_set
    __swig_getmethods__["AsUINT64"] = _pywinhv.WHV_X64_PENDING_INTERRUPTION_REGISTER_AsUINT64_get
    if _newclass:
        AsUINT64 = _swig_property(_pywinhv.WHV_X64_PENDING_INTERRUPTION_REGISTER_AsUINT64_get, _pywinhv.WHV_X64_PENDING_INTERRUPTION_REGISTER_AsUINT64_set)

    def __init__(self):
        this = _pywinhv.new_WHV_X64_PENDING_INTERRUPTION_REGISTER()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywinhv.delete_WHV_X64_PENDING_INTERRUPTION_REGISTER
    __del__ = lambda self: None
WHV_X64_PENDING_INTERRUPTION_REGISTER_swigregister = _pywinhv.WHV_X64_PENDING_INTERRUPTION_REGISTER_swigregister
WHV_X64_PENDING_INTERRUPTION_REGISTER_swigregister(WHV_X64_PENDING_INTERRUPTION_REGISTER)

class WHV_X64_DELIVERABILITY_NOTIFICATIONS_REGISTER(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WHV_X64_DELIVERABILITY_NOTIFICATIONS_REGISTER, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WHV_X64_DELIVERABILITY_NOTIFICATIONS_REGISTER, name)
    __repr__ = _swig_repr
    __swig_setmethods__["NmiNotification"] = _pywinhv.WHV_X64_DELIVERABILITY_NOTIFICATIONS_REGISTER_NmiNotification_set
    __swig_getmethods__["NmiNotification"] = _pywinhv.WHV_X64_DELIVERABILITY_NOTIFICATIONS_REGISTER_NmiNotification_get
    if _newclass:
        NmiNotification = _swig_property(_pywinhv.WHV_X64_DELIVERABILITY_NOTIFICATIONS_REGISTER_NmiNotification_get, _pywinhv.WHV_X64_DELIVERABILITY_NOTIFICATIONS_REGISTER_NmiNotification_set)
    __swig_setmethods__["InterruptNotification"] = _pywinhv.WHV_X64_DELIVERABILITY_NOTIFICATIONS_REGISTER_InterruptNotification_set
    __swig_getmethods__["InterruptNotification"] = _pywinhv.WHV_X64_DELIVERABILITY_NOTIFICATIONS_REGISTER_InterruptNotification_get
    if _newclass:
        InterruptNotification = _swig_property(_pywinhv.WHV_X64_DELIVERABILITY_NOTIFICATIONS_REGISTER_InterruptNotification_get, _pywinhv.WHV_X64_DELIVERABILITY_NOTIFICATIONS_REGISTER_InterruptNotification_set)
    __swig_setmethods__["InterruptPriority"] = _pywinhv.WHV_X64_DELIVERABILITY_NOTIFICATIONS_REGISTER_InterruptPriority_set
    __swig_getmethods__["InterruptPriority"] = _pywinhv.WHV_X64_DELIVERABILITY_NOTIFICATIONS_REGISTER_InterruptPriority_get
    if _newclass:
        InterruptPriority = _swig_property(_pywinhv.WHV_X64_DELIVERABILITY_NOTIFICATIONS_REGISTER_InterruptPriority_get, _pywinhv.WHV_X64_DELIVERABILITY_NOTIFICATIONS_REGISTER_InterruptPriority_set)
    __swig_setmethods__["Reserved"] = _pywinhv.WHV_X64_DELIVERABILITY_NOTIFICATIONS_REGISTER_Reserved_set
    __swig_getmethods__["Reserved"] = _pywinhv.WHV_X64_DELIVERABILITY_NOTIFICATIONS_REGISTER_Reserved_get
    if _newclass:
        Reserved = _swig_property(_pywinhv.WHV_X64_DELIVERABILITY_NOTIFICATIONS_REGISTER_Reserved_get, _pywinhv.WHV_X64_DELIVERABILITY_NOTIFICATIONS_REGISTER_Reserved_set)
    __swig_setmethods__["AsUINT64"] = _pywinhv.WHV_X64_DELIVERABILITY_NOTIFICATIONS_REGISTER_AsUINT64_set
    __swig_getmethods__["AsUINT64"] = _pywinhv.WHV_X64_DELIVERABILITY_NOTIFICATIONS_REGISTER_AsUINT64_get
    if _newclass:
        AsUINT64 = _swig_property(_pywinhv.WHV_X64_DELIVERABILITY_NOTIFICATIONS_REGISTER_AsUINT64_get, _pywinhv.WHV_X64_DELIVERABILITY_NOTIFICATIONS_REGISTER_AsUINT64_set)

    def __init__(self):
        this = _pywinhv.new_WHV_X64_DELIVERABILITY_NOTIFICATIONS_REGISTER()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywinhv.delete_WHV_X64_DELIVERABILITY_NOTIFICATIONS_REGISTER
    __del__ = lambda self: None
WHV_X64_DELIVERABILITY_NOTIFICATIONS_REGISTER_swigregister = _pywinhv.WHV_X64_DELIVERABILITY_NOTIFICATIONS_REGISTER_swigregister
WHV_X64_DELIVERABILITY_NOTIFICATIONS_REGISTER_swigregister(WHV_X64_DELIVERABILITY_NOTIFICATIONS_REGISTER)

WHvX64PendingEventException = _pywinhv.WHvX64PendingEventException
WHvX64PendingEventExtInt = _pywinhv.WHvX64PendingEventExtInt
class WHV_X64_PENDING_EXCEPTION_EVENT(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WHV_X64_PENDING_EXCEPTION_EVENT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WHV_X64_PENDING_EXCEPTION_EVENT, name)
    __repr__ = _swig_repr
    __swig_setmethods__["EventPending"] = _pywinhv.WHV_X64_PENDING_EXCEPTION_EVENT_EventPending_set
    __swig_getmethods__["EventPending"] = _pywinhv.WHV_X64_PENDING_EXCEPTION_EVENT_EventPending_get
    if _newclass:
        EventPending = _swig_property(_pywinhv.WHV_X64_PENDING_EXCEPTION_EVENT_EventPending_get, _pywinhv.WHV_X64_PENDING_EXCEPTION_EVENT_EventPending_set)
    __swig_setmethods__["EventType"] = _pywinhv.WHV_X64_PENDING_EXCEPTION_EVENT_EventType_set
    __swig_getmethods__["EventType"] = _pywinhv.WHV_X64_PENDING_EXCEPTION_EVENT_EventType_get
    if _newclass:
        EventType = _swig_property(_pywinhv.WHV_X64_PENDING_EXCEPTION_EVENT_EventType_get, _pywinhv.WHV_X64_PENDING_EXCEPTION_EVENT_EventType_set)
    __swig_setmethods__["Reserved0"] = _pywinhv.WHV_X64_PENDING_EXCEPTION_EVENT_Reserved0_set
    __swig_getmethods__["Reserved0"] = _pywinhv.WHV_X64_PENDING_EXCEPTION_EVENT_Reserved0_get
    if _newclass:
        Reserved0 = _swig_property(_pywinhv.WHV_X64_PENDING_EXCEPTION_EVENT_Reserved0_get, _pywinhv.WHV_X64_PENDING_EXCEPTION_EVENT_Reserved0_set)
    __swig_setmethods__["DeliverErrorCode"] = _pywinhv.WHV_X64_PENDING_EXCEPTION_EVENT_DeliverErrorCode_set
    __swig_getmethods__["DeliverErrorCode"] = _pywinhv.WHV_X64_PENDING_EXCEPTION_EVENT_DeliverErrorCode_get
    if _newclass:
        DeliverErrorCode = _swig_property(_pywinhv.WHV_X64_PENDING_EXCEPTION_EVENT_DeliverErrorCode_get, _pywinhv.WHV_X64_PENDING_EXCEPTION_EVENT_DeliverErrorCode_set)
    __swig_setmethods__["Reserved1"] = _pywinhv.WHV_X64_PENDING_EXCEPTION_EVENT_Reserved1_set
    __swig_getmethods__["Reserved1"] = _pywinhv.WHV_X64_PENDING_EXCEPTION_EVENT_Reserved1_get
    if _newclass:
        Reserved1 = _swig_property(_pywinhv.WHV_X64_PENDING_EXCEPTION_EVENT_Reserved1_get, _pywinhv.WHV_X64_PENDING_EXCEPTION_EVENT_Reserved1_set)
    __swig_setmethods__["Vector"] = _pywinhv.WHV_X64_PENDING_EXCEPTION_EVENT_Vector_set
    __swig_getmethods__["Vector"] = _pywinhv.WHV_X64_PENDING_EXCEPTION_EVENT_Vector_get
    if _newclass:
        Vector = _swig_property(_pywinhv.WHV_X64_PENDING_EXCEPTION_EVENT_Vector_get, _pywinhv.WHV_X64_PENDING_EXCEPTION_EVENT_Vector_set)
    __swig_setmethods__["ErrorCode"] = _pywinhv.WHV_X64_PENDING_EXCEPTION_EVENT_ErrorCode_set
    __swig_getmethods__["ErrorCode"] = _pywinhv.WHV_X64_PENDING_EXCEPTION_EVENT_ErrorCode_get
    if _newclass:
        ErrorCode = _swig_property(_pywinhv.WHV_X64_PENDING_EXCEPTION_EVENT_ErrorCode_get, _pywinhv.WHV_X64_PENDING_EXCEPTION_EVENT_ErrorCode_set)
    __swig_setmethods__["ExceptionParameter"] = _pywinhv.WHV_X64_PENDING_EXCEPTION_EVENT_ExceptionParameter_set
    __swig_getmethods__["ExceptionParameter"] = _pywinhv.WHV_X64_PENDING_EXCEPTION_EVENT_ExceptionParameter_get
    if _newclass:
        ExceptionParameter = _swig_property(_pywinhv.WHV_X64_PENDING_EXCEPTION_EVENT_ExceptionParameter_get, _pywinhv.WHV_X64_PENDING_EXCEPTION_EVENT_ExceptionParameter_set)
    __swig_setmethods__["AsUINT128"] = _pywinhv.WHV_X64_PENDING_EXCEPTION_EVENT_AsUINT128_set
    __swig_getmethods__["AsUINT128"] = _pywinhv.WHV_X64_PENDING_EXCEPTION_EVENT_AsUINT128_get
    if _newclass:
        AsUINT128 = _swig_property(_pywinhv.WHV_X64_PENDING_EXCEPTION_EVENT_AsUINT128_get, _pywinhv.WHV_X64_PENDING_EXCEPTION_EVENT_AsUINT128_set)

    def __init__(self):
        this = _pywinhv.new_WHV_X64_PENDING_EXCEPTION_EVENT()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywinhv.delete_WHV_X64_PENDING_EXCEPTION_EVENT
    __del__ = lambda self: None
WHV_X64_PENDING_EXCEPTION_EVENT_swigregister = _pywinhv.WHV_X64_PENDING_EXCEPTION_EVENT_swigregister
WHV_X64_PENDING_EXCEPTION_EVENT_swigregister(WHV_X64_PENDING_EXCEPTION_EVENT)

class WHV_X64_PENDING_EXT_INT_EVENT(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WHV_X64_PENDING_EXT_INT_EVENT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WHV_X64_PENDING_EXT_INT_EVENT, name)
    __repr__ = _swig_repr
    __swig_setmethods__["EventPending"] = _pywinhv.WHV_X64_PENDING_EXT_INT_EVENT_EventPending_set
    __swig_getmethods__["EventPending"] = _pywinhv.WHV_X64_PENDING_EXT_INT_EVENT_EventPending_get
    if _newclass:
        EventPending = _swig_property(_pywinhv.WHV_X64_PENDING_EXT_INT_EVENT_EventPending_get, _pywinhv.WHV_X64_PENDING_EXT_INT_EVENT_EventPending_set)
    __swig_setmethods__["EventType"] = _pywinhv.WHV_X64_PENDING_EXT_INT_EVENT_EventType_set
    __swig_getmethods__["EventType"] = _pywinhv.WHV_X64_PENDING_EXT_INT_EVENT_EventType_get
    if _newclass:
        EventType = _swig_property(_pywinhv.WHV_X64_PENDING_EXT_INT_EVENT_EventType_get, _pywinhv.WHV_X64_PENDING_EXT_INT_EVENT_EventType_set)
    __swig_setmethods__["Reserved0"] = _pywinhv.WHV_X64_PENDING_EXT_INT_EVENT_Reserved0_set
    __swig_getmethods__["Reserved0"] = _pywinhv.WHV_X64_PENDING_EXT_INT_EVENT_Reserved0_get
    if _newclass:
        Reserved0 = _swig_property(_pywinhv.WHV_X64_PENDING_EXT_INT_EVENT_Reserved0_get, _pywinhv.WHV_X64_PENDING_EXT_INT_EVENT_Reserved0_set)
    __swig_setmethods__["Vector"] = _pywinhv.WHV_X64_PENDING_EXT_INT_EVENT_Vector_set
    __swig_getmethods__["Vector"] = _pywinhv.WHV_X64_PENDING_EXT_INT_EVENT_Vector_get
    if _newclass:
        Vector = _swig_property(_pywinhv.WHV_X64_PENDING_EXT_INT_EVENT_Vector_get, _pywinhv.WHV_X64_PENDING_EXT_INT_EVENT_Vector_set)
    __swig_setmethods__["Reserved1"] = _pywinhv.WHV_X64_PENDING_EXT_INT_EVENT_Reserved1_set
    __swig_getmethods__["Reserved1"] = _pywinhv.WHV_X64_PENDING_EXT_INT_EVENT_Reserved1_get
    if _newclass:
        Reserved1 = _swig_property(_pywinhv.WHV_X64_PENDING_EXT_INT_EVENT_Reserved1_get, _pywinhv.WHV_X64_PENDING_EXT_INT_EVENT_Reserved1_set)
    __swig_setmethods__["Reserved2"] = _pywinhv.WHV_X64_PENDING_EXT_INT_EVENT_Reserved2_set
    __swig_getmethods__["Reserved2"] = _pywinhv.WHV_X64_PENDING_EXT_INT_EVENT_Reserved2_get
    if _newclass:
        Reserved2 = _swig_property(_pywinhv.WHV_X64_PENDING_EXT_INT_EVENT_Reserved2_get, _pywinhv.WHV_X64_PENDING_EXT_INT_EVENT_Reserved2_set)
    __swig_setmethods__["AsUINT128"] = _pywinhv.WHV_X64_PENDING_EXT_INT_EVENT_AsUINT128_set
    __swig_getmethods__["AsUINT128"] = _pywinhv.WHV_X64_PENDING_EXT_INT_EVENT_AsUINT128_get
    if _newclass:
        AsUINT128 = _swig_property(_pywinhv.WHV_X64_PENDING_EXT_INT_EVENT_AsUINT128_get, _pywinhv.WHV_X64_PENDING_EXT_INT_EVENT_AsUINT128_set)

    def __init__(self):
        this = _pywinhv.new_WHV_X64_PENDING_EXT_INT_EVENT()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywinhv.delete_WHV_X64_PENDING_EXT_INT_EVENT
    __del__ = lambda self: None
WHV_X64_PENDING_EXT_INT_EVENT_swigregister = _pywinhv.WHV_X64_PENDING_EXT_INT_EVENT_swigregister
WHV_X64_PENDING_EXT_INT_EVENT_swigregister(WHV_X64_PENDING_EXT_INT_EVENT)

class WHV_REGISTER_VALUE(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WHV_REGISTER_VALUE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WHV_REGISTER_VALUE, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Reg128"] = _pywinhv.WHV_REGISTER_VALUE_Reg128_set
    __swig_getmethods__["Reg128"] = _pywinhv.WHV_REGISTER_VALUE_Reg128_get
    if _newclass:
        Reg128 = _swig_property(_pywinhv.WHV_REGISTER_VALUE_Reg128_get, _pywinhv.WHV_REGISTER_VALUE_Reg128_set)
    __swig_setmethods__["Reg64"] = _pywinhv.WHV_REGISTER_VALUE_Reg64_set
    __swig_getmethods__["Reg64"] = _pywinhv.WHV_REGISTER_VALUE_Reg64_get
    if _newclass:
        Reg64 = _swig_property(_pywinhv.WHV_REGISTER_VALUE_Reg64_get, _pywinhv.WHV_REGISTER_VALUE_Reg64_set)
    __swig_setmethods__["Reg32"] = _pywinhv.WHV_REGISTER_VALUE_Reg32_set
    __swig_getmethods__["Reg32"] = _pywinhv.WHV_REGISTER_VALUE_Reg32_get
    if _newclass:
        Reg32 = _swig_property(_pywinhv.WHV_REGISTER_VALUE_Reg32_get, _pywinhv.WHV_REGISTER_VALUE_Reg32_set)
    __swig_setmethods__["Reg16"] = _pywinhv.WHV_REGISTER_VALUE_Reg16_set
    __swig_getmethods__["Reg16"] = _pywinhv.WHV_REGISTER_VALUE_Reg16_get
    if _newclass:
        Reg16 = _swig_property(_pywinhv.WHV_REGISTER_VALUE_Reg16_get, _pywinhv.WHV_REGISTER_VALUE_Reg16_set)
    __swig_setmethods__["Reg8"] = _pywinhv.WHV_REGISTER_VALUE_Reg8_set
    __swig_getmethods__["Reg8"] = _pywinhv.WHV_REGISTER_VALUE_Reg8_get
    if _newclass:
        Reg8 = _swig_property(_pywinhv.WHV_REGISTER_VALUE_Reg8_get, _pywinhv.WHV_REGISTER_VALUE_Reg8_set)
    __swig_setmethods__["Fp"] = _pywinhv.WHV_REGISTER_VALUE_Fp_set
    __swig_getmethods__["Fp"] = _pywinhv.WHV_REGISTER_VALUE_Fp_get
    if _newclass:
        Fp = _swig_property(_pywinhv.WHV_REGISTER_VALUE_Fp_get, _pywinhv.WHV_REGISTER_VALUE_Fp_set)
    __swig_setmethods__["FpControlStatus"] = _pywinhv.WHV_REGISTER_VALUE_FpControlStatus_set
    __swig_getmethods__["FpControlStatus"] = _pywinhv.WHV_REGISTER_VALUE_FpControlStatus_get
    if _newclass:
        FpControlStatus = _swig_property(_pywinhv.WHV_REGISTER_VALUE_FpControlStatus_get, _pywinhv.WHV_REGISTER_VALUE_FpControlStatus_set)
    __swig_setmethods__["XmmControlStatus"] = _pywinhv.WHV_REGISTER_VALUE_XmmControlStatus_set
    __swig_getmethods__["XmmControlStatus"] = _pywinhv.WHV_REGISTER_VALUE_XmmControlStatus_get
    if _newclass:
        XmmControlStatus = _swig_property(_pywinhv.WHV_REGISTER_VALUE_XmmControlStatus_get, _pywinhv.WHV_REGISTER_VALUE_XmmControlStatus_set)
    __swig_setmethods__["Segment"] = _pywinhv.WHV_REGISTER_VALUE_Segment_set
    __swig_getmethods__["Segment"] = _pywinhv.WHV_REGISTER_VALUE_Segment_get
    if _newclass:
        Segment = _swig_property(_pywinhv.WHV_REGISTER_VALUE_Segment_get, _pywinhv.WHV_REGISTER_VALUE_Segment_set)
    __swig_setmethods__["Table"] = _pywinhv.WHV_REGISTER_VALUE_Table_set
    __swig_getmethods__["Table"] = _pywinhv.WHV_REGISTER_VALUE_Table_get
    if _newclass:
        Table = _swig_property(_pywinhv.WHV_REGISTER_VALUE_Table_get, _pywinhv.WHV_REGISTER_VALUE_Table_set)
    __swig_setmethods__["InterruptState"] = _pywinhv.WHV_REGISTER_VALUE_InterruptState_set
    __swig_getmethods__["InterruptState"] = _pywinhv.WHV_REGISTER_VALUE_InterruptState_get
    if _newclass:
        InterruptState = _swig_property(_pywinhv.WHV_REGISTER_VALUE_InterruptState_get, _pywinhv.WHV_REGISTER_VALUE_InterruptState_set)
    __swig_setmethods__["PendingInterruption"] = _pywinhv.WHV_REGISTER_VALUE_PendingInterruption_set
    __swig_getmethods__["PendingInterruption"] = _pywinhv.WHV_REGISTER_VALUE_PendingInterruption_get
    if _newclass:
        PendingInterruption = _swig_property(_pywinhv.WHV_REGISTER_VALUE_PendingInterruption_get, _pywinhv.WHV_REGISTER_VALUE_PendingInterruption_set)
    __swig_setmethods__["DeliverabilityNotifications"] = _pywinhv.WHV_REGISTER_VALUE_DeliverabilityNotifications_set
    __swig_getmethods__["DeliverabilityNotifications"] = _pywinhv.WHV_REGISTER_VALUE_DeliverabilityNotifications_get
    if _newclass:
        DeliverabilityNotifications = _swig_property(_pywinhv.WHV_REGISTER_VALUE_DeliverabilityNotifications_get, _pywinhv.WHV_REGISTER_VALUE_DeliverabilityNotifications_set)
    __swig_setmethods__["ExceptionEvent"] = _pywinhv.WHV_REGISTER_VALUE_ExceptionEvent_set
    __swig_getmethods__["ExceptionEvent"] = _pywinhv.WHV_REGISTER_VALUE_ExceptionEvent_get
    if _newclass:
        ExceptionEvent = _swig_property(_pywinhv.WHV_REGISTER_VALUE_ExceptionEvent_get, _pywinhv.WHV_REGISTER_VALUE_ExceptionEvent_set)
    __swig_setmethods__["ExtIntEvent"] = _pywinhv.WHV_REGISTER_VALUE_ExtIntEvent_set
    __swig_getmethods__["ExtIntEvent"] = _pywinhv.WHV_REGISTER_VALUE_ExtIntEvent_get
    if _newclass:
        ExtIntEvent = _swig_property(_pywinhv.WHV_REGISTER_VALUE_ExtIntEvent_get, _pywinhv.WHV_REGISTER_VALUE_ExtIntEvent_set)

    def __len__(self):
        return _pywinhv.WHV_REGISTER_VALUE___len__(self)

    def __init__(self):
        this = _pywinhv.new_WHV_REGISTER_VALUE()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywinhv.delete_WHV_REGISTER_VALUE
    __del__ = lambda self: None
WHV_REGISTER_VALUE_swigregister = _pywinhv.WHV_REGISTER_VALUE_swigregister
WHV_REGISTER_VALUE_swigregister(WHV_REGISTER_VALUE)

WHvRunVpExitReasonNone = _pywinhv.WHvRunVpExitReasonNone
WHvRunVpExitReasonMemoryAccess = _pywinhv.WHvRunVpExitReasonMemoryAccess
WHvRunVpExitReasonX64IoPortAccess = _pywinhv.WHvRunVpExitReasonX64IoPortAccess
WHvRunVpExitReasonUnrecoverableException = _pywinhv.WHvRunVpExitReasonUnrecoverableException
WHvRunVpExitReasonInvalidVpRegisterValue = _pywinhv.WHvRunVpExitReasonInvalidVpRegisterValue
WHvRunVpExitReasonUnsupportedFeature = _pywinhv.WHvRunVpExitReasonUnsupportedFeature
WHvRunVpExitReasonX64InterruptWindow = _pywinhv.WHvRunVpExitReasonX64InterruptWindow
WHvRunVpExitReasonX64Halt = _pywinhv.WHvRunVpExitReasonX64Halt
WHvRunVpExitReasonX64ApicEoi = _pywinhv.WHvRunVpExitReasonX64ApicEoi
WHvRunVpExitReasonX64MsrAccess = _pywinhv.WHvRunVpExitReasonX64MsrAccess
WHvRunVpExitReasonX64Cpuid = _pywinhv.WHvRunVpExitReasonX64Cpuid
WHvRunVpExitReasonException = _pywinhv.WHvRunVpExitReasonException
WHvRunVpExitReasonCanceled = _pywinhv.WHvRunVpExitReasonCanceled
class WHV_X64_VP_EXECUTION_STATE(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WHV_X64_VP_EXECUTION_STATE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WHV_X64_VP_EXECUTION_STATE, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Cpl"] = _pywinhv.WHV_X64_VP_EXECUTION_STATE_Cpl_set
    __swig_getmethods__["Cpl"] = _pywinhv.WHV_X64_VP_EXECUTION_STATE_Cpl_get
    if _newclass:
        Cpl = _swig_property(_pywinhv.WHV_X64_VP_EXECUTION_STATE_Cpl_get, _pywinhv.WHV_X64_VP_EXECUTION_STATE_Cpl_set)
    __swig_setmethods__["Cr0Pe"] = _pywinhv.WHV_X64_VP_EXECUTION_STATE_Cr0Pe_set
    __swig_getmethods__["Cr0Pe"] = _pywinhv.WHV_X64_VP_EXECUTION_STATE_Cr0Pe_get
    if _newclass:
        Cr0Pe = _swig_property(_pywinhv.WHV_X64_VP_EXECUTION_STATE_Cr0Pe_get, _pywinhv.WHV_X64_VP_EXECUTION_STATE_Cr0Pe_set)
    __swig_setmethods__["Cr0Am"] = _pywinhv.WHV_X64_VP_EXECUTION_STATE_Cr0Am_set
    __swig_getmethods__["Cr0Am"] = _pywinhv.WHV_X64_VP_EXECUTION_STATE_Cr0Am_get
    if _newclass:
        Cr0Am = _swig_property(_pywinhv.WHV_X64_VP_EXECUTION_STATE_Cr0Am_get, _pywinhv.WHV_X64_VP_EXECUTION_STATE_Cr0Am_set)
    __swig_setmethods__["EferLma"] = _pywinhv.WHV_X64_VP_EXECUTION_STATE_EferLma_set
    __swig_getmethods__["EferLma"] = _pywinhv.WHV_X64_VP_EXECUTION_STATE_EferLma_get
    if _newclass:
        EferLma = _swig_property(_pywinhv.WHV_X64_VP_EXECUTION_STATE_EferLma_get, _pywinhv.WHV_X64_VP_EXECUTION_STATE_EferLma_set)
    __swig_setmethods__["DebugActive"] = _pywinhv.WHV_X64_VP_EXECUTION_STATE_DebugActive_set
    __swig_getmethods__["DebugActive"] = _pywinhv.WHV_X64_VP_EXECUTION_STATE_DebugActive_get
    if _newclass:
        DebugActive = _swig_property(_pywinhv.WHV_X64_VP_EXECUTION_STATE_DebugActive_get, _pywinhv.WHV_X64_VP_EXECUTION_STATE_DebugActive_set)
    __swig_setmethods__["InterruptionPending"] = _pywinhv.WHV_X64_VP_EXECUTION_STATE_InterruptionPending_set
    __swig_getmethods__["InterruptionPending"] = _pywinhv.WHV_X64_VP_EXECUTION_STATE_InterruptionPending_get
    if _newclass:
        InterruptionPending = _swig_property(_pywinhv.WHV_X64_VP_EXECUTION_STATE_InterruptionPending_get, _pywinhv.WHV_X64_VP_EXECUTION_STATE_InterruptionPending_set)
    __swig_setmethods__["Reserved0"] = _pywinhv.WHV_X64_VP_EXECUTION_STATE_Reserved0_set
    __swig_getmethods__["Reserved0"] = _pywinhv.WHV_X64_VP_EXECUTION_STATE_Reserved0_get
    if _newclass:
        Reserved0 = _swig_property(_pywinhv.WHV_X64_VP_EXECUTION_STATE_Reserved0_get, _pywinhv.WHV_X64_VP_EXECUTION_STATE_Reserved0_set)
    __swig_setmethods__["InterruptShadow"] = _pywinhv.WHV_X64_VP_EXECUTION_STATE_InterruptShadow_set
    __swig_getmethods__["InterruptShadow"] = _pywinhv.WHV_X64_VP_EXECUTION_STATE_InterruptShadow_get
    if _newclass:
        InterruptShadow = _swig_property(_pywinhv.WHV_X64_VP_EXECUTION_STATE_InterruptShadow_get, _pywinhv.WHV_X64_VP_EXECUTION_STATE_InterruptShadow_set)
    __swig_setmethods__["Reserved1"] = _pywinhv.WHV_X64_VP_EXECUTION_STATE_Reserved1_set
    __swig_getmethods__["Reserved1"] = _pywinhv.WHV_X64_VP_EXECUTION_STATE_Reserved1_get
    if _newclass:
        Reserved1 = _swig_property(_pywinhv.WHV_X64_VP_EXECUTION_STATE_Reserved1_get, _pywinhv.WHV_X64_VP_EXECUTION_STATE_Reserved1_set)
    __swig_setmethods__["AsUINT16"] = _pywinhv.WHV_X64_VP_EXECUTION_STATE_AsUINT16_set
    __swig_getmethods__["AsUINT16"] = _pywinhv.WHV_X64_VP_EXECUTION_STATE_AsUINT16_get
    if _newclass:
        AsUINT16 = _swig_property(_pywinhv.WHV_X64_VP_EXECUTION_STATE_AsUINT16_get, _pywinhv.WHV_X64_VP_EXECUTION_STATE_AsUINT16_set)

    def __init__(self):
        this = _pywinhv.new_WHV_X64_VP_EXECUTION_STATE()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywinhv.delete_WHV_X64_VP_EXECUTION_STATE
    __del__ = lambda self: None
WHV_X64_VP_EXECUTION_STATE_swigregister = _pywinhv.WHV_X64_VP_EXECUTION_STATE_swigregister
WHV_X64_VP_EXECUTION_STATE_swigregister(WHV_X64_VP_EXECUTION_STATE)

class WHV_VP_EXIT_CONTEXT(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WHV_VP_EXIT_CONTEXT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WHV_VP_EXIT_CONTEXT, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ExecutionState"] = _pywinhv.WHV_VP_EXIT_CONTEXT_ExecutionState_set
    __swig_getmethods__["ExecutionState"] = _pywinhv.WHV_VP_EXIT_CONTEXT_ExecutionState_get
    if _newclass:
        ExecutionState = _swig_property(_pywinhv.WHV_VP_EXIT_CONTEXT_ExecutionState_get, _pywinhv.WHV_VP_EXIT_CONTEXT_ExecutionState_set)
    __swig_setmethods__["InstructionLength"] = _pywinhv.WHV_VP_EXIT_CONTEXT_InstructionLength_set
    __swig_getmethods__["InstructionLength"] = _pywinhv.WHV_VP_EXIT_CONTEXT_InstructionLength_get
    if _newclass:
        InstructionLength = _swig_property(_pywinhv.WHV_VP_EXIT_CONTEXT_InstructionLength_get, _pywinhv.WHV_VP_EXIT_CONTEXT_InstructionLength_set)
    __swig_setmethods__["Cr8"] = _pywinhv.WHV_VP_EXIT_CONTEXT_Cr8_set
    __swig_getmethods__["Cr8"] = _pywinhv.WHV_VP_EXIT_CONTEXT_Cr8_get
    if _newclass:
        Cr8 = _swig_property(_pywinhv.WHV_VP_EXIT_CONTEXT_Cr8_get, _pywinhv.WHV_VP_EXIT_CONTEXT_Cr8_set)
    __swig_setmethods__["Reserved"] = _pywinhv.WHV_VP_EXIT_CONTEXT_Reserved_set
    __swig_getmethods__["Reserved"] = _pywinhv.WHV_VP_EXIT_CONTEXT_Reserved_get
    if _newclass:
        Reserved = _swig_property(_pywinhv.WHV_VP_EXIT_CONTEXT_Reserved_get, _pywinhv.WHV_VP_EXIT_CONTEXT_Reserved_set)
    __swig_setmethods__["Reserved2"] = _pywinhv.WHV_VP_EXIT_CONTEXT_Reserved2_set
    __swig_getmethods__["Reserved2"] = _pywinhv.WHV_VP_EXIT_CONTEXT_Reserved2_get
    if _newclass:
        Reserved2 = _swig_property(_pywinhv.WHV_VP_EXIT_CONTEXT_Reserved2_get, _pywinhv.WHV_VP_EXIT_CONTEXT_Reserved2_set)
    __swig_setmethods__["Cs"] = _pywinhv.WHV_VP_EXIT_CONTEXT_Cs_set
    __swig_getmethods__["Cs"] = _pywinhv.WHV_VP_EXIT_CONTEXT_Cs_get
    if _newclass:
        Cs = _swig_property(_pywinhv.WHV_VP_EXIT_CONTEXT_Cs_get, _pywinhv.WHV_VP_EXIT_CONTEXT_Cs_set)
    __swig_setmethods__["Rip"] = _pywinhv.WHV_VP_EXIT_CONTEXT_Rip_set
    __swig_getmethods__["Rip"] = _pywinhv.WHV_VP_EXIT_CONTEXT_Rip_get
    if _newclass:
        Rip = _swig_property(_pywinhv.WHV_VP_EXIT_CONTEXT_Rip_get, _pywinhv.WHV_VP_EXIT_CONTEXT_Rip_set)
    __swig_setmethods__["Rflags"] = _pywinhv.WHV_VP_EXIT_CONTEXT_Rflags_set
    __swig_getmethods__["Rflags"] = _pywinhv.WHV_VP_EXIT_CONTEXT_Rflags_get
    if _newclass:
        Rflags = _swig_property(_pywinhv.WHV_VP_EXIT_CONTEXT_Rflags_get, _pywinhv.WHV_VP_EXIT_CONTEXT_Rflags_set)

    def __init__(self):
        this = _pywinhv.new_WHV_VP_EXIT_CONTEXT()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywinhv.delete_WHV_VP_EXIT_CONTEXT
    __del__ = lambda self: None
WHV_VP_EXIT_CONTEXT_swigregister = _pywinhv.WHV_VP_EXIT_CONTEXT_swigregister
WHV_VP_EXIT_CONTEXT_swigregister(WHV_VP_EXIT_CONTEXT)

WHvMemoryAccessRead = _pywinhv.WHvMemoryAccessRead
WHvMemoryAccessWrite = _pywinhv.WHvMemoryAccessWrite
WHvMemoryAccessExecute = _pywinhv.WHvMemoryAccessExecute
class WHV_MEMORY_ACCESS_INFO(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WHV_MEMORY_ACCESS_INFO, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WHV_MEMORY_ACCESS_INFO, name)
    __repr__ = _swig_repr
    __swig_setmethods__["AccessType"] = _pywinhv.WHV_MEMORY_ACCESS_INFO_AccessType_set
    __swig_getmethods__["AccessType"] = _pywinhv.WHV_MEMORY_ACCESS_INFO_AccessType_get
    if _newclass:
        AccessType = _swig_property(_pywinhv.WHV_MEMORY_ACCESS_INFO_AccessType_get, _pywinhv.WHV_MEMORY_ACCESS_INFO_AccessType_set)
    __swig_setmethods__["GpaUnmapped"] = _pywinhv.WHV_MEMORY_ACCESS_INFO_GpaUnmapped_set
    __swig_getmethods__["GpaUnmapped"] = _pywinhv.WHV_MEMORY_ACCESS_INFO_GpaUnmapped_get
    if _newclass:
        GpaUnmapped = _swig_property(_pywinhv.WHV_MEMORY_ACCESS_INFO_GpaUnmapped_get, _pywinhv.WHV_MEMORY_ACCESS_INFO_GpaUnmapped_set)
    __swig_setmethods__["GvaValid"] = _pywinhv.WHV_MEMORY_ACCESS_INFO_GvaValid_set
    __swig_getmethods__["GvaValid"] = _pywinhv.WHV_MEMORY_ACCESS_INFO_GvaValid_get
    if _newclass:
        GvaValid = _swig_property(_pywinhv.WHV_MEMORY_ACCESS_INFO_GvaValid_get, _pywinhv.WHV_MEMORY_ACCESS_INFO_GvaValid_set)
    __swig_setmethods__["Reserved"] = _pywinhv.WHV_MEMORY_ACCESS_INFO_Reserved_set
    __swig_getmethods__["Reserved"] = _pywinhv.WHV_MEMORY_ACCESS_INFO_Reserved_get
    if _newclass:
        Reserved = _swig_property(_pywinhv.WHV_MEMORY_ACCESS_INFO_Reserved_get, _pywinhv.WHV_MEMORY_ACCESS_INFO_Reserved_set)
    __swig_setmethods__["AsUINT32"] = _pywinhv.WHV_MEMORY_ACCESS_INFO_AsUINT32_set
    __swig_getmethods__["AsUINT32"] = _pywinhv.WHV_MEMORY_ACCESS_INFO_AsUINT32_get
    if _newclass:
        AsUINT32 = _swig_property(_pywinhv.WHV_MEMORY_ACCESS_INFO_AsUINT32_get, _pywinhv.WHV_MEMORY_ACCESS_INFO_AsUINT32_set)

    def __init__(self):
        this = _pywinhv.new_WHV_MEMORY_ACCESS_INFO()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywinhv.delete_WHV_MEMORY_ACCESS_INFO
    __del__ = lambda self: None
WHV_MEMORY_ACCESS_INFO_swigregister = _pywinhv.WHV_MEMORY_ACCESS_INFO_swigregister
WHV_MEMORY_ACCESS_INFO_swigregister(WHV_MEMORY_ACCESS_INFO)

class WHV_MEMORY_ACCESS_CONTEXT(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WHV_MEMORY_ACCESS_CONTEXT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WHV_MEMORY_ACCESS_CONTEXT, name)
    __repr__ = _swig_repr
    __swig_setmethods__["InstructionByteCount"] = _pywinhv.WHV_MEMORY_ACCESS_CONTEXT_InstructionByteCount_set
    __swig_getmethods__["InstructionByteCount"] = _pywinhv.WHV_MEMORY_ACCESS_CONTEXT_InstructionByteCount_get
    if _newclass:
        InstructionByteCount = _swig_property(_pywinhv.WHV_MEMORY_ACCESS_CONTEXT_InstructionByteCount_get, _pywinhv.WHV_MEMORY_ACCESS_CONTEXT_InstructionByteCount_set)
    __swig_setmethods__["Reserved"] = _pywinhv.WHV_MEMORY_ACCESS_CONTEXT_Reserved_set
    __swig_getmethods__["Reserved"] = _pywinhv.WHV_MEMORY_ACCESS_CONTEXT_Reserved_get
    if _newclass:
        Reserved = _swig_property(_pywinhv.WHV_MEMORY_ACCESS_CONTEXT_Reserved_get, _pywinhv.WHV_MEMORY_ACCESS_CONTEXT_Reserved_set)
    __swig_setmethods__["InstructionBytes"] = _pywinhv.WHV_MEMORY_ACCESS_CONTEXT_InstructionBytes_set
    __swig_getmethods__["InstructionBytes"] = _pywinhv.WHV_MEMORY_ACCESS_CONTEXT_InstructionBytes_get
    if _newclass:
        InstructionBytes = _swig_property(_pywinhv.WHV_MEMORY_ACCESS_CONTEXT_InstructionBytes_get, _pywinhv.WHV_MEMORY_ACCESS_CONTEXT_InstructionBytes_set)
    __swig_setmethods__["AccessInfo"] = _pywinhv.WHV_MEMORY_ACCESS_CONTEXT_AccessInfo_set
    __swig_getmethods__["AccessInfo"] = _pywinhv.WHV_MEMORY_ACCESS_CONTEXT_AccessInfo_get
    if _newclass:
        AccessInfo = _swig_property(_pywinhv.WHV_MEMORY_ACCESS_CONTEXT_AccessInfo_get, _pywinhv.WHV_MEMORY_ACCESS_CONTEXT_AccessInfo_set)
    __swig_setmethods__["Gpa"] = _pywinhv.WHV_MEMORY_ACCESS_CONTEXT_Gpa_set
    __swig_getmethods__["Gpa"] = _pywinhv.WHV_MEMORY_ACCESS_CONTEXT_Gpa_get
    if _newclass:
        Gpa = _swig_property(_pywinhv.WHV_MEMORY_ACCESS_CONTEXT_Gpa_get, _pywinhv.WHV_MEMORY_ACCESS_CONTEXT_Gpa_set)
    __swig_setmethods__["Gva"] = _pywinhv.WHV_MEMORY_ACCESS_CONTEXT_Gva_set
    __swig_getmethods__["Gva"] = _pywinhv.WHV_MEMORY_ACCESS_CONTEXT_Gva_get
    if _newclass:
        Gva = _swig_property(_pywinhv.WHV_MEMORY_ACCESS_CONTEXT_Gva_get, _pywinhv.WHV_MEMORY_ACCESS_CONTEXT_Gva_set)

    def __init__(self):
        this = _pywinhv.new_WHV_MEMORY_ACCESS_CONTEXT()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywinhv.delete_WHV_MEMORY_ACCESS_CONTEXT
    __del__ = lambda self: None
WHV_MEMORY_ACCESS_CONTEXT_swigregister = _pywinhv.WHV_MEMORY_ACCESS_CONTEXT_swigregister
WHV_MEMORY_ACCESS_CONTEXT_swigregister(WHV_MEMORY_ACCESS_CONTEXT)

class WHV_X64_IO_PORT_ACCESS_INFO(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WHV_X64_IO_PORT_ACCESS_INFO, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WHV_X64_IO_PORT_ACCESS_INFO, name)
    __repr__ = _swig_repr
    __swig_setmethods__["IsWrite"] = _pywinhv.WHV_X64_IO_PORT_ACCESS_INFO_IsWrite_set
    __swig_getmethods__["IsWrite"] = _pywinhv.WHV_X64_IO_PORT_ACCESS_INFO_IsWrite_get
    if _newclass:
        IsWrite = _swig_property(_pywinhv.WHV_X64_IO_PORT_ACCESS_INFO_IsWrite_get, _pywinhv.WHV_X64_IO_PORT_ACCESS_INFO_IsWrite_set)
    __swig_setmethods__["AccessSize"] = _pywinhv.WHV_X64_IO_PORT_ACCESS_INFO_AccessSize_set
    __swig_getmethods__["AccessSize"] = _pywinhv.WHV_X64_IO_PORT_ACCESS_INFO_AccessSize_get
    if _newclass:
        AccessSize = _swig_property(_pywinhv.WHV_X64_IO_PORT_ACCESS_INFO_AccessSize_get, _pywinhv.WHV_X64_IO_PORT_ACCESS_INFO_AccessSize_set)
    __swig_setmethods__["StringOp"] = _pywinhv.WHV_X64_IO_PORT_ACCESS_INFO_StringOp_set
    __swig_getmethods__["StringOp"] = _pywinhv.WHV_X64_IO_PORT_ACCESS_INFO_StringOp_get
    if _newclass:
        StringOp = _swig_property(_pywinhv.WHV_X64_IO_PORT_ACCESS_INFO_StringOp_get, _pywinhv.WHV_X64_IO_PORT_ACCESS_INFO_StringOp_set)
    __swig_setmethods__["RepPrefix"] = _pywinhv.WHV_X64_IO_PORT_ACCESS_INFO_RepPrefix_set
    __swig_getmethods__["RepPrefix"] = _pywinhv.WHV_X64_IO_PORT_ACCESS_INFO_RepPrefix_get
    if _newclass:
        RepPrefix = _swig_property(_pywinhv.WHV_X64_IO_PORT_ACCESS_INFO_RepPrefix_get, _pywinhv.WHV_X64_IO_PORT_ACCESS_INFO_RepPrefix_set)
    __swig_setmethods__["Reserved"] = _pywinhv.WHV_X64_IO_PORT_ACCESS_INFO_Reserved_set
    __swig_getmethods__["Reserved"] = _pywinhv.WHV_X64_IO_PORT_ACCESS_INFO_Reserved_get
    if _newclass:
        Reserved = _swig_property(_pywinhv.WHV_X64_IO_PORT_ACCESS_INFO_Reserved_get, _pywinhv.WHV_X64_IO_PORT_ACCESS_INFO_Reserved_set)
    __swig_setmethods__["AsUINT32"] = _pywinhv.WHV_X64_IO_PORT_ACCESS_INFO_AsUINT32_set
    __swig_getmethods__["AsUINT32"] = _pywinhv.WHV_X64_IO_PORT_ACCESS_INFO_AsUINT32_get
    if _newclass:
        AsUINT32 = _swig_property(_pywinhv.WHV_X64_IO_PORT_ACCESS_INFO_AsUINT32_get, _pywinhv.WHV_X64_IO_PORT_ACCESS_INFO_AsUINT32_set)

    def __init__(self):
        this = _pywinhv.new_WHV_X64_IO_PORT_ACCESS_INFO()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywinhv.delete_WHV_X64_IO_PORT_ACCESS_INFO
    __del__ = lambda self: None
WHV_X64_IO_PORT_ACCESS_INFO_swigregister = _pywinhv.WHV_X64_IO_PORT_ACCESS_INFO_swigregister
WHV_X64_IO_PORT_ACCESS_INFO_swigregister(WHV_X64_IO_PORT_ACCESS_INFO)

class WHV_X64_IO_PORT_ACCESS_CONTEXT(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WHV_X64_IO_PORT_ACCESS_CONTEXT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WHV_X64_IO_PORT_ACCESS_CONTEXT, name)
    __repr__ = _swig_repr
    __swig_setmethods__["InstructionByteCount"] = _pywinhv.WHV_X64_IO_PORT_ACCESS_CONTEXT_InstructionByteCount_set
    __swig_getmethods__["InstructionByteCount"] = _pywinhv.WHV_X64_IO_PORT_ACCESS_CONTEXT_InstructionByteCount_get
    if _newclass:
        InstructionByteCount = _swig_property(_pywinhv.WHV_X64_IO_PORT_ACCESS_CONTEXT_InstructionByteCount_get, _pywinhv.WHV_X64_IO_PORT_ACCESS_CONTEXT_InstructionByteCount_set)
    __swig_setmethods__["Reserved"] = _pywinhv.WHV_X64_IO_PORT_ACCESS_CONTEXT_Reserved_set
    __swig_getmethods__["Reserved"] = _pywinhv.WHV_X64_IO_PORT_ACCESS_CONTEXT_Reserved_get
    if _newclass:
        Reserved = _swig_property(_pywinhv.WHV_X64_IO_PORT_ACCESS_CONTEXT_Reserved_get, _pywinhv.WHV_X64_IO_PORT_ACCESS_CONTEXT_Reserved_set)
    __swig_setmethods__["InstructionBytes"] = _pywinhv.WHV_X64_IO_PORT_ACCESS_CONTEXT_InstructionBytes_set
    __swig_getmethods__["InstructionBytes"] = _pywinhv.WHV_X64_IO_PORT_ACCESS_CONTEXT_InstructionBytes_get
    if _newclass:
        InstructionBytes = _swig_property(_pywinhv.WHV_X64_IO_PORT_ACCESS_CONTEXT_InstructionBytes_get, _pywinhv.WHV_X64_IO_PORT_ACCESS_CONTEXT_InstructionBytes_set)
    __swig_setmethods__["AccessInfo"] = _pywinhv.WHV_X64_IO_PORT_ACCESS_CONTEXT_AccessInfo_set
    __swig_getmethods__["AccessInfo"] = _pywinhv.WHV_X64_IO_PORT_ACCESS_CONTEXT_AccessInfo_get
    if _newclass:
        AccessInfo = _swig_property(_pywinhv.WHV_X64_IO_PORT_ACCESS_CONTEXT_AccessInfo_get, _pywinhv.WHV_X64_IO_PORT_ACCESS_CONTEXT_AccessInfo_set)
    __swig_setmethods__["PortNumber"] = _pywinhv.WHV_X64_IO_PORT_ACCESS_CONTEXT_PortNumber_set
    __swig_getmethods__["PortNumber"] = _pywinhv.WHV_X64_IO_PORT_ACCESS_CONTEXT_PortNumber_get
    if _newclass:
        PortNumber = _swig_property(_pywinhv.WHV_X64_IO_PORT_ACCESS_CONTEXT_PortNumber_get, _pywinhv.WHV_X64_IO_PORT_ACCESS_CONTEXT_PortNumber_set)
    __swig_setmethods__["Reserved2"] = _pywinhv.WHV_X64_IO_PORT_ACCESS_CONTEXT_Reserved2_set
    __swig_getmethods__["Reserved2"] = _pywinhv.WHV_X64_IO_PORT_ACCESS_CONTEXT_Reserved2_get
    if _newclass:
        Reserved2 = _swig_property(_pywinhv.WHV_X64_IO_PORT_ACCESS_CONTEXT_Reserved2_get, _pywinhv.WHV_X64_IO_PORT_ACCESS_CONTEXT_Reserved2_set)
    __swig_setmethods__["Rax"] = _pywinhv.WHV_X64_IO_PORT_ACCESS_CONTEXT_Rax_set
    __swig_getmethods__["Rax"] = _pywinhv.WHV_X64_IO_PORT_ACCESS_CONTEXT_Rax_get
    if _newclass:
        Rax = _swig_property(_pywinhv.WHV_X64_IO_PORT_ACCESS_CONTEXT_Rax_get, _pywinhv.WHV_X64_IO_PORT_ACCESS_CONTEXT_Rax_set)
    __swig_setmethods__["Rcx"] = _pywinhv.WHV_X64_IO_PORT_ACCESS_CONTEXT_Rcx_set
    __swig_getmethods__["Rcx"] = _pywinhv.WHV_X64_IO_PORT_ACCESS_CONTEXT_Rcx_get
    if _newclass:
        Rcx = _swig_property(_pywinhv.WHV_X64_IO_PORT_ACCESS_CONTEXT_Rcx_get, _pywinhv.WHV_X64_IO_PORT_ACCESS_CONTEXT_Rcx_set)
    __swig_setmethods__["Rsi"] = _pywinhv.WHV_X64_IO_PORT_ACCESS_CONTEXT_Rsi_set
    __swig_getmethods__["Rsi"] = _pywinhv.WHV_X64_IO_PORT_ACCESS_CONTEXT_Rsi_get
    if _newclass:
        Rsi = _swig_property(_pywinhv.WHV_X64_IO_PORT_ACCESS_CONTEXT_Rsi_get, _pywinhv.WHV_X64_IO_PORT_ACCESS_CONTEXT_Rsi_set)
    __swig_setmethods__["Rdi"] = _pywinhv.WHV_X64_IO_PORT_ACCESS_CONTEXT_Rdi_set
    __swig_getmethods__["Rdi"] = _pywinhv.WHV_X64_IO_PORT_ACCESS_CONTEXT_Rdi_get
    if _newclass:
        Rdi = _swig_property(_pywinhv.WHV_X64_IO_PORT_ACCESS_CONTEXT_Rdi_get, _pywinhv.WHV_X64_IO_PORT_ACCESS_CONTEXT_Rdi_set)
    __swig_setmethods__["Ds"] = _pywinhv.WHV_X64_IO_PORT_ACCESS_CONTEXT_Ds_set
    __swig_getmethods__["Ds"] = _pywinhv.WHV_X64_IO_PORT_ACCESS_CONTEXT_Ds_get
    if _newclass:
        Ds = _swig_property(_pywinhv.WHV_X64_IO_PORT_ACCESS_CONTEXT_Ds_get, _pywinhv.WHV_X64_IO_PORT_ACCESS_CONTEXT_Ds_set)
    __swig_setmethods__["Es"] = _pywinhv.WHV_X64_IO_PORT_ACCESS_CONTEXT_Es_set
    __swig_getmethods__["Es"] = _pywinhv.WHV_X64_IO_PORT_ACCESS_CONTEXT_Es_get
    if _newclass:
        Es = _swig_property(_pywinhv.WHV_X64_IO_PORT_ACCESS_CONTEXT_Es_get, _pywinhv.WHV_X64_IO_PORT_ACCESS_CONTEXT_Es_set)

    def __init__(self):
        this = _pywinhv.new_WHV_X64_IO_PORT_ACCESS_CONTEXT()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywinhv.delete_WHV_X64_IO_PORT_ACCESS_CONTEXT
    __del__ = lambda self: None
WHV_X64_IO_PORT_ACCESS_CONTEXT_swigregister = _pywinhv.WHV_X64_IO_PORT_ACCESS_CONTEXT_swigregister
WHV_X64_IO_PORT_ACCESS_CONTEXT_swigregister(WHV_X64_IO_PORT_ACCESS_CONTEXT)

class WHV_X64_MSR_ACCESS_INFO(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WHV_X64_MSR_ACCESS_INFO, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WHV_X64_MSR_ACCESS_INFO, name)
    __repr__ = _swig_repr
    __swig_setmethods__["IsWrite"] = _pywinhv.WHV_X64_MSR_ACCESS_INFO_IsWrite_set
    __swig_getmethods__["IsWrite"] = _pywinhv.WHV_X64_MSR_ACCESS_INFO_IsWrite_get
    if _newclass:
        IsWrite = _swig_property(_pywinhv.WHV_X64_MSR_ACCESS_INFO_IsWrite_get, _pywinhv.WHV_X64_MSR_ACCESS_INFO_IsWrite_set)
    __swig_setmethods__["Reserved"] = _pywinhv.WHV_X64_MSR_ACCESS_INFO_Reserved_set
    __swig_getmethods__["Reserved"] = _pywinhv.WHV_X64_MSR_ACCESS_INFO_Reserved_get
    if _newclass:
        Reserved = _swig_property(_pywinhv.WHV_X64_MSR_ACCESS_INFO_Reserved_get, _pywinhv.WHV_X64_MSR_ACCESS_INFO_Reserved_set)
    __swig_setmethods__["AsUINT32"] = _pywinhv.WHV_X64_MSR_ACCESS_INFO_AsUINT32_set
    __swig_getmethods__["AsUINT32"] = _pywinhv.WHV_X64_MSR_ACCESS_INFO_AsUINT32_get
    if _newclass:
        AsUINT32 = _swig_property(_pywinhv.WHV_X64_MSR_ACCESS_INFO_AsUINT32_get, _pywinhv.WHV_X64_MSR_ACCESS_INFO_AsUINT32_set)

    def __init__(self):
        this = _pywinhv.new_WHV_X64_MSR_ACCESS_INFO()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywinhv.delete_WHV_X64_MSR_ACCESS_INFO
    __del__ = lambda self: None
WHV_X64_MSR_ACCESS_INFO_swigregister = _pywinhv.WHV_X64_MSR_ACCESS_INFO_swigregister
WHV_X64_MSR_ACCESS_INFO_swigregister(WHV_X64_MSR_ACCESS_INFO)

class WHV_X64_MSR_ACCESS_CONTEXT(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WHV_X64_MSR_ACCESS_CONTEXT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WHV_X64_MSR_ACCESS_CONTEXT, name)
    __repr__ = _swig_repr
    __swig_setmethods__["AccessInfo"] = _pywinhv.WHV_X64_MSR_ACCESS_CONTEXT_AccessInfo_set
    __swig_getmethods__["AccessInfo"] = _pywinhv.WHV_X64_MSR_ACCESS_CONTEXT_AccessInfo_get
    if _newclass:
        AccessInfo = _swig_property(_pywinhv.WHV_X64_MSR_ACCESS_CONTEXT_AccessInfo_get, _pywinhv.WHV_X64_MSR_ACCESS_CONTEXT_AccessInfo_set)
    __swig_setmethods__["MsrNumber"] = _pywinhv.WHV_X64_MSR_ACCESS_CONTEXT_MsrNumber_set
    __swig_getmethods__["MsrNumber"] = _pywinhv.WHV_X64_MSR_ACCESS_CONTEXT_MsrNumber_get
    if _newclass:
        MsrNumber = _swig_property(_pywinhv.WHV_X64_MSR_ACCESS_CONTEXT_MsrNumber_get, _pywinhv.WHV_X64_MSR_ACCESS_CONTEXT_MsrNumber_set)
    __swig_setmethods__["Rax"] = _pywinhv.WHV_X64_MSR_ACCESS_CONTEXT_Rax_set
    __swig_getmethods__["Rax"] = _pywinhv.WHV_X64_MSR_ACCESS_CONTEXT_Rax_get
    if _newclass:
        Rax = _swig_property(_pywinhv.WHV_X64_MSR_ACCESS_CONTEXT_Rax_get, _pywinhv.WHV_X64_MSR_ACCESS_CONTEXT_Rax_set)
    __swig_setmethods__["Rdx"] = _pywinhv.WHV_X64_MSR_ACCESS_CONTEXT_Rdx_set
    __swig_getmethods__["Rdx"] = _pywinhv.WHV_X64_MSR_ACCESS_CONTEXT_Rdx_get
    if _newclass:
        Rdx = _swig_property(_pywinhv.WHV_X64_MSR_ACCESS_CONTEXT_Rdx_get, _pywinhv.WHV_X64_MSR_ACCESS_CONTEXT_Rdx_set)

    def __init__(self):
        this = _pywinhv.new_WHV_X64_MSR_ACCESS_CONTEXT()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywinhv.delete_WHV_X64_MSR_ACCESS_CONTEXT
    __del__ = lambda self: None
WHV_X64_MSR_ACCESS_CONTEXT_swigregister = _pywinhv.WHV_X64_MSR_ACCESS_CONTEXT_swigregister
WHV_X64_MSR_ACCESS_CONTEXT_swigregister(WHV_X64_MSR_ACCESS_CONTEXT)

class WHV_X64_CPUID_ACCESS_CONTEXT(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WHV_X64_CPUID_ACCESS_CONTEXT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WHV_X64_CPUID_ACCESS_CONTEXT, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Rax"] = _pywinhv.WHV_X64_CPUID_ACCESS_CONTEXT_Rax_set
    __swig_getmethods__["Rax"] = _pywinhv.WHV_X64_CPUID_ACCESS_CONTEXT_Rax_get
    if _newclass:
        Rax = _swig_property(_pywinhv.WHV_X64_CPUID_ACCESS_CONTEXT_Rax_get, _pywinhv.WHV_X64_CPUID_ACCESS_CONTEXT_Rax_set)
    __swig_setmethods__["Rcx"] = _pywinhv.WHV_X64_CPUID_ACCESS_CONTEXT_Rcx_set
    __swig_getmethods__["Rcx"] = _pywinhv.WHV_X64_CPUID_ACCESS_CONTEXT_Rcx_get
    if _newclass:
        Rcx = _swig_property(_pywinhv.WHV_X64_CPUID_ACCESS_CONTEXT_Rcx_get, _pywinhv.WHV_X64_CPUID_ACCESS_CONTEXT_Rcx_set)
    __swig_setmethods__["Rdx"] = _pywinhv.WHV_X64_CPUID_ACCESS_CONTEXT_Rdx_set
    __swig_getmethods__["Rdx"] = _pywinhv.WHV_X64_CPUID_ACCESS_CONTEXT_Rdx_get
    if _newclass:
        Rdx = _swig_property(_pywinhv.WHV_X64_CPUID_ACCESS_CONTEXT_Rdx_get, _pywinhv.WHV_X64_CPUID_ACCESS_CONTEXT_Rdx_set)
    __swig_setmethods__["Rbx"] = _pywinhv.WHV_X64_CPUID_ACCESS_CONTEXT_Rbx_set
    __swig_getmethods__["Rbx"] = _pywinhv.WHV_X64_CPUID_ACCESS_CONTEXT_Rbx_get
    if _newclass:
        Rbx = _swig_property(_pywinhv.WHV_X64_CPUID_ACCESS_CONTEXT_Rbx_get, _pywinhv.WHV_X64_CPUID_ACCESS_CONTEXT_Rbx_set)
    __swig_setmethods__["DefaultResultRax"] = _pywinhv.WHV_X64_CPUID_ACCESS_CONTEXT_DefaultResultRax_set
    __swig_getmethods__["DefaultResultRax"] = _pywinhv.WHV_X64_CPUID_ACCESS_CONTEXT_DefaultResultRax_get
    if _newclass:
        DefaultResultRax = _swig_property(_pywinhv.WHV_X64_CPUID_ACCESS_CONTEXT_DefaultResultRax_get, _pywinhv.WHV_X64_CPUID_ACCESS_CONTEXT_DefaultResultRax_set)
    __swig_setmethods__["DefaultResultRcx"] = _pywinhv.WHV_X64_CPUID_ACCESS_CONTEXT_DefaultResultRcx_set
    __swig_getmethods__["DefaultResultRcx"] = _pywinhv.WHV_X64_CPUID_ACCESS_CONTEXT_DefaultResultRcx_get
    if _newclass:
        DefaultResultRcx = _swig_property(_pywinhv.WHV_X64_CPUID_ACCESS_CONTEXT_DefaultResultRcx_get, _pywinhv.WHV_X64_CPUID_ACCESS_CONTEXT_DefaultResultRcx_set)
    __swig_setmethods__["DefaultResultRdx"] = _pywinhv.WHV_X64_CPUID_ACCESS_CONTEXT_DefaultResultRdx_set
    __swig_getmethods__["DefaultResultRdx"] = _pywinhv.WHV_X64_CPUID_ACCESS_CONTEXT_DefaultResultRdx_get
    if _newclass:
        DefaultResultRdx = _swig_property(_pywinhv.WHV_X64_CPUID_ACCESS_CONTEXT_DefaultResultRdx_get, _pywinhv.WHV_X64_CPUID_ACCESS_CONTEXT_DefaultResultRdx_set)
    __swig_setmethods__["DefaultResultRbx"] = _pywinhv.WHV_X64_CPUID_ACCESS_CONTEXT_DefaultResultRbx_set
    __swig_getmethods__["DefaultResultRbx"] = _pywinhv.WHV_X64_CPUID_ACCESS_CONTEXT_DefaultResultRbx_get
    if _newclass:
        DefaultResultRbx = _swig_property(_pywinhv.WHV_X64_CPUID_ACCESS_CONTEXT_DefaultResultRbx_get, _pywinhv.WHV_X64_CPUID_ACCESS_CONTEXT_DefaultResultRbx_set)

    def __init__(self):
        this = _pywinhv.new_WHV_X64_CPUID_ACCESS_CONTEXT()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywinhv.delete_WHV_X64_CPUID_ACCESS_CONTEXT
    __del__ = lambda self: None
WHV_X64_CPUID_ACCESS_CONTEXT_swigregister = _pywinhv.WHV_X64_CPUID_ACCESS_CONTEXT_swigregister
WHV_X64_CPUID_ACCESS_CONTEXT_swigregister(WHV_X64_CPUID_ACCESS_CONTEXT)

class WHV_VP_EXCEPTION_INFO(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WHV_VP_EXCEPTION_INFO, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WHV_VP_EXCEPTION_INFO, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ErrorCodeValid"] = _pywinhv.WHV_VP_EXCEPTION_INFO_ErrorCodeValid_set
    __swig_getmethods__["ErrorCodeValid"] = _pywinhv.WHV_VP_EXCEPTION_INFO_ErrorCodeValid_get
    if _newclass:
        ErrorCodeValid = _swig_property(_pywinhv.WHV_VP_EXCEPTION_INFO_ErrorCodeValid_get, _pywinhv.WHV_VP_EXCEPTION_INFO_ErrorCodeValid_set)
    __swig_setmethods__["SoftwareException"] = _pywinhv.WHV_VP_EXCEPTION_INFO_SoftwareException_set
    __swig_getmethods__["SoftwareException"] = _pywinhv.WHV_VP_EXCEPTION_INFO_SoftwareException_get
    if _newclass:
        SoftwareException = _swig_property(_pywinhv.WHV_VP_EXCEPTION_INFO_SoftwareException_get, _pywinhv.WHV_VP_EXCEPTION_INFO_SoftwareException_set)
    __swig_setmethods__["Reserved"] = _pywinhv.WHV_VP_EXCEPTION_INFO_Reserved_set
    __swig_getmethods__["Reserved"] = _pywinhv.WHV_VP_EXCEPTION_INFO_Reserved_get
    if _newclass:
        Reserved = _swig_property(_pywinhv.WHV_VP_EXCEPTION_INFO_Reserved_get, _pywinhv.WHV_VP_EXCEPTION_INFO_Reserved_set)
    __swig_setmethods__["AsUINT32"] = _pywinhv.WHV_VP_EXCEPTION_INFO_AsUINT32_set
    __swig_getmethods__["AsUINT32"] = _pywinhv.WHV_VP_EXCEPTION_INFO_AsUINT32_get
    if _newclass:
        AsUINT32 = _swig_property(_pywinhv.WHV_VP_EXCEPTION_INFO_AsUINT32_get, _pywinhv.WHV_VP_EXCEPTION_INFO_AsUINT32_set)

    def __init__(self):
        this = _pywinhv.new_WHV_VP_EXCEPTION_INFO()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywinhv.delete_WHV_VP_EXCEPTION_INFO
    __del__ = lambda self: None
WHV_VP_EXCEPTION_INFO_swigregister = _pywinhv.WHV_VP_EXCEPTION_INFO_swigregister
WHV_VP_EXCEPTION_INFO_swigregister(WHV_VP_EXCEPTION_INFO)

class WHV_VP_EXCEPTION_CONTEXT(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WHV_VP_EXCEPTION_CONTEXT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WHV_VP_EXCEPTION_CONTEXT, name)
    __repr__ = _swig_repr
    __swig_setmethods__["InstructionByteCount"] = _pywinhv.WHV_VP_EXCEPTION_CONTEXT_InstructionByteCount_set
    __swig_getmethods__["InstructionByteCount"] = _pywinhv.WHV_VP_EXCEPTION_CONTEXT_InstructionByteCount_get
    if _newclass:
        InstructionByteCount = _swig_property(_pywinhv.WHV_VP_EXCEPTION_CONTEXT_InstructionByteCount_get, _pywinhv.WHV_VP_EXCEPTION_CONTEXT_InstructionByteCount_set)
    __swig_setmethods__["Reserved"] = _pywinhv.WHV_VP_EXCEPTION_CONTEXT_Reserved_set
    __swig_getmethods__["Reserved"] = _pywinhv.WHV_VP_EXCEPTION_CONTEXT_Reserved_get
    if _newclass:
        Reserved = _swig_property(_pywinhv.WHV_VP_EXCEPTION_CONTEXT_Reserved_get, _pywinhv.WHV_VP_EXCEPTION_CONTEXT_Reserved_set)
    __swig_setmethods__["InstructionBytes"] = _pywinhv.WHV_VP_EXCEPTION_CONTEXT_InstructionBytes_set
    __swig_getmethods__["InstructionBytes"] = _pywinhv.WHV_VP_EXCEPTION_CONTEXT_InstructionBytes_get
    if _newclass:
        InstructionBytes = _swig_property(_pywinhv.WHV_VP_EXCEPTION_CONTEXT_InstructionBytes_get, _pywinhv.WHV_VP_EXCEPTION_CONTEXT_InstructionBytes_set)
    __swig_setmethods__["ExceptionInfo"] = _pywinhv.WHV_VP_EXCEPTION_CONTEXT_ExceptionInfo_set
    __swig_getmethods__["ExceptionInfo"] = _pywinhv.WHV_VP_EXCEPTION_CONTEXT_ExceptionInfo_get
    if _newclass:
        ExceptionInfo = _swig_property(_pywinhv.WHV_VP_EXCEPTION_CONTEXT_ExceptionInfo_get, _pywinhv.WHV_VP_EXCEPTION_CONTEXT_ExceptionInfo_set)
    __swig_setmethods__["ExceptionType"] = _pywinhv.WHV_VP_EXCEPTION_CONTEXT_ExceptionType_set
    __swig_getmethods__["ExceptionType"] = _pywinhv.WHV_VP_EXCEPTION_CONTEXT_ExceptionType_get
    if _newclass:
        ExceptionType = _swig_property(_pywinhv.WHV_VP_EXCEPTION_CONTEXT_ExceptionType_get, _pywinhv.WHV_VP_EXCEPTION_CONTEXT_ExceptionType_set)
    __swig_setmethods__["Reserved2"] = _pywinhv.WHV_VP_EXCEPTION_CONTEXT_Reserved2_set
    __swig_getmethods__["Reserved2"] = _pywinhv.WHV_VP_EXCEPTION_CONTEXT_Reserved2_get
    if _newclass:
        Reserved2 = _swig_property(_pywinhv.WHV_VP_EXCEPTION_CONTEXT_Reserved2_get, _pywinhv.WHV_VP_EXCEPTION_CONTEXT_Reserved2_set)
    __swig_setmethods__["ErrorCode"] = _pywinhv.WHV_VP_EXCEPTION_CONTEXT_ErrorCode_set
    __swig_getmethods__["ErrorCode"] = _pywinhv.WHV_VP_EXCEPTION_CONTEXT_ErrorCode_get
    if _newclass:
        ErrorCode = _swig_property(_pywinhv.WHV_VP_EXCEPTION_CONTEXT_ErrorCode_get, _pywinhv.WHV_VP_EXCEPTION_CONTEXT_ErrorCode_set)
    __swig_setmethods__["ExceptionParameter"] = _pywinhv.WHV_VP_EXCEPTION_CONTEXT_ExceptionParameter_set
    __swig_getmethods__["ExceptionParameter"] = _pywinhv.WHV_VP_EXCEPTION_CONTEXT_ExceptionParameter_get
    if _newclass:
        ExceptionParameter = _swig_property(_pywinhv.WHV_VP_EXCEPTION_CONTEXT_ExceptionParameter_get, _pywinhv.WHV_VP_EXCEPTION_CONTEXT_ExceptionParameter_set)

    def __init__(self):
        this = _pywinhv.new_WHV_VP_EXCEPTION_CONTEXT()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywinhv.delete_WHV_VP_EXCEPTION_CONTEXT
    __del__ = lambda self: None
WHV_VP_EXCEPTION_CONTEXT_swigregister = _pywinhv.WHV_VP_EXCEPTION_CONTEXT_swigregister
WHV_VP_EXCEPTION_CONTEXT_swigregister(WHV_VP_EXCEPTION_CONTEXT)

WHvUnsupportedFeatureIntercept = _pywinhv.WHvUnsupportedFeatureIntercept
WHvUnsupportedFeatureTaskSwitchTss = _pywinhv.WHvUnsupportedFeatureTaskSwitchTss
class WHV_X64_UNSUPPORTED_FEATURE_CONTEXT(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WHV_X64_UNSUPPORTED_FEATURE_CONTEXT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WHV_X64_UNSUPPORTED_FEATURE_CONTEXT, name)
    __repr__ = _swig_repr
    __swig_setmethods__["FeatureCode"] = _pywinhv.WHV_X64_UNSUPPORTED_FEATURE_CONTEXT_FeatureCode_set
    __swig_getmethods__["FeatureCode"] = _pywinhv.WHV_X64_UNSUPPORTED_FEATURE_CONTEXT_FeatureCode_get
    if _newclass:
        FeatureCode = _swig_property(_pywinhv.WHV_X64_UNSUPPORTED_FEATURE_CONTEXT_FeatureCode_get, _pywinhv.WHV_X64_UNSUPPORTED_FEATURE_CONTEXT_FeatureCode_set)
    __swig_setmethods__["Reserved"] = _pywinhv.WHV_X64_UNSUPPORTED_FEATURE_CONTEXT_Reserved_set
    __swig_getmethods__["Reserved"] = _pywinhv.WHV_X64_UNSUPPORTED_FEATURE_CONTEXT_Reserved_get
    if _newclass:
        Reserved = _swig_property(_pywinhv.WHV_X64_UNSUPPORTED_FEATURE_CONTEXT_Reserved_get, _pywinhv.WHV_X64_UNSUPPORTED_FEATURE_CONTEXT_Reserved_set)
    __swig_setmethods__["FeatureParameter"] = _pywinhv.WHV_X64_UNSUPPORTED_FEATURE_CONTEXT_FeatureParameter_set
    __swig_getmethods__["FeatureParameter"] = _pywinhv.WHV_X64_UNSUPPORTED_FEATURE_CONTEXT_FeatureParameter_get
    if _newclass:
        FeatureParameter = _swig_property(_pywinhv.WHV_X64_UNSUPPORTED_FEATURE_CONTEXT_FeatureParameter_get, _pywinhv.WHV_X64_UNSUPPORTED_FEATURE_CONTEXT_FeatureParameter_set)

    def __init__(self):
        this = _pywinhv.new_WHV_X64_UNSUPPORTED_FEATURE_CONTEXT()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywinhv.delete_WHV_X64_UNSUPPORTED_FEATURE_CONTEXT
    __del__ = lambda self: None
WHV_X64_UNSUPPORTED_FEATURE_CONTEXT_swigregister = _pywinhv.WHV_X64_UNSUPPORTED_FEATURE_CONTEXT_swigregister
WHV_X64_UNSUPPORTED_FEATURE_CONTEXT_swigregister(WHV_X64_UNSUPPORTED_FEATURE_CONTEXT)

WhvRunVpCancelReasonUser = _pywinhv.WhvRunVpCancelReasonUser
class WHV_RUN_VP_CANCELED_CONTEXT(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WHV_RUN_VP_CANCELED_CONTEXT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WHV_RUN_VP_CANCELED_CONTEXT, name)
    __repr__ = _swig_repr
    __swig_setmethods__["CancelReason"] = _pywinhv.WHV_RUN_VP_CANCELED_CONTEXT_CancelReason_set
    __swig_getmethods__["CancelReason"] = _pywinhv.WHV_RUN_VP_CANCELED_CONTEXT_CancelReason_get
    if _newclass:
        CancelReason = _swig_property(_pywinhv.WHV_RUN_VP_CANCELED_CONTEXT_CancelReason_get, _pywinhv.WHV_RUN_VP_CANCELED_CONTEXT_CancelReason_set)

    def __init__(self):
        this = _pywinhv.new_WHV_RUN_VP_CANCELED_CONTEXT()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywinhv.delete_WHV_RUN_VP_CANCELED_CONTEXT
    __del__ = lambda self: None
WHV_RUN_VP_CANCELED_CONTEXT_swigregister = _pywinhv.WHV_RUN_VP_CANCELED_CONTEXT_swigregister
WHV_RUN_VP_CANCELED_CONTEXT_swigregister(WHV_RUN_VP_CANCELED_CONTEXT)

WHvX64PendingInterrupt = _pywinhv.WHvX64PendingInterrupt
WHvX64PendingNmi = _pywinhv.WHvX64PendingNmi
WHvX64PendingException = _pywinhv.WHvX64PendingException
class WHV_X64_INTERRUPTION_DELIVERABLE_CONTEXT(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WHV_X64_INTERRUPTION_DELIVERABLE_CONTEXT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WHV_X64_INTERRUPTION_DELIVERABLE_CONTEXT, name)
    __repr__ = _swig_repr
    __swig_setmethods__["DeliverableType"] = _pywinhv.WHV_X64_INTERRUPTION_DELIVERABLE_CONTEXT_DeliverableType_set
    __swig_getmethods__["DeliverableType"] = _pywinhv.WHV_X64_INTERRUPTION_DELIVERABLE_CONTEXT_DeliverableType_get
    if _newclass:
        DeliverableType = _swig_property(_pywinhv.WHV_X64_INTERRUPTION_DELIVERABLE_CONTEXT_DeliverableType_get, _pywinhv.WHV_X64_INTERRUPTION_DELIVERABLE_CONTEXT_DeliverableType_set)

    def __init__(self):
        this = _pywinhv.new_WHV_X64_INTERRUPTION_DELIVERABLE_CONTEXT()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywinhv.delete_WHV_X64_INTERRUPTION_DELIVERABLE_CONTEXT
    __del__ = lambda self: None
WHV_X64_INTERRUPTION_DELIVERABLE_CONTEXT_swigregister = _pywinhv.WHV_X64_INTERRUPTION_DELIVERABLE_CONTEXT_swigregister
WHV_X64_INTERRUPTION_DELIVERABLE_CONTEXT_swigregister(WHV_X64_INTERRUPTION_DELIVERABLE_CONTEXT)

class WHV_X64_APIC_EOI_CONTEXT(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WHV_X64_APIC_EOI_CONTEXT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WHV_X64_APIC_EOI_CONTEXT, name)
    __repr__ = _swig_repr
    __swig_setmethods__["InterruptVector"] = _pywinhv.WHV_X64_APIC_EOI_CONTEXT_InterruptVector_set
    __swig_getmethods__["InterruptVector"] = _pywinhv.WHV_X64_APIC_EOI_CONTEXT_InterruptVector_get
    if _newclass:
        InterruptVector = _swig_property(_pywinhv.WHV_X64_APIC_EOI_CONTEXT_InterruptVector_get, _pywinhv.WHV_X64_APIC_EOI_CONTEXT_InterruptVector_set)

    def __init__(self):
        this = _pywinhv.new_WHV_X64_APIC_EOI_CONTEXT()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywinhv.delete_WHV_X64_APIC_EOI_CONTEXT
    __del__ = lambda self: None
WHV_X64_APIC_EOI_CONTEXT_swigregister = _pywinhv.WHV_X64_APIC_EOI_CONTEXT_swigregister
WHV_X64_APIC_EOI_CONTEXT_swigregister(WHV_X64_APIC_EOI_CONTEXT)

class WHV_RUN_VP_EXIT_CONTEXT(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WHV_RUN_VP_EXIT_CONTEXT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WHV_RUN_VP_EXIT_CONTEXT, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ExitReason"] = _pywinhv.WHV_RUN_VP_EXIT_CONTEXT_ExitReason_set
    __swig_getmethods__["ExitReason"] = _pywinhv.WHV_RUN_VP_EXIT_CONTEXT_ExitReason_get
    if _newclass:
        ExitReason = _swig_property(_pywinhv.WHV_RUN_VP_EXIT_CONTEXT_ExitReason_get, _pywinhv.WHV_RUN_VP_EXIT_CONTEXT_ExitReason_set)
    __swig_setmethods__["Reserved"] = _pywinhv.WHV_RUN_VP_EXIT_CONTEXT_Reserved_set
    __swig_getmethods__["Reserved"] = _pywinhv.WHV_RUN_VP_EXIT_CONTEXT_Reserved_get
    if _newclass:
        Reserved = _swig_property(_pywinhv.WHV_RUN_VP_EXIT_CONTEXT_Reserved_get, _pywinhv.WHV_RUN_VP_EXIT_CONTEXT_Reserved_set)
    __swig_setmethods__["VpContext"] = _pywinhv.WHV_RUN_VP_EXIT_CONTEXT_VpContext_set
    __swig_getmethods__["VpContext"] = _pywinhv.WHV_RUN_VP_EXIT_CONTEXT_VpContext_get
    if _newclass:
        VpContext = _swig_property(_pywinhv.WHV_RUN_VP_EXIT_CONTEXT_VpContext_get, _pywinhv.WHV_RUN_VP_EXIT_CONTEXT_VpContext_set)
    __swig_setmethods__["MemoryAccess"] = _pywinhv.WHV_RUN_VP_EXIT_CONTEXT_MemoryAccess_set
    __swig_getmethods__["MemoryAccess"] = _pywinhv.WHV_RUN_VP_EXIT_CONTEXT_MemoryAccess_get
    if _newclass:
        MemoryAccess = _swig_property(_pywinhv.WHV_RUN_VP_EXIT_CONTEXT_MemoryAccess_get, _pywinhv.WHV_RUN_VP_EXIT_CONTEXT_MemoryAccess_set)
    __swig_setmethods__["IoPortAccess"] = _pywinhv.WHV_RUN_VP_EXIT_CONTEXT_IoPortAccess_set
    __swig_getmethods__["IoPortAccess"] = _pywinhv.WHV_RUN_VP_EXIT_CONTEXT_IoPortAccess_get
    if _newclass:
        IoPortAccess = _swig_property(_pywinhv.WHV_RUN_VP_EXIT_CONTEXT_IoPortAccess_get, _pywinhv.WHV_RUN_VP_EXIT_CONTEXT_IoPortAccess_set)
    __swig_setmethods__["MsrAccess"] = _pywinhv.WHV_RUN_VP_EXIT_CONTEXT_MsrAccess_set
    __swig_getmethods__["MsrAccess"] = _pywinhv.WHV_RUN_VP_EXIT_CONTEXT_MsrAccess_get
    if _newclass:
        MsrAccess = _swig_property(_pywinhv.WHV_RUN_VP_EXIT_CONTEXT_MsrAccess_get, _pywinhv.WHV_RUN_VP_EXIT_CONTEXT_MsrAccess_set)
    __swig_setmethods__["CpuidAccess"] = _pywinhv.WHV_RUN_VP_EXIT_CONTEXT_CpuidAccess_set
    __swig_getmethods__["CpuidAccess"] = _pywinhv.WHV_RUN_VP_EXIT_CONTEXT_CpuidAccess_get
    if _newclass:
        CpuidAccess = _swig_property(_pywinhv.WHV_RUN_VP_EXIT_CONTEXT_CpuidAccess_get, _pywinhv.WHV_RUN_VP_EXIT_CONTEXT_CpuidAccess_set)
    __swig_setmethods__["VpException"] = _pywinhv.WHV_RUN_VP_EXIT_CONTEXT_VpException_set
    __swig_getmethods__["VpException"] = _pywinhv.WHV_RUN_VP_EXIT_CONTEXT_VpException_get
    if _newclass:
        VpException = _swig_property(_pywinhv.WHV_RUN_VP_EXIT_CONTEXT_VpException_get, _pywinhv.WHV_RUN_VP_EXIT_CONTEXT_VpException_set)
    __swig_setmethods__["InterruptWindow"] = _pywinhv.WHV_RUN_VP_EXIT_CONTEXT_InterruptWindow_set
    __swig_getmethods__["InterruptWindow"] = _pywinhv.WHV_RUN_VP_EXIT_CONTEXT_InterruptWindow_get
    if _newclass:
        InterruptWindow = _swig_property(_pywinhv.WHV_RUN_VP_EXIT_CONTEXT_InterruptWindow_get, _pywinhv.WHV_RUN_VP_EXIT_CONTEXT_InterruptWindow_set)
    __swig_setmethods__["UnsupportedFeature"] = _pywinhv.WHV_RUN_VP_EXIT_CONTEXT_UnsupportedFeature_set
    __swig_getmethods__["UnsupportedFeature"] = _pywinhv.WHV_RUN_VP_EXIT_CONTEXT_UnsupportedFeature_get
    if _newclass:
        UnsupportedFeature = _swig_property(_pywinhv.WHV_RUN_VP_EXIT_CONTEXT_UnsupportedFeature_get, _pywinhv.WHV_RUN_VP_EXIT_CONTEXT_UnsupportedFeature_set)
    __swig_setmethods__["CancelReason"] = _pywinhv.WHV_RUN_VP_EXIT_CONTEXT_CancelReason_set
    __swig_getmethods__["CancelReason"] = _pywinhv.WHV_RUN_VP_EXIT_CONTEXT_CancelReason_get
    if _newclass:
        CancelReason = _swig_property(_pywinhv.WHV_RUN_VP_EXIT_CONTEXT_CancelReason_get, _pywinhv.WHV_RUN_VP_EXIT_CONTEXT_CancelReason_set)
    __swig_setmethods__["ApicEoi"] = _pywinhv.WHV_RUN_VP_EXIT_CONTEXT_ApicEoi_set
    __swig_getmethods__["ApicEoi"] = _pywinhv.WHV_RUN_VP_EXIT_CONTEXT_ApicEoi_get
    if _newclass:
        ApicEoi = _swig_property(_pywinhv.WHV_RUN_VP_EXIT_CONTEXT_ApicEoi_get, _pywinhv.WHV_RUN_VP_EXIT_CONTEXT_ApicEoi_set)

    def __len__(self):
        return _pywinhv.WHV_RUN_VP_EXIT_CONTEXT___len__(self)

    def __init__(self):
        this = _pywinhv.new_WHV_RUN_VP_EXIT_CONTEXT()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywinhv.delete_WHV_RUN_VP_EXIT_CONTEXT
    __del__ = lambda self: None
WHV_RUN_VP_EXIT_CONTEXT_swigregister = _pywinhv.WHV_RUN_VP_EXIT_CONTEXT_swigregister
WHV_RUN_VP_EXIT_CONTEXT_swigregister(WHV_RUN_VP_EXIT_CONTEXT)

WHvX64InterruptTypeFixed = _pywinhv.WHvX64InterruptTypeFixed
WHvX64InterruptTypeLowestPriority = _pywinhv.WHvX64InterruptTypeLowestPriority
WHvX64InterruptTypeNmi = _pywinhv.WHvX64InterruptTypeNmi
WHvX64InterruptTypeInit = _pywinhv.WHvX64InterruptTypeInit
WHvX64InterruptTypeSipi = _pywinhv.WHvX64InterruptTypeSipi
WHvX64InterruptTypeLocalInt1 = _pywinhv.WHvX64InterruptTypeLocalInt1
WHvX64InterruptDestinationModePhysical = _pywinhv.WHvX64InterruptDestinationModePhysical
WHvX64InterruptDestinationModeLogical = _pywinhv.WHvX64InterruptDestinationModeLogical
WHvX64InterruptTriggerModeEdge = _pywinhv.WHvX64InterruptTriggerModeEdge
WHvX64InterruptTriggerModeLevel = _pywinhv.WHvX64InterruptTriggerModeLevel
class WHV_INTERRUPT_CONTROL(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WHV_INTERRUPT_CONTROL, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WHV_INTERRUPT_CONTROL, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Type"] = _pywinhv.WHV_INTERRUPT_CONTROL_Type_set
    __swig_getmethods__["Type"] = _pywinhv.WHV_INTERRUPT_CONTROL_Type_get
    if _newclass:
        Type = _swig_property(_pywinhv.WHV_INTERRUPT_CONTROL_Type_get, _pywinhv.WHV_INTERRUPT_CONTROL_Type_set)
    __swig_setmethods__["DestinationMode"] = _pywinhv.WHV_INTERRUPT_CONTROL_DestinationMode_set
    __swig_getmethods__["DestinationMode"] = _pywinhv.WHV_INTERRUPT_CONTROL_DestinationMode_get
    if _newclass:
        DestinationMode = _swig_property(_pywinhv.WHV_INTERRUPT_CONTROL_DestinationMode_get, _pywinhv.WHV_INTERRUPT_CONTROL_DestinationMode_set)
    __swig_setmethods__["TriggerMode"] = _pywinhv.WHV_INTERRUPT_CONTROL_TriggerMode_set
    __swig_getmethods__["TriggerMode"] = _pywinhv.WHV_INTERRUPT_CONTROL_TriggerMode_get
    if _newclass:
        TriggerMode = _swig_property(_pywinhv.WHV_INTERRUPT_CONTROL_TriggerMode_get, _pywinhv.WHV_INTERRUPT_CONTROL_TriggerMode_set)
    __swig_setmethods__["Reserved"] = _pywinhv.WHV_INTERRUPT_CONTROL_Reserved_set
    __swig_getmethods__["Reserved"] = _pywinhv.WHV_INTERRUPT_CONTROL_Reserved_get
    if _newclass:
        Reserved = _swig_property(_pywinhv.WHV_INTERRUPT_CONTROL_Reserved_get, _pywinhv.WHV_INTERRUPT_CONTROL_Reserved_set)
    __swig_setmethods__["Destination"] = _pywinhv.WHV_INTERRUPT_CONTROL_Destination_set
    __swig_getmethods__["Destination"] = _pywinhv.WHV_INTERRUPT_CONTROL_Destination_get
    if _newclass:
        Destination = _swig_property(_pywinhv.WHV_INTERRUPT_CONTROL_Destination_get, _pywinhv.WHV_INTERRUPT_CONTROL_Destination_set)
    __swig_setmethods__["Vector"] = _pywinhv.WHV_INTERRUPT_CONTROL_Vector_set
    __swig_getmethods__["Vector"] = _pywinhv.WHV_INTERRUPT_CONTROL_Vector_get
    if _newclass:
        Vector = _swig_property(_pywinhv.WHV_INTERRUPT_CONTROL_Vector_get, _pywinhv.WHV_INTERRUPT_CONTROL_Vector_set)

    def __init__(self):
        this = _pywinhv.new_WHV_INTERRUPT_CONTROL()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywinhv.delete_WHV_INTERRUPT_CONTROL
    __del__ = lambda self: None
WHV_INTERRUPT_CONTROL_swigregister = _pywinhv.WHV_INTERRUPT_CONTROL_swigregister
WHV_INTERRUPT_CONTROL_swigregister(WHV_INTERRUPT_CONTROL)

WHvPartitionCounterSetMemory = _pywinhv.WHvPartitionCounterSetMemory
class WHV_PARTITION_MEMORY_COUNTERS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WHV_PARTITION_MEMORY_COUNTERS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WHV_PARTITION_MEMORY_COUNTERS, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Mapped4KPageCount"] = _pywinhv.WHV_PARTITION_MEMORY_COUNTERS_Mapped4KPageCount_set
    __swig_getmethods__["Mapped4KPageCount"] = _pywinhv.WHV_PARTITION_MEMORY_COUNTERS_Mapped4KPageCount_get
    if _newclass:
        Mapped4KPageCount = _swig_property(_pywinhv.WHV_PARTITION_MEMORY_COUNTERS_Mapped4KPageCount_get, _pywinhv.WHV_PARTITION_MEMORY_COUNTERS_Mapped4KPageCount_set)
    __swig_setmethods__["Mapped2MPageCount"] = _pywinhv.WHV_PARTITION_MEMORY_COUNTERS_Mapped2MPageCount_set
    __swig_getmethods__["Mapped2MPageCount"] = _pywinhv.WHV_PARTITION_MEMORY_COUNTERS_Mapped2MPageCount_get
    if _newclass:
        Mapped2MPageCount = _swig_property(_pywinhv.WHV_PARTITION_MEMORY_COUNTERS_Mapped2MPageCount_get, _pywinhv.WHV_PARTITION_MEMORY_COUNTERS_Mapped2MPageCount_set)
    __swig_setmethods__["Mapped1GPageCount"] = _pywinhv.WHV_PARTITION_MEMORY_COUNTERS_Mapped1GPageCount_set
    __swig_getmethods__["Mapped1GPageCount"] = _pywinhv.WHV_PARTITION_MEMORY_COUNTERS_Mapped1GPageCount_get
    if _newclass:
        Mapped1GPageCount = _swig_property(_pywinhv.WHV_PARTITION_MEMORY_COUNTERS_Mapped1GPageCount_get, _pywinhv.WHV_PARTITION_MEMORY_COUNTERS_Mapped1GPageCount_set)

    def __len__(self):
        return _pywinhv.WHV_PARTITION_MEMORY_COUNTERS___len__(self)

    def __init__(self):
        this = _pywinhv.new_WHV_PARTITION_MEMORY_COUNTERS()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywinhv.delete_WHV_PARTITION_MEMORY_COUNTERS
    __del__ = lambda self: None
WHV_PARTITION_MEMORY_COUNTERS_swigregister = _pywinhv.WHV_PARTITION_MEMORY_COUNTERS_swigregister
WHV_PARTITION_MEMORY_COUNTERS_swigregister(WHV_PARTITION_MEMORY_COUNTERS)

WHvProcessorCounterSetRuntime = _pywinhv.WHvProcessorCounterSetRuntime
WHvProcessorCounterSetIntercepts = _pywinhv.WHvProcessorCounterSetIntercepts
WHvProcessorCounterSetEvents = _pywinhv.WHvProcessorCounterSetEvents
WHvProcessorCounterSetApic = _pywinhv.WHvProcessorCounterSetApic
class WHV_PROCESSOR_RUNTIME_COUNTERS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WHV_PROCESSOR_RUNTIME_COUNTERS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WHV_PROCESSOR_RUNTIME_COUNTERS, name)
    __repr__ = _swig_repr
    __swig_setmethods__["TotalRuntime100ns"] = _pywinhv.WHV_PROCESSOR_RUNTIME_COUNTERS_TotalRuntime100ns_set
    __swig_getmethods__["TotalRuntime100ns"] = _pywinhv.WHV_PROCESSOR_RUNTIME_COUNTERS_TotalRuntime100ns_get
    if _newclass:
        TotalRuntime100ns = _swig_property(_pywinhv.WHV_PROCESSOR_RUNTIME_COUNTERS_TotalRuntime100ns_get, _pywinhv.WHV_PROCESSOR_RUNTIME_COUNTERS_TotalRuntime100ns_set)
    __swig_setmethods__["HypervisorRuntime100ns"] = _pywinhv.WHV_PROCESSOR_RUNTIME_COUNTERS_HypervisorRuntime100ns_set
    __swig_getmethods__["HypervisorRuntime100ns"] = _pywinhv.WHV_PROCESSOR_RUNTIME_COUNTERS_HypervisorRuntime100ns_get
    if _newclass:
        HypervisorRuntime100ns = _swig_property(_pywinhv.WHV_PROCESSOR_RUNTIME_COUNTERS_HypervisorRuntime100ns_get, _pywinhv.WHV_PROCESSOR_RUNTIME_COUNTERS_HypervisorRuntime100ns_set)

    def __init__(self):
        this = _pywinhv.new_WHV_PROCESSOR_RUNTIME_COUNTERS()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywinhv.delete_WHV_PROCESSOR_RUNTIME_COUNTERS
    __del__ = lambda self: None
WHV_PROCESSOR_RUNTIME_COUNTERS_swigregister = _pywinhv.WHV_PROCESSOR_RUNTIME_COUNTERS_swigregister
WHV_PROCESSOR_RUNTIME_COUNTERS_swigregister(WHV_PROCESSOR_RUNTIME_COUNTERS)

class WHV_PROCESSOR_INTERCEPT_COUNTER(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WHV_PROCESSOR_INTERCEPT_COUNTER, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WHV_PROCESSOR_INTERCEPT_COUNTER, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Count"] = _pywinhv.WHV_PROCESSOR_INTERCEPT_COUNTER_Count_set
    __swig_getmethods__["Count"] = _pywinhv.WHV_PROCESSOR_INTERCEPT_COUNTER_Count_get
    if _newclass:
        Count = _swig_property(_pywinhv.WHV_PROCESSOR_INTERCEPT_COUNTER_Count_get, _pywinhv.WHV_PROCESSOR_INTERCEPT_COUNTER_Count_set)
    __swig_setmethods__["Time100ns"] = _pywinhv.WHV_PROCESSOR_INTERCEPT_COUNTER_Time100ns_set
    __swig_getmethods__["Time100ns"] = _pywinhv.WHV_PROCESSOR_INTERCEPT_COUNTER_Time100ns_get
    if _newclass:
        Time100ns = _swig_property(_pywinhv.WHV_PROCESSOR_INTERCEPT_COUNTER_Time100ns_get, _pywinhv.WHV_PROCESSOR_INTERCEPT_COUNTER_Time100ns_set)

    def __init__(self):
        this = _pywinhv.new_WHV_PROCESSOR_INTERCEPT_COUNTER()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywinhv.delete_WHV_PROCESSOR_INTERCEPT_COUNTER
    __del__ = lambda self: None
WHV_PROCESSOR_INTERCEPT_COUNTER_swigregister = _pywinhv.WHV_PROCESSOR_INTERCEPT_COUNTER_swigregister
WHV_PROCESSOR_INTERCEPT_COUNTER_swigregister(WHV_PROCESSOR_INTERCEPT_COUNTER)

class WHV_PROCESSOR_ACTIVITY_COUNTERS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WHV_PROCESSOR_ACTIVITY_COUNTERS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WHV_PROCESSOR_ACTIVITY_COUNTERS, name)
    __repr__ = _swig_repr
    __swig_setmethods__["PageInvalidations"] = _pywinhv.WHV_PROCESSOR_ACTIVITY_COUNTERS_PageInvalidations_set
    __swig_getmethods__["PageInvalidations"] = _pywinhv.WHV_PROCESSOR_ACTIVITY_COUNTERS_PageInvalidations_get
    if _newclass:
        PageInvalidations = _swig_property(_pywinhv.WHV_PROCESSOR_ACTIVITY_COUNTERS_PageInvalidations_get, _pywinhv.WHV_PROCESSOR_ACTIVITY_COUNTERS_PageInvalidations_set)
    __swig_setmethods__["ControlRegisterAccesses"] = _pywinhv.WHV_PROCESSOR_ACTIVITY_COUNTERS_ControlRegisterAccesses_set
    __swig_getmethods__["ControlRegisterAccesses"] = _pywinhv.WHV_PROCESSOR_ACTIVITY_COUNTERS_ControlRegisterAccesses_get
    if _newclass:
        ControlRegisterAccesses = _swig_property(_pywinhv.WHV_PROCESSOR_ACTIVITY_COUNTERS_ControlRegisterAccesses_get, _pywinhv.WHV_PROCESSOR_ACTIVITY_COUNTERS_ControlRegisterAccesses_set)
    __swig_setmethods__["IoInstructions"] = _pywinhv.WHV_PROCESSOR_ACTIVITY_COUNTERS_IoInstructions_set
    __swig_getmethods__["IoInstructions"] = _pywinhv.WHV_PROCESSOR_ACTIVITY_COUNTERS_IoInstructions_get
    if _newclass:
        IoInstructions = _swig_property(_pywinhv.WHV_PROCESSOR_ACTIVITY_COUNTERS_IoInstructions_get, _pywinhv.WHV_PROCESSOR_ACTIVITY_COUNTERS_IoInstructions_set)
    __swig_setmethods__["HaltInstructions"] = _pywinhv.WHV_PROCESSOR_ACTIVITY_COUNTERS_HaltInstructions_set
    __swig_getmethods__["HaltInstructions"] = _pywinhv.WHV_PROCESSOR_ACTIVITY_COUNTERS_HaltInstructions_get
    if _newclass:
        HaltInstructions = _swig_property(_pywinhv.WHV_PROCESSOR_ACTIVITY_COUNTERS_HaltInstructions_get, _pywinhv.WHV_PROCESSOR_ACTIVITY_COUNTERS_HaltInstructions_set)
    __swig_setmethods__["CpuidInstructions"] = _pywinhv.WHV_PROCESSOR_ACTIVITY_COUNTERS_CpuidInstructions_set
    __swig_getmethods__["CpuidInstructions"] = _pywinhv.WHV_PROCESSOR_ACTIVITY_COUNTERS_CpuidInstructions_get
    if _newclass:
        CpuidInstructions = _swig_property(_pywinhv.WHV_PROCESSOR_ACTIVITY_COUNTERS_CpuidInstructions_get, _pywinhv.WHV_PROCESSOR_ACTIVITY_COUNTERS_CpuidInstructions_set)
    __swig_setmethods__["MsrAccesses"] = _pywinhv.WHV_PROCESSOR_ACTIVITY_COUNTERS_MsrAccesses_set
    __swig_getmethods__["MsrAccesses"] = _pywinhv.WHV_PROCESSOR_ACTIVITY_COUNTERS_MsrAccesses_get
    if _newclass:
        MsrAccesses = _swig_property(_pywinhv.WHV_PROCESSOR_ACTIVITY_COUNTERS_MsrAccesses_get, _pywinhv.WHV_PROCESSOR_ACTIVITY_COUNTERS_MsrAccesses_set)
    __swig_setmethods__["OtherIntercepts"] = _pywinhv.WHV_PROCESSOR_ACTIVITY_COUNTERS_OtherIntercepts_set
    __swig_getmethods__["OtherIntercepts"] = _pywinhv.WHV_PROCESSOR_ACTIVITY_COUNTERS_OtherIntercepts_get
    if _newclass:
        OtherIntercepts = _swig_property(_pywinhv.WHV_PROCESSOR_ACTIVITY_COUNTERS_OtherIntercepts_get, _pywinhv.WHV_PROCESSOR_ACTIVITY_COUNTERS_OtherIntercepts_set)
    __swig_setmethods__["PendingInterrupts"] = _pywinhv.WHV_PROCESSOR_ACTIVITY_COUNTERS_PendingInterrupts_set
    __swig_getmethods__["PendingInterrupts"] = _pywinhv.WHV_PROCESSOR_ACTIVITY_COUNTERS_PendingInterrupts_get
    if _newclass:
        PendingInterrupts = _swig_property(_pywinhv.WHV_PROCESSOR_ACTIVITY_COUNTERS_PendingInterrupts_get, _pywinhv.WHV_PROCESSOR_ACTIVITY_COUNTERS_PendingInterrupts_set)
    __swig_setmethods__["EmulatedInstructions"] = _pywinhv.WHV_PROCESSOR_ACTIVITY_COUNTERS_EmulatedInstructions_set
    __swig_getmethods__["EmulatedInstructions"] = _pywinhv.WHV_PROCESSOR_ACTIVITY_COUNTERS_EmulatedInstructions_get
    if _newclass:
        EmulatedInstructions = _swig_property(_pywinhv.WHV_PROCESSOR_ACTIVITY_COUNTERS_EmulatedInstructions_get, _pywinhv.WHV_PROCESSOR_ACTIVITY_COUNTERS_EmulatedInstructions_set)
    __swig_setmethods__["DebugRegisterAccesses"] = _pywinhv.WHV_PROCESSOR_ACTIVITY_COUNTERS_DebugRegisterAccesses_set
    __swig_getmethods__["DebugRegisterAccesses"] = _pywinhv.WHV_PROCESSOR_ACTIVITY_COUNTERS_DebugRegisterAccesses_get
    if _newclass:
        DebugRegisterAccesses = _swig_property(_pywinhv.WHV_PROCESSOR_ACTIVITY_COUNTERS_DebugRegisterAccesses_get, _pywinhv.WHV_PROCESSOR_ACTIVITY_COUNTERS_DebugRegisterAccesses_set)
    __swig_setmethods__["PageFaultIntercepts"] = _pywinhv.WHV_PROCESSOR_ACTIVITY_COUNTERS_PageFaultIntercepts_set
    __swig_getmethods__["PageFaultIntercepts"] = _pywinhv.WHV_PROCESSOR_ACTIVITY_COUNTERS_PageFaultIntercepts_get
    if _newclass:
        PageFaultIntercepts = _swig_property(_pywinhv.WHV_PROCESSOR_ACTIVITY_COUNTERS_PageFaultIntercepts_get, _pywinhv.WHV_PROCESSOR_ACTIVITY_COUNTERS_PageFaultIntercepts_set)

    def __init__(self):
        this = _pywinhv.new_WHV_PROCESSOR_ACTIVITY_COUNTERS()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywinhv.delete_WHV_PROCESSOR_ACTIVITY_COUNTERS
    __del__ = lambda self: None
WHV_PROCESSOR_ACTIVITY_COUNTERS_swigregister = _pywinhv.WHV_PROCESSOR_ACTIVITY_COUNTERS_swigregister
WHV_PROCESSOR_ACTIVITY_COUNTERS_swigregister(WHV_PROCESSOR_ACTIVITY_COUNTERS)

class WHV_PROCESSOR_GUEST_EVENT_COUNTERS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WHV_PROCESSOR_GUEST_EVENT_COUNTERS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WHV_PROCESSOR_GUEST_EVENT_COUNTERS, name)
    __repr__ = _swig_repr
    __swig_setmethods__["PageFaultCount"] = _pywinhv.WHV_PROCESSOR_GUEST_EVENT_COUNTERS_PageFaultCount_set
    __swig_getmethods__["PageFaultCount"] = _pywinhv.WHV_PROCESSOR_GUEST_EVENT_COUNTERS_PageFaultCount_get
    if _newclass:
        PageFaultCount = _swig_property(_pywinhv.WHV_PROCESSOR_GUEST_EVENT_COUNTERS_PageFaultCount_get, _pywinhv.WHV_PROCESSOR_GUEST_EVENT_COUNTERS_PageFaultCount_set)
    __swig_setmethods__["ExceptionCount"] = _pywinhv.WHV_PROCESSOR_GUEST_EVENT_COUNTERS_ExceptionCount_set
    __swig_getmethods__["ExceptionCount"] = _pywinhv.WHV_PROCESSOR_GUEST_EVENT_COUNTERS_ExceptionCount_get
    if _newclass:
        ExceptionCount = _swig_property(_pywinhv.WHV_PROCESSOR_GUEST_EVENT_COUNTERS_ExceptionCount_get, _pywinhv.WHV_PROCESSOR_GUEST_EVENT_COUNTERS_ExceptionCount_set)
    __swig_setmethods__["InterruptCount"] = _pywinhv.WHV_PROCESSOR_GUEST_EVENT_COUNTERS_InterruptCount_set
    __swig_getmethods__["InterruptCount"] = _pywinhv.WHV_PROCESSOR_GUEST_EVENT_COUNTERS_InterruptCount_get
    if _newclass:
        InterruptCount = _swig_property(_pywinhv.WHV_PROCESSOR_GUEST_EVENT_COUNTERS_InterruptCount_get, _pywinhv.WHV_PROCESSOR_GUEST_EVENT_COUNTERS_InterruptCount_set)

    def __init__(self):
        this = _pywinhv.new_WHV_PROCESSOR_GUEST_EVENT_COUNTERS()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywinhv.delete_WHV_PROCESSOR_GUEST_EVENT_COUNTERS
    __del__ = lambda self: None
WHV_PROCESSOR_GUEST_EVENT_COUNTERS_swigregister = _pywinhv.WHV_PROCESSOR_GUEST_EVENT_COUNTERS_swigregister
WHV_PROCESSOR_GUEST_EVENT_COUNTERS_swigregister(WHV_PROCESSOR_GUEST_EVENT_COUNTERS)

class WHV_PROCESSOR_APIC_COUNTERS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WHV_PROCESSOR_APIC_COUNTERS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WHV_PROCESSOR_APIC_COUNTERS, name)
    __repr__ = _swig_repr
    __swig_setmethods__["MmioAccessCount"] = _pywinhv.WHV_PROCESSOR_APIC_COUNTERS_MmioAccessCount_set
    __swig_getmethods__["MmioAccessCount"] = _pywinhv.WHV_PROCESSOR_APIC_COUNTERS_MmioAccessCount_get
    if _newclass:
        MmioAccessCount = _swig_property(_pywinhv.WHV_PROCESSOR_APIC_COUNTERS_MmioAccessCount_get, _pywinhv.WHV_PROCESSOR_APIC_COUNTERS_MmioAccessCount_set)
    __swig_setmethods__["EoiAccessCount"] = _pywinhv.WHV_PROCESSOR_APIC_COUNTERS_EoiAccessCount_set
    __swig_getmethods__["EoiAccessCount"] = _pywinhv.WHV_PROCESSOR_APIC_COUNTERS_EoiAccessCount_get
    if _newclass:
        EoiAccessCount = _swig_property(_pywinhv.WHV_PROCESSOR_APIC_COUNTERS_EoiAccessCount_get, _pywinhv.WHV_PROCESSOR_APIC_COUNTERS_EoiAccessCount_set)
    __swig_setmethods__["TprAccessCount"] = _pywinhv.WHV_PROCESSOR_APIC_COUNTERS_TprAccessCount_set
    __swig_getmethods__["TprAccessCount"] = _pywinhv.WHV_PROCESSOR_APIC_COUNTERS_TprAccessCount_get
    if _newclass:
        TprAccessCount = _swig_property(_pywinhv.WHV_PROCESSOR_APIC_COUNTERS_TprAccessCount_get, _pywinhv.WHV_PROCESSOR_APIC_COUNTERS_TprAccessCount_set)
    __swig_setmethods__["SentIpiCount"] = _pywinhv.WHV_PROCESSOR_APIC_COUNTERS_SentIpiCount_set
    __swig_getmethods__["SentIpiCount"] = _pywinhv.WHV_PROCESSOR_APIC_COUNTERS_SentIpiCount_get
    if _newclass:
        SentIpiCount = _swig_property(_pywinhv.WHV_PROCESSOR_APIC_COUNTERS_SentIpiCount_get, _pywinhv.WHV_PROCESSOR_APIC_COUNTERS_SentIpiCount_set)
    __swig_setmethods__["SelfIpiCount"] = _pywinhv.WHV_PROCESSOR_APIC_COUNTERS_SelfIpiCount_set
    __swig_getmethods__["SelfIpiCount"] = _pywinhv.WHV_PROCESSOR_APIC_COUNTERS_SelfIpiCount_get
    if _newclass:
        SelfIpiCount = _swig_property(_pywinhv.WHV_PROCESSOR_APIC_COUNTERS_SelfIpiCount_get, _pywinhv.WHV_PROCESSOR_APIC_COUNTERS_SelfIpiCount_set)

    def __init__(self):
        this = _pywinhv.new_WHV_PROCESSOR_APIC_COUNTERS()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywinhv.delete_WHV_PROCESSOR_APIC_COUNTERS
    __del__ = lambda self: None
WHV_PROCESSOR_APIC_COUNTERS_swigregister = _pywinhv.WHV_PROCESSOR_APIC_COUNTERS_swigregister
WHV_PROCESSOR_APIC_COUNTERS_swigregister(WHV_PROCESSOR_APIC_COUNTERS)


def WHvGetCapability(CapabilityCode, CapabilityBuffer, CapabilityBufferSizeInBytes, WrittenSizeInBytes):
    return _pywinhv.WHvGetCapability(CapabilityCode, CapabilityBuffer, CapabilityBufferSizeInBytes, WrittenSizeInBytes)
WHvGetCapability = _pywinhv.WHvGetCapability

def WHvCreatePartition(Partition):
    return _pywinhv.WHvCreatePartition(Partition)
WHvCreatePartition = _pywinhv.WHvCreatePartition

def WHvSetupPartition(Partition):
    return _pywinhv.WHvSetupPartition(Partition)
WHvSetupPartition = _pywinhv.WHvSetupPartition

def WHvDeletePartition(Partition):
    return _pywinhv.WHvDeletePartition(Partition)
WHvDeletePartition = _pywinhv.WHvDeletePartition

def WHvGetPartitionProperty(Partition, PropertyCode, PropertyBuffer, PropertyBufferSizeInBytes, WrittenSizeInBytes):
    return _pywinhv.WHvGetPartitionProperty(Partition, PropertyCode, PropertyBuffer, PropertyBufferSizeInBytes, WrittenSizeInBytes)
WHvGetPartitionProperty = _pywinhv.WHvGetPartitionProperty

def WHvSetPartitionProperty(Partition, PropertyCode, PropertyBuffer, PropertyBufferSizeInBytes):
    return _pywinhv.WHvSetPartitionProperty(Partition, PropertyCode, PropertyBuffer, PropertyBufferSizeInBytes)
WHvSetPartitionProperty = _pywinhv.WHvSetPartitionProperty

def WHvMapGpaRange(Partition, SourceAddress, GuestAddress, SizeInBytes, Flags):
    return _pywinhv.WHvMapGpaRange(Partition, SourceAddress, GuestAddress, SizeInBytes, Flags)
WHvMapGpaRange = _pywinhv.WHvMapGpaRange

def WHvUnmapGpaRange(Partition, GuestAddress, SizeInBytes):
    return _pywinhv.WHvUnmapGpaRange(Partition, GuestAddress, SizeInBytes)
WHvUnmapGpaRange = _pywinhv.WHvUnmapGpaRange

def WHvTranslateGva(Partition, VpIndex, Gva, TranslateFlags, TranslationResult, Gpa):
    return _pywinhv.WHvTranslateGva(Partition, VpIndex, Gva, TranslateFlags, TranslationResult, Gpa)
WHvTranslateGva = _pywinhv.WHvTranslateGva

def WHvCreateVirtualProcessor(Partition, VpIndex, Flags):
    return _pywinhv.WHvCreateVirtualProcessor(Partition, VpIndex, Flags)
WHvCreateVirtualProcessor = _pywinhv.WHvCreateVirtualProcessor

def WHvDeleteVirtualProcessor(Partition, VpIndex):
    return _pywinhv.WHvDeleteVirtualProcessor(Partition, VpIndex)
WHvDeleteVirtualProcessor = _pywinhv.WHvDeleteVirtualProcessor

def WHvRunVirtualProcessor(Partition, VpIndex, ExitContext, ExitContextSizeInBytes):
    return _pywinhv.WHvRunVirtualProcessor(Partition, VpIndex, ExitContext, ExitContextSizeInBytes)
WHvRunVirtualProcessor = _pywinhv.WHvRunVirtualProcessor

def WHvCancelRunVirtualProcessor(Partition, VpIndex, Flags):
    return _pywinhv.WHvCancelRunVirtualProcessor(Partition, VpIndex, Flags)
WHvCancelRunVirtualProcessor = _pywinhv.WHvCancelRunVirtualProcessor

def WHvGetVirtualProcessorRegisters(Partition, VpIndex, RegisterNames, RegisterCount, RegisterValues):
    return _pywinhv.WHvGetVirtualProcessorRegisters(Partition, VpIndex, RegisterNames, RegisterCount, RegisterValues)
WHvGetVirtualProcessorRegisters = _pywinhv.WHvGetVirtualProcessorRegisters

def WHvSetVirtualProcessorRegisters(Partition, VpIndex, RegisterNames, RegisterCount, RegisterValues):
    return _pywinhv.WHvSetVirtualProcessorRegisters(Partition, VpIndex, RegisterNames, RegisterCount, RegisterValues)
WHvSetVirtualProcessorRegisters = _pywinhv.WHvSetVirtualProcessorRegisters

def WHvGetVirtualProcessorInterruptControllerState(Partition, VpIndex, State, StateSize, WrittenSize):
    return _pywinhv.WHvGetVirtualProcessorInterruptControllerState(Partition, VpIndex, State, StateSize, WrittenSize)
WHvGetVirtualProcessorInterruptControllerState = _pywinhv.WHvGetVirtualProcessorInterruptControllerState

def WHvSetVirtualProcessorInterruptControllerState(Partition, VpIndex, State, StateSize):
    return _pywinhv.WHvSetVirtualProcessorInterruptControllerState(Partition, VpIndex, State, StateSize)
WHvSetVirtualProcessorInterruptControllerState = _pywinhv.WHvSetVirtualProcessorInterruptControllerState

def WHvRequestInterrupt(Partition, Interrupt, InterruptControlSize):
    return _pywinhv.WHvRequestInterrupt(Partition, Interrupt, InterruptControlSize)
WHvRequestInterrupt = _pywinhv.WHvRequestInterrupt

def WHvGetVirtualProcessorXsaveState(Partition, VpIndex, Buffer, BufferSizeInBytes, BytesWritten):
    return _pywinhv.WHvGetVirtualProcessorXsaveState(Partition, VpIndex, Buffer, BufferSizeInBytes, BytesWritten)
WHvGetVirtualProcessorXsaveState = _pywinhv.WHvGetVirtualProcessorXsaveState

def WHvSetVirtualProcessorXsaveState(Partition, VpIndex, Buffer, BufferSizeInBytes):
    return _pywinhv.WHvSetVirtualProcessorXsaveState(Partition, VpIndex, Buffer, BufferSizeInBytes)
WHvSetVirtualProcessorXsaveState = _pywinhv.WHvSetVirtualProcessorXsaveState

def WHvQueryGpaRangeDirtyBitmap(Partition, GuestAddress, RangeSizeInBytes, Bitmap, BitmapSizeInBytes):
    return _pywinhv.WHvQueryGpaRangeDirtyBitmap(Partition, GuestAddress, RangeSizeInBytes, Bitmap, BitmapSizeInBytes)
WHvQueryGpaRangeDirtyBitmap = _pywinhv.WHvQueryGpaRangeDirtyBitmap

def WHvGetPartitionCounters(Partition, CounterSet, Buffer, BufferSizeInBytes, BytesWritten):
    return _pywinhv.WHvGetPartitionCounters(Partition, CounterSet, Buffer, BufferSizeInBytes, BytesWritten)
WHvGetPartitionCounters = _pywinhv.WHvGetPartitionCounters

def WHvGetVirtualProcessorCounters(Partition, VpIndex, CounterSet, Buffer, BufferSizeInBytes, BytesWritten):
    return _pywinhv.WHvGetVirtualProcessorCounters(Partition, VpIndex, CounterSet, Buffer, BufferSizeInBytes, BytesWritten)
WHvGetVirtualProcessorCounters = _pywinhv.WHvGetVirtualProcessorCounters
class WHV_EMULATOR_STATUS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WHV_EMULATOR_STATUS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WHV_EMULATOR_STATUS, name)
    __repr__ = _swig_repr
    __swig_setmethods__["EmulationSuccessful"] = _pywinhv.WHV_EMULATOR_STATUS_EmulationSuccessful_set
    __swig_getmethods__["EmulationSuccessful"] = _pywinhv.WHV_EMULATOR_STATUS_EmulationSuccessful_get
    if _newclass:
        EmulationSuccessful = _swig_property(_pywinhv.WHV_EMULATOR_STATUS_EmulationSuccessful_get, _pywinhv.WHV_EMULATOR_STATUS_EmulationSuccessful_set)
    __swig_setmethods__["InternalEmulationFailure"] = _pywinhv.WHV_EMULATOR_STATUS_InternalEmulationFailure_set
    __swig_getmethods__["InternalEmulationFailure"] = _pywinhv.WHV_EMULATOR_STATUS_InternalEmulationFailure_get
    if _newclass:
        InternalEmulationFailure = _swig_property(_pywinhv.WHV_EMULATOR_STATUS_InternalEmulationFailure_get, _pywinhv.WHV_EMULATOR_STATUS_InternalEmulationFailure_set)
    __swig_setmethods__["IoPortCallbackFailed"] = _pywinhv.WHV_EMULATOR_STATUS_IoPortCallbackFailed_set
    __swig_getmethods__["IoPortCallbackFailed"] = _pywinhv.WHV_EMULATOR_STATUS_IoPortCallbackFailed_get
    if _newclass:
        IoPortCallbackFailed = _swig_property(_pywinhv.WHV_EMULATOR_STATUS_IoPortCallbackFailed_get, _pywinhv.WHV_EMULATOR_STATUS_IoPortCallbackFailed_set)
    __swig_setmethods__["MemoryCallbackFailed"] = _pywinhv.WHV_EMULATOR_STATUS_MemoryCallbackFailed_set
    __swig_getmethods__["MemoryCallbackFailed"] = _pywinhv.WHV_EMULATOR_STATUS_MemoryCallbackFailed_get
    if _newclass:
        MemoryCallbackFailed = _swig_property(_pywinhv.WHV_EMULATOR_STATUS_MemoryCallbackFailed_get, _pywinhv.WHV_EMULATOR_STATUS_MemoryCallbackFailed_set)
    __swig_setmethods__["TranslateGvaPageCallbackFailed"] = _pywinhv.WHV_EMULATOR_STATUS_TranslateGvaPageCallbackFailed_set
    __swig_getmethods__["TranslateGvaPageCallbackFailed"] = _pywinhv.WHV_EMULATOR_STATUS_TranslateGvaPageCallbackFailed_get
    if _newclass:
        TranslateGvaPageCallbackFailed = _swig_property(_pywinhv.WHV_EMULATOR_STATUS_TranslateGvaPageCallbackFailed_get, _pywinhv.WHV_EMULATOR_STATUS_TranslateGvaPageCallbackFailed_set)
    __swig_setmethods__["TranslateGvaPageCallbackGpaIsNotAligned"] = _pywinhv.WHV_EMULATOR_STATUS_TranslateGvaPageCallbackGpaIsNotAligned_set
    __swig_getmethods__["TranslateGvaPageCallbackGpaIsNotAligned"] = _pywinhv.WHV_EMULATOR_STATUS_TranslateGvaPageCallbackGpaIsNotAligned_get
    if _newclass:
        TranslateGvaPageCallbackGpaIsNotAligned = _swig_property(_pywinhv.WHV_EMULATOR_STATUS_TranslateGvaPageCallbackGpaIsNotAligned_get, _pywinhv.WHV_EMULATOR_STATUS_TranslateGvaPageCallbackGpaIsNotAligned_set)
    __swig_setmethods__["GetVirtualProcessorRegistersCallbackFailed"] = _pywinhv.WHV_EMULATOR_STATUS_GetVirtualProcessorRegistersCallbackFailed_set
    __swig_getmethods__["GetVirtualProcessorRegistersCallbackFailed"] = _pywinhv.WHV_EMULATOR_STATUS_GetVirtualProcessorRegistersCallbackFailed_get
    if _newclass:
        GetVirtualProcessorRegistersCallbackFailed = _swig_property(_pywinhv.WHV_EMULATOR_STATUS_GetVirtualProcessorRegistersCallbackFailed_get, _pywinhv.WHV_EMULATOR_STATUS_GetVirtualProcessorRegistersCallbackFailed_set)
    __swig_setmethods__["SetVirtualProcessorRegistersCallbackFailed"] = _pywinhv.WHV_EMULATOR_STATUS_SetVirtualProcessorRegistersCallbackFailed_set
    __swig_getmethods__["SetVirtualProcessorRegistersCallbackFailed"] = _pywinhv.WHV_EMULATOR_STATUS_SetVirtualProcessorRegistersCallbackFailed_get
    if _newclass:
        SetVirtualProcessorRegistersCallbackFailed = _swig_property(_pywinhv.WHV_EMULATOR_STATUS_SetVirtualProcessorRegistersCallbackFailed_get, _pywinhv.WHV_EMULATOR_STATUS_SetVirtualProcessorRegistersCallbackFailed_set)
    __swig_setmethods__["InterruptCausedIntercept"] = _pywinhv.WHV_EMULATOR_STATUS_InterruptCausedIntercept_set
    __swig_getmethods__["InterruptCausedIntercept"] = _pywinhv.WHV_EMULATOR_STATUS_InterruptCausedIntercept_get
    if _newclass:
        InterruptCausedIntercept = _swig_property(_pywinhv.WHV_EMULATOR_STATUS_InterruptCausedIntercept_get, _pywinhv.WHV_EMULATOR_STATUS_InterruptCausedIntercept_set)
    __swig_setmethods__["GuestCannotBeFaulted"] = _pywinhv.WHV_EMULATOR_STATUS_GuestCannotBeFaulted_set
    __swig_getmethods__["GuestCannotBeFaulted"] = _pywinhv.WHV_EMULATOR_STATUS_GuestCannotBeFaulted_get
    if _newclass:
        GuestCannotBeFaulted = _swig_property(_pywinhv.WHV_EMULATOR_STATUS_GuestCannotBeFaulted_get, _pywinhv.WHV_EMULATOR_STATUS_GuestCannotBeFaulted_set)
    __swig_setmethods__["Reserved"] = _pywinhv.WHV_EMULATOR_STATUS_Reserved_set
    __swig_getmethods__["Reserved"] = _pywinhv.WHV_EMULATOR_STATUS_Reserved_get
    if _newclass:
        Reserved = _swig_property(_pywinhv.WHV_EMULATOR_STATUS_Reserved_get, _pywinhv.WHV_EMULATOR_STATUS_Reserved_set)
    __swig_setmethods__["AsUINT32"] = _pywinhv.WHV_EMULATOR_STATUS_AsUINT32_set
    __swig_getmethods__["AsUINT32"] = _pywinhv.WHV_EMULATOR_STATUS_AsUINT32_get
    if _newclass:
        AsUINT32 = _swig_property(_pywinhv.WHV_EMULATOR_STATUS_AsUINT32_get, _pywinhv.WHV_EMULATOR_STATUS_AsUINT32_set)

    def __init__(self):
        this = _pywinhv.new_WHV_EMULATOR_STATUS()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywinhv.delete_WHV_EMULATOR_STATUS
    __del__ = lambda self: None
WHV_EMULATOR_STATUS_swigregister = _pywinhv.WHV_EMULATOR_STATUS_swigregister
WHV_EMULATOR_STATUS_swigregister(WHV_EMULATOR_STATUS)

class WHV_EMULATOR_MEMORY_ACCESS_INFO(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WHV_EMULATOR_MEMORY_ACCESS_INFO, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WHV_EMULATOR_MEMORY_ACCESS_INFO, name)
    __repr__ = _swig_repr
    __swig_setmethods__["GpaAddress"] = _pywinhv.WHV_EMULATOR_MEMORY_ACCESS_INFO_GpaAddress_set
    __swig_getmethods__["GpaAddress"] = _pywinhv.WHV_EMULATOR_MEMORY_ACCESS_INFO_GpaAddress_get
    if _newclass:
        GpaAddress = _swig_property(_pywinhv.WHV_EMULATOR_MEMORY_ACCESS_INFO_GpaAddress_get, _pywinhv.WHV_EMULATOR_MEMORY_ACCESS_INFO_GpaAddress_set)
    __swig_setmethods__["Direction"] = _pywinhv.WHV_EMULATOR_MEMORY_ACCESS_INFO_Direction_set
    __swig_getmethods__["Direction"] = _pywinhv.WHV_EMULATOR_MEMORY_ACCESS_INFO_Direction_get
    if _newclass:
        Direction = _swig_property(_pywinhv.WHV_EMULATOR_MEMORY_ACCESS_INFO_Direction_get, _pywinhv.WHV_EMULATOR_MEMORY_ACCESS_INFO_Direction_set)
    __swig_setmethods__["AccessSize"] = _pywinhv.WHV_EMULATOR_MEMORY_ACCESS_INFO_AccessSize_set
    __swig_getmethods__["AccessSize"] = _pywinhv.WHV_EMULATOR_MEMORY_ACCESS_INFO_AccessSize_get
    if _newclass:
        AccessSize = _swig_property(_pywinhv.WHV_EMULATOR_MEMORY_ACCESS_INFO_AccessSize_get, _pywinhv.WHV_EMULATOR_MEMORY_ACCESS_INFO_AccessSize_set)
    __swig_setmethods__["Data"] = _pywinhv.WHV_EMULATOR_MEMORY_ACCESS_INFO_Data_set
    __swig_getmethods__["Data"] = _pywinhv.WHV_EMULATOR_MEMORY_ACCESS_INFO_Data_get
    if _newclass:
        Data = _swig_property(_pywinhv.WHV_EMULATOR_MEMORY_ACCESS_INFO_Data_get, _pywinhv.WHV_EMULATOR_MEMORY_ACCESS_INFO_Data_set)

    def __init__(self):
        this = _pywinhv.new_WHV_EMULATOR_MEMORY_ACCESS_INFO()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywinhv.delete_WHV_EMULATOR_MEMORY_ACCESS_INFO
    __del__ = lambda self: None
WHV_EMULATOR_MEMORY_ACCESS_INFO_swigregister = _pywinhv.WHV_EMULATOR_MEMORY_ACCESS_INFO_swigregister
WHV_EMULATOR_MEMORY_ACCESS_INFO_swigregister(WHV_EMULATOR_MEMORY_ACCESS_INFO)

class WHV_EMULATOR_IO_ACCESS_INFO(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WHV_EMULATOR_IO_ACCESS_INFO, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WHV_EMULATOR_IO_ACCESS_INFO, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Direction"] = _pywinhv.WHV_EMULATOR_IO_ACCESS_INFO_Direction_set
    __swig_getmethods__["Direction"] = _pywinhv.WHV_EMULATOR_IO_ACCESS_INFO_Direction_get
    if _newclass:
        Direction = _swig_property(_pywinhv.WHV_EMULATOR_IO_ACCESS_INFO_Direction_get, _pywinhv.WHV_EMULATOR_IO_ACCESS_INFO_Direction_set)
    __swig_setmethods__["Port"] = _pywinhv.WHV_EMULATOR_IO_ACCESS_INFO_Port_set
    __swig_getmethods__["Port"] = _pywinhv.WHV_EMULATOR_IO_ACCESS_INFO_Port_get
    if _newclass:
        Port = _swig_property(_pywinhv.WHV_EMULATOR_IO_ACCESS_INFO_Port_get, _pywinhv.WHV_EMULATOR_IO_ACCESS_INFO_Port_set)
    __swig_setmethods__["AccessSize"] = _pywinhv.WHV_EMULATOR_IO_ACCESS_INFO_AccessSize_set
    __swig_getmethods__["AccessSize"] = _pywinhv.WHV_EMULATOR_IO_ACCESS_INFO_AccessSize_get
    if _newclass:
        AccessSize = _swig_property(_pywinhv.WHV_EMULATOR_IO_ACCESS_INFO_AccessSize_get, _pywinhv.WHV_EMULATOR_IO_ACCESS_INFO_AccessSize_set)
    __swig_setmethods__["Data"] = _pywinhv.WHV_EMULATOR_IO_ACCESS_INFO_Data_set
    __swig_getmethods__["Data"] = _pywinhv.WHV_EMULATOR_IO_ACCESS_INFO_Data_get
    if _newclass:
        Data = _swig_property(_pywinhv.WHV_EMULATOR_IO_ACCESS_INFO_Data_get, _pywinhv.WHV_EMULATOR_IO_ACCESS_INFO_Data_set)

    def __init__(self):
        this = _pywinhv.new_WHV_EMULATOR_IO_ACCESS_INFO()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywinhv.delete_WHV_EMULATOR_IO_ACCESS_INFO
    __del__ = lambda self: None
WHV_EMULATOR_IO_ACCESS_INFO_swigregister = _pywinhv.WHV_EMULATOR_IO_ACCESS_INFO_swigregister
WHV_EMULATOR_IO_ACCESS_INFO_swigregister(WHV_EMULATOR_IO_ACCESS_INFO)

class WHV_EMULATOR_CALLBACKS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WHV_EMULATOR_CALLBACKS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WHV_EMULATOR_CALLBACKS, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Size"] = _pywinhv.WHV_EMULATOR_CALLBACKS_Size_set
    __swig_getmethods__["Size"] = _pywinhv.WHV_EMULATOR_CALLBACKS_Size_get
    if _newclass:
        Size = _swig_property(_pywinhv.WHV_EMULATOR_CALLBACKS_Size_get, _pywinhv.WHV_EMULATOR_CALLBACKS_Size_set)
    __swig_setmethods__["Reserved"] = _pywinhv.WHV_EMULATOR_CALLBACKS_Reserved_set
    __swig_getmethods__["Reserved"] = _pywinhv.WHV_EMULATOR_CALLBACKS_Reserved_get
    if _newclass:
        Reserved = _swig_property(_pywinhv.WHV_EMULATOR_CALLBACKS_Reserved_get, _pywinhv.WHV_EMULATOR_CALLBACKS_Reserved_set)
    __swig_setmethods__["WHvEmulatorIoPortCallback"] = _pywinhv.WHV_EMULATOR_CALLBACKS_WHvEmulatorIoPortCallback_set
    __swig_getmethods__["WHvEmulatorIoPortCallback"] = _pywinhv.WHV_EMULATOR_CALLBACKS_WHvEmulatorIoPortCallback_get
    if _newclass:
        WHvEmulatorIoPortCallback = _swig_property(_pywinhv.WHV_EMULATOR_CALLBACKS_WHvEmulatorIoPortCallback_get, _pywinhv.WHV_EMULATOR_CALLBACKS_WHvEmulatorIoPortCallback_set)
    __swig_setmethods__["WHvEmulatorMemoryCallback"] = _pywinhv.WHV_EMULATOR_CALLBACKS_WHvEmulatorMemoryCallback_set
    __swig_getmethods__["WHvEmulatorMemoryCallback"] = _pywinhv.WHV_EMULATOR_CALLBACKS_WHvEmulatorMemoryCallback_get
    if _newclass:
        WHvEmulatorMemoryCallback = _swig_property(_pywinhv.WHV_EMULATOR_CALLBACKS_WHvEmulatorMemoryCallback_get, _pywinhv.WHV_EMULATOR_CALLBACKS_WHvEmulatorMemoryCallback_set)
    __swig_setmethods__["WHvEmulatorGetVirtualProcessorRegisters"] = _pywinhv.WHV_EMULATOR_CALLBACKS_WHvEmulatorGetVirtualProcessorRegisters_set
    __swig_getmethods__["WHvEmulatorGetVirtualProcessorRegisters"] = _pywinhv.WHV_EMULATOR_CALLBACKS_WHvEmulatorGetVirtualProcessorRegisters_get
    if _newclass:
        WHvEmulatorGetVirtualProcessorRegisters = _swig_property(_pywinhv.WHV_EMULATOR_CALLBACKS_WHvEmulatorGetVirtualProcessorRegisters_get, _pywinhv.WHV_EMULATOR_CALLBACKS_WHvEmulatorGetVirtualProcessorRegisters_set)
    __swig_setmethods__["WHvEmulatorSetVirtualProcessorRegisters"] = _pywinhv.WHV_EMULATOR_CALLBACKS_WHvEmulatorSetVirtualProcessorRegisters_set
    __swig_getmethods__["WHvEmulatorSetVirtualProcessorRegisters"] = _pywinhv.WHV_EMULATOR_CALLBACKS_WHvEmulatorSetVirtualProcessorRegisters_get
    if _newclass:
        WHvEmulatorSetVirtualProcessorRegisters = _swig_property(_pywinhv.WHV_EMULATOR_CALLBACKS_WHvEmulatorSetVirtualProcessorRegisters_get, _pywinhv.WHV_EMULATOR_CALLBACKS_WHvEmulatorSetVirtualProcessorRegisters_set)
    __swig_setmethods__["WHvEmulatorTranslateGvaPage"] = _pywinhv.WHV_EMULATOR_CALLBACKS_WHvEmulatorTranslateGvaPage_set
    __swig_getmethods__["WHvEmulatorTranslateGvaPage"] = _pywinhv.WHV_EMULATOR_CALLBACKS_WHvEmulatorTranslateGvaPage_get
    if _newclass:
        WHvEmulatorTranslateGvaPage = _swig_property(_pywinhv.WHV_EMULATOR_CALLBACKS_WHvEmulatorTranslateGvaPage_get, _pywinhv.WHV_EMULATOR_CALLBACKS_WHvEmulatorTranslateGvaPage_set)

    def __init__(self):
        this = _pywinhv.new_WHV_EMULATOR_CALLBACKS()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywinhv.delete_WHV_EMULATOR_CALLBACKS
    __del__ = lambda self: None
WHV_EMULATOR_CALLBACKS_swigregister = _pywinhv.WHV_EMULATOR_CALLBACKS_swigregister
WHV_EMULATOR_CALLBACKS_swigregister(WHV_EMULATOR_CALLBACKS)


def WHvEmulatorCreateEmulator(Callbacks, Emulator):
    return _pywinhv.WHvEmulatorCreateEmulator(Callbacks, Emulator)
WHvEmulatorCreateEmulator = _pywinhv.WHvEmulatorCreateEmulator

def WHvEmulatorDestroyEmulator(Emulator):
    return _pywinhv.WHvEmulatorDestroyEmulator(Emulator)
WHvEmulatorDestroyEmulator = _pywinhv.WHvEmulatorDestroyEmulator

def WHvEmulatorTryIoEmulation(Emulator, Context, VpContext, IoInstructionContext, EmulatorReturnStatus):
    return _pywinhv.WHvEmulatorTryIoEmulation(Emulator, Context, VpContext, IoInstructionContext, EmulatorReturnStatus)
WHvEmulatorTryIoEmulation = _pywinhv.WHvEmulatorTryIoEmulation

def WHvEmulatorTryMmioEmulation(Emulator, Context, VpContext, MmioInstructionContext, EmulatorReturnStatus):
    return _pywinhv.WHvEmulatorTryMmioEmulation(Emulator, Context, VpContext, MmioInstructionContext, EmulatorReturnStatus)
WHvEmulatorTryMmioEmulation = _pywinhv.WHvEmulatorTryMmioEmulation
class MMPTE_HARDWARE(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MMPTE_HARDWARE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MMPTE_HARDWARE, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Present"] = _pywinhv.MMPTE_HARDWARE_Present_set
    __swig_getmethods__["Present"] = _pywinhv.MMPTE_HARDWARE_Present_get
    if _newclass:
        Present = _swig_property(_pywinhv.MMPTE_HARDWARE_Present_get, _pywinhv.MMPTE_HARDWARE_Present_set)
    __swig_setmethods__["Write"] = _pywinhv.MMPTE_HARDWARE_Write_set
    __swig_getmethods__["Write"] = _pywinhv.MMPTE_HARDWARE_Write_get
    if _newclass:
        Write = _swig_property(_pywinhv.MMPTE_HARDWARE_Write_get, _pywinhv.MMPTE_HARDWARE_Write_set)
    __swig_setmethods__["UserAccessible"] = _pywinhv.MMPTE_HARDWARE_UserAccessible_set
    __swig_getmethods__["UserAccessible"] = _pywinhv.MMPTE_HARDWARE_UserAccessible_get
    if _newclass:
        UserAccessible = _swig_property(_pywinhv.MMPTE_HARDWARE_UserAccessible_get, _pywinhv.MMPTE_HARDWARE_UserAccessible_set)
    __swig_setmethods__["WriteThrough"] = _pywinhv.MMPTE_HARDWARE_WriteThrough_set
    __swig_getmethods__["WriteThrough"] = _pywinhv.MMPTE_HARDWARE_WriteThrough_get
    if _newclass:
        WriteThrough = _swig_property(_pywinhv.MMPTE_HARDWARE_WriteThrough_get, _pywinhv.MMPTE_HARDWARE_WriteThrough_set)
    __swig_setmethods__["CacheDisable"] = _pywinhv.MMPTE_HARDWARE_CacheDisable_set
    __swig_getmethods__["CacheDisable"] = _pywinhv.MMPTE_HARDWARE_CacheDisable_get
    if _newclass:
        CacheDisable = _swig_property(_pywinhv.MMPTE_HARDWARE_CacheDisable_get, _pywinhv.MMPTE_HARDWARE_CacheDisable_set)
    __swig_setmethods__["Accessed"] = _pywinhv.MMPTE_HARDWARE_Accessed_set
    __swig_getmethods__["Accessed"] = _pywinhv.MMPTE_HARDWARE_Accessed_get
    if _newclass:
        Accessed = _swig_property(_pywinhv.MMPTE_HARDWARE_Accessed_get, _pywinhv.MMPTE_HARDWARE_Accessed_set)
    __swig_setmethods__["Dirty"] = _pywinhv.MMPTE_HARDWARE_Dirty_set
    __swig_getmethods__["Dirty"] = _pywinhv.MMPTE_HARDWARE_Dirty_get
    if _newclass:
        Dirty = _swig_property(_pywinhv.MMPTE_HARDWARE_Dirty_get, _pywinhv.MMPTE_HARDWARE_Dirty_set)
    __swig_setmethods__["LargePage"] = _pywinhv.MMPTE_HARDWARE_LargePage_set
    __swig_getmethods__["LargePage"] = _pywinhv.MMPTE_HARDWARE_LargePage_get
    if _newclass:
        LargePage = _swig_property(_pywinhv.MMPTE_HARDWARE_LargePage_get, _pywinhv.MMPTE_HARDWARE_LargePage_set)
    __swig_setmethods__["Available"] = _pywinhv.MMPTE_HARDWARE_Available_set
    __swig_getmethods__["Available"] = _pywinhv.MMPTE_HARDWARE_Available_get
    if _newclass:
        Available = _swig_property(_pywinhv.MMPTE_HARDWARE_Available_get, _pywinhv.MMPTE_HARDWARE_Available_set)
    __swig_setmethods__["PageFrameNumber"] = _pywinhv.MMPTE_HARDWARE_PageFrameNumber_set
    __swig_getmethods__["PageFrameNumber"] = _pywinhv.MMPTE_HARDWARE_PageFrameNumber_get
    if _newclass:
        PageFrameNumber = _swig_property(_pywinhv.MMPTE_HARDWARE_PageFrameNumber_get, _pywinhv.MMPTE_HARDWARE_PageFrameNumber_set)
    __swig_setmethods__["ReservedForHardware"] = _pywinhv.MMPTE_HARDWARE_ReservedForHardware_set
    __swig_getmethods__["ReservedForHardware"] = _pywinhv.MMPTE_HARDWARE_ReservedForHardware_get
    if _newclass:
        ReservedForHardware = _swig_property(_pywinhv.MMPTE_HARDWARE_ReservedForHardware_get, _pywinhv.MMPTE_HARDWARE_ReservedForHardware_set)
    __swig_setmethods__["ReservedForSoftware"] = _pywinhv.MMPTE_HARDWARE_ReservedForSoftware_set
    __swig_getmethods__["ReservedForSoftware"] = _pywinhv.MMPTE_HARDWARE_ReservedForSoftware_get
    if _newclass:
        ReservedForSoftware = _swig_property(_pywinhv.MMPTE_HARDWARE_ReservedForSoftware_get, _pywinhv.MMPTE_HARDWARE_ReservedForSoftware_set)
    __swig_setmethods__["NoExecute"] = _pywinhv.MMPTE_HARDWARE_NoExecute_set
    __swig_getmethods__["NoExecute"] = _pywinhv.MMPTE_HARDWARE_NoExecute_get
    if _newclass:
        NoExecute = _swig_property(_pywinhv.MMPTE_HARDWARE_NoExecute_get, _pywinhv.MMPTE_HARDWARE_NoExecute_set)
    __swig_setmethods__["AsUINT64"] = _pywinhv.MMPTE_HARDWARE_AsUINT64_set
    __swig_getmethods__["AsUINT64"] = _pywinhv.MMPTE_HARDWARE_AsUINT64_get
    if _newclass:
        AsUINT64 = _swig_property(_pywinhv.MMPTE_HARDWARE_AsUINT64_get, _pywinhv.MMPTE_HARDWARE_AsUINT64_set)

    def __init__(self):
        this = _pywinhv.new_MMPTE_HARDWARE()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywinhv.delete_MMPTE_HARDWARE
    __del__ = lambda self: None
MMPTE_HARDWARE_swigregister = _pywinhv.MMPTE_HARDWARE_swigregister
MMPTE_HARDWARE_swigregister(MMPTE_HARDWARE)

class WHV_PROCESSOR_ALL_COUNTERS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WHV_PROCESSOR_ALL_COUNTERS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WHV_PROCESSOR_ALL_COUNTERS, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Runtime"] = _pywinhv.WHV_PROCESSOR_ALL_COUNTERS_Runtime_set
    __swig_getmethods__["Runtime"] = _pywinhv.WHV_PROCESSOR_ALL_COUNTERS_Runtime_get
    if _newclass:
        Runtime = _swig_property(_pywinhv.WHV_PROCESSOR_ALL_COUNTERS_Runtime_get, _pywinhv.WHV_PROCESSOR_ALL_COUNTERS_Runtime_set)
    __swig_setmethods__["Intercepts"] = _pywinhv.WHV_PROCESSOR_ALL_COUNTERS_Intercepts_set
    __swig_getmethods__["Intercepts"] = _pywinhv.WHV_PROCESSOR_ALL_COUNTERS_Intercepts_get
    if _newclass:
        Intercepts = _swig_property(_pywinhv.WHV_PROCESSOR_ALL_COUNTERS_Intercepts_get, _pywinhv.WHV_PROCESSOR_ALL_COUNTERS_Intercepts_set)
    __swig_setmethods__["GuestEvents"] = _pywinhv.WHV_PROCESSOR_ALL_COUNTERS_GuestEvents_set
    __swig_getmethods__["GuestEvents"] = _pywinhv.WHV_PROCESSOR_ALL_COUNTERS_GuestEvents_get
    if _newclass:
        GuestEvents = _swig_property(_pywinhv.WHV_PROCESSOR_ALL_COUNTERS_GuestEvents_get, _pywinhv.WHV_PROCESSOR_ALL_COUNTERS_GuestEvents_set)
    __swig_setmethods__["Apic"] = _pywinhv.WHV_PROCESSOR_ALL_COUNTERS_Apic_set
    __swig_getmethods__["Apic"] = _pywinhv.WHV_PROCESSOR_ALL_COUNTERS_Apic_get
    if _newclass:
        Apic = _swig_property(_pywinhv.WHV_PROCESSOR_ALL_COUNTERS_Apic_get, _pywinhv.WHV_PROCESSOR_ALL_COUNTERS_Apic_set)

    def __len__(self):
        return _pywinhv.WHV_PROCESSOR_ALL_COUNTERS___len__(self)

    def __init__(self):
        this = _pywinhv.new_WHV_PROCESSOR_ALL_COUNTERS()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywinhv.delete_WHV_PROCESSOR_ALL_COUNTERS
    __del__ = lambda self: None
WHV_PROCESSOR_ALL_COUNTERS_swigregister = _pywinhv.WHV_PROCESSOR_ALL_COUNTERS_swigregister
WHV_PROCESSOR_ALL_COUNTERS_swigregister(WHV_PROCESSOR_ALL_COUNTERS)

class WHV_REGISTER_NAME_ARRAY(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WHV_REGISTER_NAME_ARRAY, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WHV_REGISTER_NAME_ARRAY, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _pywinhv.new_WHV_REGISTER_NAME_ARRAY(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywinhv.delete_WHV_REGISTER_NAME_ARRAY
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _pywinhv.WHV_REGISTER_NAME_ARRAY___getitem__(self, index)

    def __setitem__(self, index, value):
        return _pywinhv.WHV_REGISTER_NAME_ARRAY___setitem__(self, index, value)

    def cast(self):
        return _pywinhv.WHV_REGISTER_NAME_ARRAY_cast(self)
    if _newclass:
        frompointer = staticmethod(_pywinhv.WHV_REGISTER_NAME_ARRAY_frompointer)
    else:
        frompointer = _pywinhv.WHV_REGISTER_NAME_ARRAY_frompointer
WHV_REGISTER_NAME_ARRAY_swigregister = _pywinhv.WHV_REGISTER_NAME_ARRAY_swigregister
WHV_REGISTER_NAME_ARRAY_swigregister(WHV_REGISTER_NAME_ARRAY)

def WHV_REGISTER_NAME_ARRAY_frompointer(t):
    return _pywinhv.WHV_REGISTER_NAME_ARRAY_frompointer(t)
WHV_REGISTER_NAME_ARRAY_frompointer = _pywinhv.WHV_REGISTER_NAME_ARRAY_frompointer

class WHV_REGISTER_VALUE_ARRAY(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WHV_REGISTER_VALUE_ARRAY, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WHV_REGISTER_VALUE_ARRAY, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _pywinhv.new_WHV_REGISTER_VALUE_ARRAY(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywinhv.delete_WHV_REGISTER_VALUE_ARRAY
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _pywinhv.WHV_REGISTER_VALUE_ARRAY___getitem__(self, index)

    def __setitem__(self, index, value):
        return _pywinhv.WHV_REGISTER_VALUE_ARRAY___setitem__(self, index, value)

    def cast(self):
        return _pywinhv.WHV_REGISTER_VALUE_ARRAY_cast(self)
    if _newclass:
        frompointer = staticmethod(_pywinhv.WHV_REGISTER_VALUE_ARRAY_frompointer)
    else:
        frompointer = _pywinhv.WHV_REGISTER_VALUE_ARRAY_frompointer
WHV_REGISTER_VALUE_ARRAY_swigregister = _pywinhv.WHV_REGISTER_VALUE_ARRAY_swigregister
WHV_REGISTER_VALUE_ARRAY_swigregister(WHV_REGISTER_VALUE_ARRAY)

def WHV_REGISTER_VALUE_ARRAY_frompointer(t):
    return _pywinhv.WHV_REGISTER_VALUE_ARRAY_frompointer(t)
WHV_REGISTER_VALUE_ARRAY_frompointer = _pywinhv.WHV_REGISTER_VALUE_ARRAY_frompointer

class UINT64_ARRAY(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UINT64_ARRAY, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UINT64_ARRAY, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _pywinhv.new_UINT64_ARRAY(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywinhv.delete_UINT64_ARRAY
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _pywinhv.UINT64_ARRAY___getitem__(self, index)

    def __setitem__(self, index, value):
        return _pywinhv.UINT64_ARRAY___setitem__(self, index, value)

    def cast(self):
        return _pywinhv.UINT64_ARRAY_cast(self)
    if _newclass:
        frompointer = staticmethod(_pywinhv.UINT64_ARRAY_frompointer)
    else:
        frompointer = _pywinhv.UINT64_ARRAY_frompointer
UINT64_ARRAY_swigregister = _pywinhv.UINT64_ARRAY_swigregister
UINT64_ARRAY_swigregister(UINT64_ARRAY)

def UINT64_ARRAY_frompointer(t):
    return _pywinhv.UINT64_ARRAY_frompointer(t)
UINT64_ARRAY_frompointer = _pywinhv.UINT64_ARRAY_frompointer


def uint2pvoid(x):
    return _pywinhv.uint2pvoid(x)
uint2pvoid = _pywinhv.uint2pvoid
# This file is compatible with both classic and new-style classes.


